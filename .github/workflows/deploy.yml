name: Deploy to Cloud Run  # Name of your workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the 'main' branch

jobs:
  deploy:
    name: Deploy to Cloud Run 
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual machine

    env:
      REGION: us-central1
      REPO: my-microservice

    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'
          create_credentials_file: true
          export_environment_variables: true
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Google Cloud SDK  # Step 2: Authenticate with GCP
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  # Use the secret you stored
          install_components: 'beta'

      - name: Create Artifact Registry Repository
        run: |
          gcloud artifacts repositories create ${{ env.REPO }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Repository for my microservice" || true

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO }}/${{ env.REPO }}:${{ github.sha }} -f api/Dockerfile .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO }}/${{ env.REPO }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.REPO }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO }}/${{ env.REPO }}:${{ github.sha }}
          env_vars: |
            FLASK_ENV=production
          secrets: |
            SERVICE_API_KEY=SERVICE_API_KEY:latest
            OPENAI_API_KEY=OPENAI_API_KEY:latest
            GOOGLE_API_KEY=GOOGLE_API_KEY:latest
            ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest
            PINECONE_API_KEY=PINECONE_API_KEY:latest
            WANDB_API_KEY=WANDB_API_KEY:latest
          flags: |
            --allow-unauthenticated
            --port=8090
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=80
            --timeout=300

      - name: Clean up
        if: always()
        run: docker image prune -f
