[
  {
    "query": "Detects a highly relevant Antivirus alert that reports a hack tool or other attack tool.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "generated_rule": "title: Antivirus Hacktool or Attack Tool Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: >\n  Detects a highly relevant Antivirus alert that reports a hack tool or other attack tool.\n  This event must not be ignored just because the AV has blocked the malware but investigate\n  how it came there in the first place.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.execution\n- attack.t1204\nlogsource:\n  category: antivirus\n  product: any\ndetection:\n  selection:\n    Signature|startswith:\n    - ATK/\n    - Exploit.Script.CVE\n    - HKTL\n    - HTOOL\n    - PWS.\n    - PWSX\n    - SecurityTool\n    Signature|contains:\n    - Adfind\n    - Brutel\n    - BruteR\n    - Cobalt\n    - COBEACON\n    - Cometer\n    - DumpCreds\n    - FastReverseProxy\n    - Hacktool\n    - Havoc\n    - Impacket\n    - Keylogger\n    - Koadic\n    - Mimikatz\n    - Nighthawk\n    - PentestPowerShell\n    - Potato\n    - PowerSploit\n    - PowerSSH\n    - PshlSpy\n    - PSWTool\n    - PWCrack\n    - PWDump\n    - Rozena\n    - Rusthound\n    - Sbelt\n    - Seatbelt\n    - SecurityTool\n    - SharpDump\n    - SharpHound\n    - Shellcode\n    - Sliver\n    - Snaffler\n    - SOAPHound\n    - Splinter\n    - Swrort\n    - TurtleLoader\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: Antivirus Hacktool Detection\nid: fa0c05b6-8ad3-468d-8231-c1cbccb64fba\nstatus: stable\ndescription: |\n    Detects a highly relevant Antivirus alert that reports a hack tool or other attack tool.\n    This event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\nreferences:\n    - https://www.nextron-systems.com/2021/08/16/antivirus-event-analysis-cheat-sheet-v1-8-2/\n    - https://www.nextron-systems.com/?s=antivirus\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2021-08-16\nmodified: 2024-11-02\ntags:\n    - attack.execution\n    - attack.t1204\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n              - 'ATK/'  # Sophos\n              - 'Exploit.Script.CVE'\n              - 'HKTL'\n              - 'HTOOL'\n              - 'PWS.'\n              - 'PWSX'\n              - 'SecurityTool'\n              # - 'FRP.'\n        - Signature|contains:\n              - 'Adfind'\n              - 'Brutel'\n              - 'BruteR'\n              - 'Cobalt'\n              - 'COBEACON'\n              - 'Cometer'\n              - 'DumpCreds'\n              - 'FastReverseProxy'\n              - 'Hacktool'\n              - 'Havoc'\n              - 'Impacket'\n              - 'Keylogger'\n              - 'Koadic'\n              - 'Mimikatz'\n              - 'Nighthawk'\n              - 'PentestPowerShell'\n              - 'Potato'\n              - 'PowerSploit'\n              - 'PowerSSH'\n              - 'PshlSpy'\n              - 'PSWTool'\n              - 'PWCrack'\n              - 'PWDump'\n              - 'Rozena'\n              - 'Rusthound'\n              - 'Sbelt'\n              - 'Seatbelt'\n              - 'SecurityTool'\n              - 'SharpDump'\n              - 'SharpHound'\n              - 'Shellcode'\n              - 'Sliver'\n              - 'Snaffler'\n              - 'SOAPHound'\n              - 'Splinter'\n              - 'Swrort'\n              - 'TurtleLoader'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.021569855072463673,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule maintains nearly identical detection capabilities as the EXPECTED rule with matching signature patterns, startswith/contains operators, and comprehensive coverage of hacking tools and attack indicators; the only differences are cosmetic (formatting, comments, metadata) with no impact on detection effectiveness or false positive rates",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the commented out 'FRP.' signature pattern from the EXPECTED rule and including the more detailed reference link about AV event analysis to enhance documentation, though these are minor optimizations with minimal security impact"
      }
    },
    "overall_score": 0.7403924637681158,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a highly relevant Antivirus alert that reports ransomware.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "generated_rule": "title: Antivirus Ransomware Alert Detection\nid: 5f7b9c3e-8d4f-4a9b-9e5c-2d3f8b6e7a1d\nstatus: stable\ndescription: >\n  Detects a highly relevant Antivirus alert that reports ransomware. This event must not be ignored just because the AV has blocked the malware but investigate how it came there in the first place.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.t1486\n- ransomware\nlogsource:\n  category: antivirus\n  product: any\ndetection:\n  selection:\n    Signature|contains:\n    - BlackWorm\n    - Chaos\n    - Cobra\n    - ContiCrypt\n    - Crypter\n    - CRYPTES\n    - Cryptor\n    - CylanCrypt\n    - DelShad\n    - Destructor\n    - Filecoder\n    - GandCrab\n    - GrandCrab\n    - Haperlock\n    - Hiddentear\n    - HydraCrypt\n    - Krypt\n    - Lockbit\n    - Locker\n    - Mallox\n    - Phobos\n    - Ransom\n    - Ryuk\n    - Ryzerlo\n    - Stopcrypt\n    - Tescrypt\n    - TeslaCrypt\n    - WannaCry\n    - Xorist\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: critical",
    "expected_rule": "title: Antivirus Ransomware Detection\nid: 4c6ca276-d4d0-4a8c-9e4c-d69832f8671f\nstatus: test\ndescription: |\n    Detects a highly relevant Antivirus alert that reports ransomware.\n    This event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\nreferences:\n    - https://www.nextron-systems.com/?s=antivirus\n    - https://www.virustotal.com/gui/file/43b0f7872900bd234975a0877744554f4f355dc57505517abd1ef611e1ce6916\n    - https://www.virustotal.com/gui/file/c312c05ddbd227cbb08958876df2b69d0f7c1b09e5689eb9d93c5b357f63eff7\n    - https://www.virustotal.com/gui/file/20179093c59bca3acc6ce9a4281e8462f577ffd29fd7bf51cf2a70d106062045\n    - https://www.virustotal.com/gui/file/554db97ea82f17eba516e6a6fdb9dc04b1d25580a1eb8cb755eeb260ad0bd61d\n    - https://www.virustotal.com/gui/file/69fe77dd558e281621418980040e2af89a2547d377d0f2875502005ce22bc95c\n    - https://www.virustotal.com/gui/file/6f0f20da34396166df352bf301b3c59ef42b0bc67f52af3d541b0161c47ede05\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2022-05-12\nmodified: 2024-11-02\ntags:\n    - attack.t1486\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        Signature|contains:\n            - 'BlackWorm'\n            - 'Chaos'\n            - 'Cobra'\n            - 'ContiCrypt'\n            - 'Crypter'\n            - 'CRYPTES'\n            - 'Cryptor'\n            - 'CylanCrypt'\n            - 'DelShad'\n            - 'Destructor'\n            - 'Filecoder'\n            - 'GandCrab'\n            - 'GrandCrab'\n            - 'Haperlock'\n            - 'Hiddentear'\n            - 'HydraCrypt'\n            - 'Krypt'\n            - 'Lockbit'\n            - 'Locker'\n            - 'Mallox'\n            - 'Phobos'\n            - 'Ransom'\n            - 'Ryuk'\n            - 'Ryzerlo'\n            - 'Stopcrypt'\n            - 'Tescrypt'\n            - 'TeslaCrypt'\n            - 'WannaCry'\n            - 'Xorist'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same signature patterns, detection conditions, and level settings as the EXPECTED rule, with only minor metadata differences (status and references) that don't impact detection capability; both rules effectively detect ransomware through AV signatures with the same comprehensive list of ransomware family names and identical selection logic",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional VirusTotal references from the EXPECTED rule to provide better context for investigation and threat intelligence correlation, and align the status field to 'test' for consistency with the expected standard"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a highly relevant Antivirus alert that reports a web shell.\nIt's highly recommended to tune this rule to the specific strings used by your anti virus solution by downloading a big WebShell repository from e.g. github and checking the matches.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "generated_rule": "title: Antivirus Web Shell Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: >\n  Detects a highly relevant Antivirus alert that reports a web shell.\n  It's highly recommended to tune this rule to the specific strings used by your\n  antivirus solution by downloading a big WebShell repository from e.g. GitHub and\n  checking the matches. This event must not be ignored just because the AV has blocked\n  the malware but investigate how it came there in the first place.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\n- https://github.com/tennc/webshell\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.persistence\n- attack.t1505.003\nlogsource:\n  category: antivirus\n  product: any\ndetection:\n  selection:\n    Signature|startswith:\n    - ASP.\n    - IIS/BackDoor\n    - JAVA/Backdoor\n    - JSP.\n    - Perl.\n    - PHP.\n    - Troj/ASP\n    - Troj/JSP\n    - Troj/PHP\n    - VBS/Uxor\n    Signature|contains:\n    - ASP_\n    - 'ASP:'\n    - ASP.Agent\n    - ASP/\n    - Aspdoor\n    - ASPXSpy\n    - Backdoor.ASP\n    - Backdoor.Java\n    - Backdoor.JSP\n    - Backdoor.PHP\n    - Backdoor.VBS\n    - Backdoor/ASP\n    - Backdoor/Java\n    - Backdoor/JSP\n    - Backdoor/PHP\n    - Backdoor/VBS\n    - C99shell\n    - Chopper\n    - filebrowser\n    - JSP_\n    - 'JSP:'\n    - JSP.Agent\n    - JSP/\n    - 'Perl:'\n    - Perl/\n    - PHP_\n    - 'PHP:'\n    - PHP.Agent\n    - PHP/\n    - PHPShell\n    - PShlSpy\n    - SinoChoper\n    - Trojan.ASP\n    - Trojan.JSP\n    - Trojan.PHP\n    - Trojan.VBS\n    - VBS.Agent\n    - VBS/Agent\n    - Webshell\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: Antivirus Web Shell Detection\nid: fdf135a2-9241-4f96-a114-bb404948f736\nstatus: test\ndescription: |\n    Detects a highly relevant Antivirus alert that reports a web shell.\n    It's highly recommended to tune this rule to the specific strings used by your anti virus solution by downloading a big WebShell repository from e.g. github and checking the matches.\n    This event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\nreferences:\n    - https://www.nextron-systems.com/?s=antivirus\n    - https://github.com/tennc/webshell\n    - https://www.virustotal.com/gui/file/bd1d52289203866645e556e2766a21d2275877fbafa056a76fe0cf884b7f8819/detection\n    - https://www.virustotal.com/gui/file/308487ed28a3d9abc1fec7ebc812d4b5c07ab025037535421f64c60d3887a3e8/detection\n    - https://www.virustotal.com/gui/file/7d3cb8a8ff28f82b07f382789247329ad2d7782a72dde9867941f13266310c80/detection\n    - https://www.virustotal.com/gui/file/e841675a4b82250c75273ebf0861245f80c6a1c3d5803c2d995d9d3b18d5c4b5/detection\n    - https://www.virustotal.com/gui/file/a80042c61a0372eaa0c2c1e831adf0d13ef09feaf71d1d20b216156269045801/detection\n    - https://www.virustotal.com/gui/file/b219f7d3c26f8bad7e175934cd5eda4ddb5e3983503e94ff07d39c0666821b7e/detection\n    - https://www.virustotal.com/gui/file/b8702acf32fd651af9f809ed42d15135f842788cd98d81a8e1b154ee2a2b76a2/detection\n    - https://www.virustotal.com/gui/file/13ae8bfbc02254b389ab052aba5e1ba169b16a399d9bc4cb7414c4a73cd7dc78/detection\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2018-09-09\nmodified: 2024-11-02\ntags:\n    - attack.persistence\n    - attack.t1505.003\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n              - 'ASP.'\n              - 'IIS/BackDoor'\n              - 'JAVA/Backdoor'\n              - 'JSP.'\n              - 'Perl.'\n              - 'PHP.'\n              - 'Troj/ASP'\n              - 'Troj/JSP'\n              - 'Troj/PHP'\n              - 'VBS/Uxor' # looking for 'VBS/' would also find downloader's and droppers meant for desktops\n        - Signature|contains:\n              - 'ASP_' # looking for 'VBS_' would also find downloader's and droppers meant for desktops\n              - 'ASP:'\n              - 'ASP.Agent'\n              - 'ASP/'\n              # - 'ASP/Agent'\n              - 'Aspdoor'\n              - 'ASPXSpy'\n              - 'Backdoor.ASP'\n              - 'Backdoor.Java'\n              - 'Backdoor.JSP'\n              - 'Backdoor.PHP'\n              - 'Backdoor.VBS'\n              - 'Backdoor/ASP'\n              - 'Backdoor/Java'\n              - 'Backdoor/JSP'\n              - 'Backdoor/PHP'\n              - 'Backdoor/VBS'\n              - 'C99shell'\n              - 'Chopper'\n              - 'filebrowser'\n              - 'JSP_'\n              - 'JSP:'\n              - 'JSP.Agent'\n              - 'JSP/'\n              # - 'JSP/Agent'\n              - 'Perl:'\n              - 'Perl/'\n              - 'PHP_'\n              - 'PHP:'\n              - 'PHP.Agent'\n              - 'PHP/'\n              # - 'PHP/Agent'\n              - 'PHPShell'\n              - 'PShlSpy'\n              - 'SinoChoper'\n              - 'Trojan.ASP'\n              - 'Trojan.JSP'\n              - 'Trojan.PHP'\n              - 'Trojan.VBS'\n              - 'VBS.Agent'\n              - 'VBS/Agent'\n              - 'Webshell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.024447407613378047,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The generated rule maintains nearly identical detection capabilities with the same signature patterns, operators, and conditions as the expected rule, with only minor differences in metadata and formatting. The core detection logic for web shells across multiple languages (ASP, PHP, JSP, etc.) and variants is preserved, including both startswith and contains operators for comprehensive signature matching.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional VirusTotal references from the expected rule to improve context and investigation capabilities, and uncomment the commented signature patterns (ASP/Agent, JSP/Agent, PHP/Agent) if they don't cause excessive false positives in the environment."
      }
    },
    "overall_score": 0.7351118519033445,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects an Antivirus alert in a highly relevant file path or with a relevant file name.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a highly relevant Antivirus alert that reports an exploitation framework.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "generated_rule": "title: Antivirus Exploitation Framework Detection\nid: 12345678-9abc-def0-1234-56789abcdef0\nstatus: stable\ndescription: >\n  Detects a highly relevant Antivirus alert that reports an exploitation framework.\n  This event must not be ignored just because the AV has blocked the malware but investigate\n  how it came there in the first place.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.execution\n- attack.t1203\n- attack.command-and-control\n- attack.t1219\nlogsource:\n  category: antivirus\n  product: any\ndetection:\n  selection:\n    Signature|contains:\n    - Backdoor.Cobalt\n    - Brutel\n    - BruteR\n    - CobaltStr\n    - CobaltStrike\n    - COBEACON\n    - Cometer\n    - Exploit.Script.CVE\n    - IISExchgSpawnCMD\n    - Metasploit\n    - Meterpreter\n    - MeteTool\n    - Mpreter\n    - MsfShell\n    - PowerSploit\n    - Razy\n    - Rozena\n    - Sbelt\n    - Seatbelt\n    - Sliver\n    - Swrort\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: critical",
    "expected_rule": "title: Antivirus Exploitation Framework Detection\nid: 238527ad-3c2c-4e4f-a1f6-92fd63adb864\nstatus: stable\ndescription: |\n    Detects a highly relevant Antivirus alert that reports an exploitation framework.\n    This event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\nreferences:\n    - https://www.nextron-systems.com/?s=antivirus\n    - https://www.virustotal.com/gui/file/925b0b28472d4d79b4bf92050e38cc2b8f722691c713fc28743ac38551bc3797\n    - https://www.virustotal.com/gui/file/8f8daabe1c8ceb5710949283818e16c4aa8059bf2ce345e2f2c90b8692978424\n    - https://www.virustotal.com/gui/file/d9669f7e3eb3a9cdf6a750eeb2ba303b5ae148a43e36546896f1d1801e912466\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2018-09-09\nmodified: 2024-11-02\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.command-and-control\n    - attack.t1219\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        Signature|contains:\n            - 'Backdoor.Cobalt'\n            - 'Brutel'\n            - 'BruteR'\n            - 'CobaltStr'\n            - 'CobaltStrike'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'Exploit.Script.CVE'\n            - 'IISExchgSpawnCMD'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mpreter'\n            - 'MsfShell'\n            - 'PowerSploit'\n            - 'Razy'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'Sliver'\n            - 'Swrort'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic, signatures, conditions and MITRE ATT&CK mappings; the only differences are in metadata fields (references, author details) which don't impact detection effectiveness or FP rates; both rules use the same critical signature patterns for exploitation frameworks and maintain identical false positive controls",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the additional VirusTotal references from the EXPECTED rule to provide better context for investigations and threat intelligence correlation, though this is purely a metadata enhancement and doesn't affect detection quality"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a highly relevant Antivirus alert that reports a password dumper.\nThis event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\n",
    "generated_rule": "title: Antivirus Password Dumper Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: >\n  Detects a highly relevant Antivirus alert that reports a password dumper.\n  This event must not be ignored just because the AV has blocked the malware but investigate,\n  how it came there in the first place.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.credential-access\n- attack.t1003\n- attack.t1558\n- attack.t1003.001\n- attack.t1003.002\nlogsource:\n  category: antivirus\n  product: any\ndetection:\n  selection:\n    Signature|startswith: PWS\n    Signature|contains:\n    - Certify\n    - DCSync\n    - DumpCreds\n    - DumpLsass\n    - DumpPert\n    - HTool/WCE\n    - Kekeo\n    - Lazagne\n    - LsassDump\n    - Mimikatz\n    - MultiDump\n    - Nanodump\n    - NativeDump\n    - Outflank\n    - PShlSpy\n    - PSWTool\n    - PWCrack\n    - PWDump\n    - PWS.\n    - PWSX\n    - pypykatz\n    - Rubeus\n    - SafetyKatz\n    - SecurityTool\n    - SharpChrome\n    - SharpDPAPI\n    - SharpDump\n    - SharpKatz\n    - SharpS.\n    - ShpKatz\n    - TrickDump\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: critical",
    "expected_rule": "title: Antivirus Password Dumper Detection\nid: 78cc2dd2-7d20-4d32-93ff-057084c38b93\nstatus: stable\ndescription: |\n    Detects a highly relevant Antivirus alert that reports a password dumper.\n    This event must not be ignored just because the AV has blocked the malware but investigate, how it came there in the first place.\nreferences:\n    - https://www.nextron-systems.com/?s=antivirus\n    - https://www.virustotal.com/gui/file/5fcda49ee7f202559a6cbbb34edb65c33c9a1e0bde9fa2af06a6f11b55ded619\n    - https://www.virustotal.com/gui/file/a4edfbd42595d5bddb442c82a02cf0aaa10893c1bf79ea08b9ce576f82749448\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2018-09-09\nmodified: 2024-11-02\ntags:\n    - attack.credential-access\n    - attack.t1003\n    - attack.t1558\n    - attack.t1003.001\n    - attack.t1003.002\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith: 'PWS'\n        - Signature|contains:\n              - 'Certify'\n              - 'DCSync'\n              - 'DumpCreds'\n              - 'DumpLsass'\n              - 'DumpPert'\n              - 'HTool/WCE'\n              - 'Kekeo'\n              - 'Lazagne'\n              - 'LsassDump'\n              - 'Mimikatz'\n              - 'MultiDump'\n              - 'Nanodump'\n              - 'NativeDump'\n              - 'Outflank'\n              - 'PShlSpy'\n              - 'PSWTool'\n              - 'PWCrack'\n              - 'PWDump'\n              - 'PWS.'\n              - 'PWSX'\n              - 'pypykatz'\n              - 'Rubeus'\n              - 'SafetyKatz'\n              - 'SecurityTool'\n              - 'SharpChrome'\n              - 'SharpDPAPI'\n              - 'SharpDump'\n              - 'SharpKatz'\n              - 'SharpS.' # Sharpsploit, e.g. 530ea2ff9049f5dfdfa0a2e9c27c2e3c0685eb6cbdf85370c20a7bfae49f592d\n              - 'ShpKatz'\n              - 'TrickDump'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.013318660155444029,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same signature patterns, MITRE ATT&CK mappings, and critical detection conditions as the EXPECTED rule, including all key password dumper tool signatures and detection operators; the only meaningful differences are in metadata (references, author) which don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional VirusTotal references from the EXPECTED rule to provide better context for analysts, but no changes needed for core detection logic as it matches the expected capabilities perfectly"
      }
    },
    "overall_score": 0.732329665038861,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs",
    "generated_rule": "title: Exploit Framework User Agent Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: Detects suspicious user agent strings used by exploit or pentest frameworks like Metasploit in proxy logs.\nreferences:\n- https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.command-and-control\n- attack.t1071.001\nlogsource:\n  category: proxy\n  product: webproxy\ndetection:\n  selection:\n    c-useragent|contains:\n    - Metasploit\n    - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n    - '*exploit*'\n    - '*pentest*'\n    - '*framework*'\n  condition: selection\nfields:\n- ClientIP\n- c-uri\n- c-useragent\nfalsepositives:\n- Legitimate software testing or security assessments\nlevel: high",
    "expected_rule": "title: Exploit Framework User Agent\nid: fdd1bfb5-f60b-4a35-910e-f36ed3d0b32f\nstatus: test\ndescription: Detects suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs\nreferences:\n    - https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-07-08\nmodified: 2025-01-18\ntags:\n    - attack.command-and-control\n    - attack.t1071.001\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # Cobalt Strike https://www.cobaltstrike.com/help-malleable-c2\n            - 'Internet Explorer *'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)' # https://bluescreenofjeff.com/2016-06-28-cobalt-strike-http-c2-redirectors-with-apache-mod_rewrite/\n\n        # Metasploit Framework - Analysis by Didier Stevens https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\n            - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N'\n            - 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' # only use in proxy logs - not for detection in web server logs\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/525.13'\n            - 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; MAAU)' # Payloads\n\n        # Metasploit Update by Florian Roth 08.07.2017\n            - 'Mozilla/5.0'\n            - 'Mozilla/4.0 (compatible; SPIPE/1.0'\n        # - 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'  # too many false positives expected\n        # - 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'  # too many false positives expected\n            - 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/35.0'\n            - 'Sametime Community Agent' # Unknown if prone to false positives - https://github.com/rapid7/metasploit-framework/blob/97095ab3113de2f046e64a64c461a1f888554401/modules/exploits/windows/http/steamcast_useragent.rb\n            - 'X-FORWARDED-FOR'\n            - 'DotDotPwn v2.1'\n            - 'SIPDROID'\n            - 'Mozilla/5.0 (Windows NT 10.0; Win32; x32; rv:60.0)' # CobaltStrike https://unit42.paloaltonetworks.com/tracking-oceanlotus-new-downloader-kerrdown/\n\n        # Empire\n            - 'Mozilla/6.0 (X11; Linux x86_64; rv:24.0) Gecko/20140205     Firefox/27.0 Iceweasel/25.3.0'\n\n        # Exploits\n            - '*wordpress hash grabber*'\n            - '*exploit*'\n\n        # Havoc\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'  # https://github.com/HavocFramework/Havoc/issues/519\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.4380910420562988,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.41,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule, missing critical user agents for Cobalt Strike, Empire, specific Metasploit variants, and Havoc framework detection. The generic wildcards '*exploit*', '*pentest*', and '*framework*' are too broad and would generate excessive noise while potentially missing sophisticated attacks using specific user agents.",
        "criteria_scores": {
          "detection_effectiveness": 0.3,
          "false_positive_control": 0.65
        },
        "improvement_synopsis": "Add specific user agent strings for Cobalt Strike, Empire, and Havoc frameworks; include detailed Metasploit variants; remove overly broad wildcards; add version-specific browser patterns; consider adding comment documentation for each detection pattern."
      }
    },
    "overall_score": 0.6825227605140747,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a python process calling to the PTY module in order to spawn a pretty tty which could be indicative of potential reverse shell activity.\n",
    "generated_rule": "title: Python Process Using PTY Module for TTY Spawn\nid: 7f3b9c2e-8f4d-4b9e-9c3e-2f5a6b7c8d9e\nstatus: stable\ndescription: Detects a python process calling the PTY module to spawn a pretty TTY, which could indicate potential reverse shell activity.\nreferences:\n- https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence/\nauthor: Cybersecurity Analyst\ndate: 2023-11-04\ntags:\n- attack.execution\n- attack.t1059\nlogsource:\n  category: process_creation\n  product: linux\ndetection:\n  selection_img:\n    Image|endswith:\n    - /python\n    - /python2\n    - /python3\n  selection_cli:\n    CommandLine|contains|all:\n    - import pty\n    - .spawn(\n  condition: selection_img and selection_cli\nfalsepositives:\n- Legitimate use of PTY module in scripts\nlevel: medium",
    "expected_rule": "title: Python Spawning Pretty TTY Via PTY Module\nid: c4042d54-110d-45dd-a0e1-05c47822c937\nrelated:\n    - id: 32e62bc7-3de0-4bb1-90af-532978fe42c0\n      type: similar\nstatus: test\ndescription: |\n    Detects a python process calling to the PTY module in order to spawn a pretty tty which could be indicative of potential reverse shell activity.\nreferences:\n    - https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence/\nauthor: Nextron Systems\ndate: 2022-06-03\nmodified: 2024-11-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '/python'\n              - '/python2'\n              - '/python3'\n        - Image|contains:\n              - '/python2.'  # python image is always of the form ../python3.10; ../python is just a symlink\n              - '/python3.'\n    selection_cli_import:\n        CommandLine|contains:\n            - 'import pty'\n            - 'from pty '\n    selection_cli_spawn:\n        CommandLine|contains: 'spawn'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.15541749756035472,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule has good core detection logic but lacks the more comprehensive Image matching using '/python2.' and '/python3.' patterns, and misses the 'from pty' import variant. The condition logic is also less robust, using simple 'and' instead of 'all of selection_*' which could impact detection reliability. The command line detection is more rigid requiring both components in single line versus separate matches.",
        "criteria_scores": {
          "detection_effectiveness": 0.7,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Add support for '/python2.' and '/python3.' Image patterns, include 'from pty' import variant, separate command line components for better detection flexibility, and implement more precise 'all of selection_*' condition logic to match EXPECTED rule capabilities."
      }
    },
    "overall_score": 0.7138543743900886,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of python with calls to the socket and pty module in order to connect and spawn a potential reverse shell.\n",
    "generated_rule": "title: Python Reverse Shell Execution Detection\nid: 7f3b9c2e-5d4a-4f8b-9a3e-1a2f3b4c5d6e\nstatus: stable\ndescription: Detects the execution of python with calls to the socket and pty module in order to connect and spawn a potential reverse shell.\nreferences:\n- https://www.revshells.com/\nauthor: Cybersecurity Analyst\ndate: 2023-11-04\ntags:\n- attack.execution\n- attack.t1059\nlogsource:\n  category: process_creation\n  product: linux\ndetection:\n  selection:\n    Image|endswith:\n    - /python\n    - /python2\n    - /python3\n    CommandLine|contains|all:\n    - ' -c '\n    - import\n    - pty\n    - socket\n    - spawn\n    - .connect\n  condition: selection\nfalsepositives:\n- Legitimate use of python scripts that require socket and pty modules\nlevel: high",
    "expected_rule": "title: Python Reverse Shell Execution Via PTY And Socket Modules\nid: 32e62bc7-3de0-4bb1-90af-532978fe42c0\nrelated:\n    - id: c4042d54-110d-45dd-a0e1-05c47822c937\n      type: similar\nstatus: test\ndescription: |\n    Detects the execution of python with calls to the socket and pty module in order to connect and spawn a potential reverse shell.\nreferences:\n    - https://www.revshells.com/\nauthor: '@d4ns4n_, Nasreddine Bencherchali (Nextron Systems)'\ndate: 2023-04-24\nmodified: 2024-11-04\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'python'\n        CommandLine|contains|all:\n            - ' -c '\n            - 'import'\n            - 'pty'\n            - 'socket'\n            - 'spawn'\n            - '.connect'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.10372982278105625,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic including all critical components (python execution, -c flag, import, pty, socket, spawn, .connect); the Image field handling in GENERATED rule is actually more comprehensive by explicitly including python2/python3 variants while maintaining the same command line parameter detection, and the false positive documentation is more specific and helpful",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding 'related' field for cross-reference to similar rules and potentially expand references section, but core detection logic is robust and well-implemented"
      }
    },
    "overall_score": 0.754932455695264,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of the \"rsync\" utility to execute a shell. Such behavior may be associated with privilege escalation, unauthorized command execution, or to break out from restricted environments.\n",
    "generated_rule": "title: Suspicious Rsync Shell Execution\nid: 3b9f6c2e-8d4b-4f3a-9b2e-5f6e7c8d9f0a\nstatus: test\ndescription: Detects the use of the \"rsync\" utility to execute a shell, which may indicate privilege escalation, unauthorized command execution, or attempts to break out from restricted environments.\nreferences:\n- https://www.rsync.net/resources/howto/shell.html\nauthor: Your Name\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.execution\n- attack.privilege-escalation\n- attack.t1059\nlogsource:\n  product: linux\n  category: process_creation\ndetection:\n  selection:\n    CommandLine|contains:\n    - 'rsync -e'\n    - 'rsync --rsh='\n    - 'rsync -e \"sh\"'\n    - 'rsync -e \"bash\"'\n    - 'rsync -e \"ksh\"'\n    - 'rsync -e \"zsh\"'\n  condition: selection\nfalsepositives:\n- Legitimate use of rsync with shell execution for administrative tasks.\nlevel: high",
    "expected_rule": "title: Shell Execution via Rsync - Linux\nid: e2326866-609f-4015-aea9-7ec634e8aa04\nstatus: experimental\ndescription: |\n    Detects the use of the \"rsync\" utility to execute a shell. Such behavior may be associated with privilege escalation, unauthorized command execution, or to break out from restricted environments.\nreferences:\n    - https://gtfobins.github.io/gtfobins/rsync/#shell\nauthor: Li Ling, Andy Parkidomo, Robert Rakowski, Blake Hartstein (Bloomberg L.P.), Florian Roth\ndate: 2024-09-02\nmodified: 2025-01-18\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/rsync'\n            - '/rsyncd'\n        CommandLine|contains: ' -e '\n    selection_cli:\n        CommandLine|contains:\n            - '/ash '\n            - '/bash '\n            - '/dash '\n            - '/csh '\n            - '/sh '\n            - '/zsh '\n            - '/tcsh '\n            - '/ksh '\n            - \"'ash \"\n            - \"'bash \"\n            - \"'dash \"\n            - \"'csh \"\n            - \"'sh \"\n            - \"'zsh \"\n            - \"'tcsh \"\n            - \"'ksh \"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate cases in which \"rsync\" is used to execute a shell\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.35367315864958826,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule: it lacks Image path verification, uses less comprehensive shell detection patterns, and doesn't implement the more robust 'all of selection_*' condition structure which could lead to higher false positives and potential evasion through command variations; while it catches basic rsync shell execution patterns, it misses quoted variations and alternative shell types like 'dash' and 'tcsh'",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add Image path verification, expand shell detection patterns to include all variants (ash, dash, tcsh) with both quoted and unquoted forms, implement 'all of selection_*' condition structure for better precision, and consider adding detection for rsyncd binary"
      }
    },
    "overall_score": 0.7334182896623971,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of a shell as sub process of \"rsync\" without the expected command line flag \"-e\" being used, which could be an indication of exploitation as described in CVE-2024-12084. This behavior is commonly associated with attempts to execute arbitrary commands or escalate privileges, potentially leading to unauthorized access or further exploitation.\n",
    "generated_rule": "title: Suspicious Rsync Shell Execution Without -e Flag\nid: 3b9f6c2d-8f4b-4a2b-9f3e-2c9f5e6d7a8b\nstatus: experimental\ndescription: Detects the execution of a shell as a subprocess of \"rsync\" without the expected command line flag \"-e\" being used, which could indicate exploitation attempts as described in CVE-2024-12084.\nreferences:\n- https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12084\nauthor: Your Name\ndate: 2024-10-15\ntags:\n- attack.execution\n- cve.2024-12084\nlogsource:\n  category: process_creation\n  product: linux\ndetection:\n  selection:\n    ParentImage|endswith: /rsync\n    CommandLine|contains:\n    - 'sh'\n    - 'bash'\n    - 'csh'\n    - 'ksh'\n    - 'zsh'\n    - 'tcsh'\n    - 'ash'\n    - 'bsh'\n    - 'pdksh'\n  condition: selection and not CommandLine|contains: '-e'\nfalsepositives:\n- Legitimate rsync operations that do not require the use of the \"-e\" flag\nlevel: high\nsource_file: ./sigma_all_rules/rules/linux/process_creation/proc_creation_lnx_rsync_shell_without_e_flag.yml",
    "expected_rule": "title: Suspicious Invocation of Shell via Rsync\nid: 297241f3-8108-4b3a-8c15-2dda9f844594\nstatus: experimental\ndescription: |\n    Detects the execution of a shell as sub process of \"rsync\" without the expected command line flag \"-e\" being used, which could be an indication of exploitation as described in CVE-2024-12084. This behavior is commonly associated with attempts to execute arbitrary commands or escalate privileges, potentially leading to unauthorized access or further exploitation.\nreferences:\n    - https://sysdig.com/blog/detecting-and-mitigating-cve-2024-12084-rsync-remote-code-execution/\n    - https://gist.github.com/Neo23x0/a20436375a1e26524931dd8ea1a3af10\nauthor: Florian Roth\ndate: 2025-01-18\ntags:\n    - attack.execution\n    - attack.t1059\n    - attack.t1203\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '/rsync'\n            - '/rsyncd'\n        Image|endswith:\n            - '/ash'\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/ksh'\n            - '/sh'\n            - '/tcsh'\n            - '/zsh'\n    filter_main_expected:\n        CommandLine|contains: ' -e '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 0.0,
      "has_required_fields": 0.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 0.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule has good core detection logic but lacks several important elements present in the EXPECTED rule: it doesn't include 'rsyncd' in parent processes, misses 'dash' shell variant, uses CommandLine|contains for shell detection instead of more precise Image|endswith matching, and has a simpler filter condition that could be bypassed by adding spaces around '-e'",
        "criteria_scores": {
          "detection_effectiveness": 0.7,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Add 'rsyncd' to parent process detection, include 'dash' shell, switch to Image|endswith for shell detection, improve '-e' flag filtering logic to handle spacing variations, and consider adding MITRE ATT&CK technique tags T1059 and T1203 for better threat context"
      }
    },
    "overall_score": 0.22499999999999998,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the addition of a new user to a privileged group such as \"root\" or \"sudo\"",
    "generated_rule": "title: New User Added to Privileged Group\nid: 1b2c3d4e-5f6a-7b8c-9d0e-1f2a3b4c5d6e\nstatus: stable\ndescription: Detects the addition of a new user to a privileged group such as \"root\" or \"sudo\" on Linux systems.\nreferences:\n- https://linux.die.net/man/8/usermod\n- https://www.cyberciti.biz/faq/howto-linux-add-user-to-group/\nauthor: Cybersecurity Analyst\ndate: 2023-10-10\ntags:\n- attack.persistence\n- attack.t1136.001\n- attack.privilege-escalation\nlogsource:\n  product: linux\n  category: process_creation\ndetection:\n  selection_usermod:\n    Image|endswith: /usermod\n    CommandLine|contains:\n    - '-aG root'\n    - '-aG sudo'\n  selection_groupadd:\n    Image|endswith: /groupadd\n    CommandLine|contains:\n    - 'root'\n    - 'sudo'\n  condition: 1 of selection_*\nfalsepositives:\n- Legitimate administrative activities\nlevel: high",
    "expected_rule": "title: Privileged User Has Been Created\nid: 0ac15ec3-d24f-4246-aa2a-3077bb1cf90e\nstatus: test\ndescription: Detects the addition of a new user to a privileged group such as \"root\" or \"sudo\"\nreferences:\n    - https://digital.nhs.uk/cyber-alerts/2018/cc-2825\n    - https://linux.die.net/man/8/useradd\n    - https://github.com/redcanaryco/atomic-red-team/blob/25acadc0b43a07125a8a5b599b28bbc1a91ffb06/atomics/T1136.001/T1136.001.md#atomic-test-5---create-a-new-user-in-linux-with-root-uid-and-gid\nauthor: Pawel Mazur\ndate: 2022-12-21\nmodified: 2025-01-21\ntags:\n    - attack.persistence\n    - attack.t1136.001\n    - attack.t1098\nlogsource:\n    product: linux\n    definition: '/var/log/secure on REHL systems or /var/log/auth.log on debian like Systems needs to be collected in order for this detection to work'\ndetection:\n    # Example of the events that could be observed when matching these would be as follow\n    #   Dec 21 16:42:19 testserver useradd[1337]: new user: name=butter1, UID=1000, GID=0, home=/root, shell=/bin/bash\n    #   Dec 21 17:13:54 testserver useradd[1337]: new user: name=john, UID=0, GID=0, home=/home/john, shell=/bin/bash\n    #   Dec 21 17:24:40 testserver useradd[1337]: new user: name=butter3, UID=1000, GID=10, home=/home/butter3, shell=/bin/bash\n    #   Dec 21 17:30:22 testserver useradd[1337]: new user: name=butter4, UID=1000, GID=27, home=/home/butter4, shell=/bin/bash\n    selection_new_user:\n        - 'new user'\n    selection_uids_gids:\n        - 'GID=0,' # root group\n        - 'UID=0,' # root UID\n        - 'GID=10,' # wheel group\n        - 'GID=27,' # sudo group\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.36685874822654074,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.55,
        "reasoning": "The GENERATED rule focuses on command-line monitoring of usermod/groupadd while the EXPECTED rule monitors actual user creation events in auth logs, with the EXPECTED approach being more reliable as it captures the actual system changes rather than just commands; the GENERATED rule could miss direct modifications to /etc/passwd or /etc/group and could be bypassed by command obfuscation, while also lacking detection of specific UIDs/GIDs that indicate privileged access",
        "criteria_scores": {
          "detection_effectiveness": 0.4,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Modify rule to monitor auth logs instead of command-line execution, add specific UID/GID checks for privileged groups (0, 10, 27), and include detection for direct file modifications to critical system files like /etc/passwd and /etc/group"
      }
    },
    "overall_score": 0.7067146870566352,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects when an app is assigned Azure AD roles, such as global administrator, or Azure RBAC roles, such as subscription owner.",
    "generated_rule": "title: App Assigned to Azure AD or RBAC Role\nid: 12345678-9abc-def0-1234-56789abcdef0\nstatus: stable\ndescription: Detects when an application is assigned Azure AD roles, such as global administrator, or Azure RBAC roles, such as subscription owner.\nreferences:\n- https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference\nauthor: Your Name\ndate: 2023-10-10\nmodified: 2023-10-10\ntags:\n- attack.persistence\n- attack.privilege-escalation\n- attack.t1098.003\nlogsource:\n  product: azure\n  service: auditlogs\ndetection:\n  selection:\n    targetResources.type: Service Principal\n    properties.message:\n    - Add member to role\n    - Add eligible member to role\n    - Add scoped member to role\n  condition: selection\nfalsepositives:\n- Legitimate role assignments for application management purposes\nlevel: medium",
    "expected_rule": "title: App Assigned To Azure RBAC/Microsoft Entra Role\nid: b04934b2-0a68-4845-8a19-bdfed3a68a7a\nstatus: test\ndescription: Detects when an app is assigned Azure AD roles, such as global administrator, or Azure RBAC roles, such as subscription owner.\nreferences:\n    - https://learn.microsoft.com/en-us/entra/architecture/security-operations-applications#service-principal-assigned-to-a-role\nauthor: Bailey Bercik '@baileybercik', Mark Morowczynski '@markmorow'\ndate: 2022-07-19\nmodified: 2024-11-04\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.t1098.003\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        targetResources.type: 'Service Principal'\n        properties.message:\n            - Add member to role\n            - Add eligible member to role\n            - Add scoped member to role\n    condition: selection\nfalsepositives:\n    - When the permission is legitimately needed for the app\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic including targetResources.type, properties.message values, and condition structure; the only meaningful differences are in metadata fields (title formatting, references, authors) which don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider updating the reference URL to the newer Microsoft Entra documentation and expanding the false positive description to be more specific about legitimate application permission scenarios, but core detection logic requires no changes"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a successful login to the Microsoft Intune Company Portal which could allow bypassing Conditional Access Policies and InTune device trust using a tool like TokenSmith.\n",
    "generated_rule": "title: Successful Login to Microsoft Intune Company Portal\nid: 3b9f1c2e-4d3b-4f8b-9a2e-1c2d3e4f5g6h\nstatus: test\ndescription: Detects a successful login to the Microsoft Intune Company Portal which could allow bypassing Conditional Access Policies and Intune device trust using a tool like TokenSmith.\nreferences:\n- https://learn.microsoft.com/en-us/mem/intune/user-help/sign-in-to-the-company-portal\nauthor: YourName\ndate: 2023-10-10\ntags:\n- attack.initial-access\n- attack.t1078\n- attack.t1550\nlogsource:\n  product: azure\n  service: signinlogs\ndetection:\n  selection:\n    Status: Success\n    AppId: '0000000a-0000-0000-c000-000000000000'  # Replace with actual Intune Company Portal AppId\n    AuthenticationRequirement: singleFactorAuthentication\n  condition: selection\nfalsepositives:\n- Legitimate user access to the Intune Company Portal\nlevel: medium",
    "expected_rule": "title: Azure Login Bypassing Conditional Access Policies\nid: 13f2d3f5-6497-44a7-bf5f-dc13ffafe5dc\nstatus: experimental\ndescription: |\n    Detects a successful login to the Microsoft Intune Company Portal which could allow bypassing Conditional Access Policies and InTune device trust using a tool like TokenSmith.\nauthor: Josh Nickels, Marius Rothenb\u00fccher\nreferences:\n    - https://labs.jumpsec.com/tokensmith-bypassing-intune-compliant-device-conditional-access/\n    - https://github.com/JumpsecLabs/TokenSmith\ndate: 2025-01-08\ntags:\n    - attack.defense-evasion\n    - attack.t1078\nlogsource:\n    service: audit\n    product: m365\ndetection:\n    selection:\n        Operation: 'UserLoggedIn'\n        ApplicationId: '9ba1a5c7-f17a-4de9-a1f1-6178c8d51223'\n        ResultStatus: 'Success'\n        RequestType: 'Cmsi:Cmsi'\n    filter_main_bjectid:\n        ObjectId: '0000000a-0000-0000-c000-000000000000' # Microsoft Intune seen when mobile devices are enrolled\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3182831812020197,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.45,
        "reasoning": "The GENERATED rule has significant detection gaps: uses incorrect AppId, lacks specific RequestType filtering, misses critical ObjectId filtering, uses different log sources (azure/signinlogs vs m365/audit), and uses overly simplistic authentication requirement check that could be bypassed. The attack technique specifically targets Intune device trust bypass which requires more precise detection logic.",
        "criteria_scores": {
          "detection_effectiveness": 0.4,
          "false_positive_control": 0.55
        },
        "improvement_synopsis": "Update to correct AppId (9ba1a5c7-f17a-4de9-a1f1-6178c8d51223), add RequestType='Cmsi:Cmsi' filter, implement proper ObjectId filtering, switch to m365 audit logs, remove generic authentication requirement check, and raise severity to high given the attack impact."
      }
    },
    "overall_score": 0.6645707953005049,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the import of SSH key pairs into AWS EC2, which may indicate an attacker attempting to gain unauthorized access to instances. This activity could lead to initial access, persistence, or privilege escalation, potentially compromising sensitive data and operations.\n",
    "generated_rule": "title: AWS EC2 SSH Key Pair Import Detection\nid: 3b7f9c2e-4d3a-4f8b-9a2e-1c2f4e5d6a7b\nstatus: test\ndescription: Detects the import of SSH key pairs into AWS EC2, which may indicate an attacker attempting to gain unauthorized access to instances. This activity could lead to initial access, persistence, or privilege escalation, potentially compromising sensitive data and operations.\nreferences:\n- https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.initial-access\n- attack.persistence\n- attack.privilege-escalation\n- attack.t1078\nlogsource:\n  product: aws\n  service: cloudtrail\ndetection:\n  selection:\n    eventSource: ec2.amazonaws.com\n    eventName: ImportKeyPair\n  condition: selection\nfields:\n- userIdentity.arn\n- requestParameters.keyName\n- requestParameters.keyFingerprint\n- sourceIPAddress\nfalsepositives:\n- Legitimate import of SSH key pairs by authorized users\nlevel: medium\nsource_file: ./sigma_all_rules/rules/cloud/aws/cloudtrail/aws_ec2_ssh_key_pair_import.yml",
    "expected_rule": "title: AWS Key Pair Import Activity\nid: 92f84194-8d9a-4ee0-8699-c30bfac59780\nstatus: experimental\ndescription: |\n    Detects the import of SSH key pairs into AWS EC2, which may indicate an attacker attempting to gain unauthorized access to instances. This activity could lead to initial access, persistence, or privilege escalation, potentially compromising sensitive data and operations.\nreferences:\n    - https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\nauthor: Ivan Saakov\ndate: 2024-12-19\ntags:\n    - attack.initial-access\n    - attack.t1078\n    - attack.persistence\n    - attack.privilege-escalation\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName: 'ImportKeyPair'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative actions by authorized users importing keys for valid purposes.\n    - Automated processes for infrastructure setup may trigger this alert.\n    - Verify the user identity, user agent, and source IP address to ensure they are expected.\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule, with matching core detection logic (eventSource and eventName), relevant MITRE ATT&CK tags, and comprehensive field logging that includes critical elements like userIdentity.arn, requestParameters, and sourceIPAddress which are essential for investigation but not explicitly listed in the EXPECTED rule",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider expanding the falsepositives section to include more detailed scenarios and verification steps as seen in the EXPECTED rule, though the current implementation is already highly effective for production use"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the deletion of an AWS SAML provider, potentially indicating malicious intent to disrupt administrative or security team access.\nAn attacker can remove the SAML provider for the information security team or a team of system administrators, to make it difficult for them to work and investigate at the time of the attack and after it.\n",
    "generated_rule": "title: AWS SAML Provider Deletion\nid: 9b2f3c4d-8e2a-4f3b-9c3d-2f4e5d6a7b8c\nstatus: test\ndescription: Detects the deletion of an AWS SAML provider, potentially indicating malicious intent to disrupt administrative or security team access.\nreferences:\n- https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteSAMLProvider.html\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.t1070\n- attack.persistence\nlogsource:\n  product: aws\n  service: cloudtrail\ndetection:\n  selection:\n    eventSource: iam.amazonaws.com\n    eventName: DeleteSAMLProvider\n  condition: selection\nfalsepositives:\n- Legitimate removal of a SAML provider by authorized personnel\nlevel: high",
    "expected_rule": "title: AWS SAML Provider Deletion Activity\nid: ccd6a6c8-bb4e-4a91-9d2a-07e632819374\nstatus: experimental\ndescription: |\n    Detects the deletion of an AWS SAML provider, potentially indicating malicious intent to disrupt administrative or security team access.\n    An attacker can remove the SAML provider for the information security team or a team of system administrators, to make it difficult for them to work and investigate at the time of the attack and after it.\nreferences:\n    - https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteSAMLProvider.html\nauthor: Ivan Saakov\ndate: 2024-12-19\ntags:\n    - attack.t1078.004\n    - attack.privilege-escalation\n    - attack.t1531\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'iam.amazonaws.com'\n        eventName: 'DeleteSAMLProvider'\n        status: 'success'\n    condition: selection\nfalsepositives:\n    - Automated processes using tools like Terraform may trigger this alert.\n    - Legitimate administrative actions by authorized system administrators could cause this alert. Verify the user identity, user agent, and hostname to ensure they are expected.\n    - Deletions by unfamiliar users should be investigated. If the behavior is known and expected, it can be exempted from the rule.\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.054793233082706894,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.83,
        "reasoning": "The GENERATED rule captures the core detection logic for DeleteSAMLProvider events correctly but lacks the explicit 'status: success' filter and has less comprehensive MITRE ATT&CK mapping; detection fundamentals are solid with identical eventSource/eventName matching, though missing success status could slightly impact precision; the high severity level vs expected medium suggests potential over-escalation given the context",
        "criteria_scores": {
          "detection_effectiveness": 0.85,
          "false_positive_control": 0.78
        },
        "improvement_synopsis": "Add 'status: success' condition to improve precision, adjust severity to medium to align with real-world impact, expand false positive documentation to include specific legitimate scenarios, and update MITRE ATT&CK tags to include t1078.004 and t1531 for better TTP coverage"
      }
    },
    "overall_score": 0.7126983082706767,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects when a user creates a Lambda function URL configuration, which could be used to expose the function to the internet and potentially allow unauthorized access to the function's IAM role for AWS API calls.\nThis could give an adversary access to the privileges associated with the Lambda service role that is attached to that function.\n",
    "generated_rule": "title: AWS Lambda Function URL Configuration Creation\nid: 3c9f8b2e-4d5b-4f8b-9a2e-1f2d3c4b5e6f\nstatus: test\ndescription: Detects when a user creates a Lambda function URL configuration, which could expose the function to the internet and potentially allow unauthorized access to the function's IAM role for AWS API calls.\nreferences:\n- https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.persistence\n- attack.privilege-escalation\nlogsource:\n  product: aws\n  service: cloudtrail\ndetection:\n  selection:\n    eventSource: lambda.amazonaws.com\n    eventName: CreateFunctionUrlConfig\n  condition: selection\nfalsepositives:\n- Legitimate creation of Lambda function URL configurations by authorized users\n- Known administrative actions for function exposure\nlevel: medium\nfields:\n- userIdentity.arn\n- requestParameters.functionName\n- requestParameters.authType\nsource_file: ./sigma_all_rules/rules/cloud/aws/cloudtrail/aws_lambda_function_url_configuration_creation.yml",
    "expected_rule": "title: New AWS Lambda Function URL Configuration Created\nid: ec541962-c05a-4420-b9ea-84de072d18f4\nstatus: experimental\ndescription: |\n    Detects when a user creates a Lambda function URL configuration, which could be used to expose the function to the internet and potentially allow unauthorized access to the function's IAM role for AWS API calls.\n    This could give an adversary access to the privileges associated with the Lambda service role that is attached to that function.\nreferences:\n    - https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunctionUrlConfig.html\n    - https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-privilege-escalation/aws-lambda-privesc\n    - https://www.wiz.io/blog/how-to-set-secure-defaults-on-aws\nauthor: Ivan Saakov\ndate: 2024-12-19\ntags:\n    - attack.initial-access\n    - attack.privilege-escalation\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: lambda.amazonaws.com\n        eventName: 'CreateFunctionUrlConfig'\n    condition: selection\nfalsepositives:\n    - Creating a Lambda function URL configuration may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Creating a Lambda function URL configuration from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule matches the EXPECTED rule's core detection logic perfectly with identical eventSource and eventName fields, while maintaining equivalent security effectiveness for detecting Lambda URL configuration creation; both rules appropriately capture the key CloudTrail event and include relevant MITRE ATT&CK tags for privilege escalation, though the GENERATED rule adds persistence which is relevant for this scenario; the detection logic is equally effective in both versions",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding more detailed context in the falsepositives section similar to the EXPECTED rule to help analysts better evaluate legitimate vs suspicious cases, and include additional reference links for threat context and AWS Lambda privilege escalation techniques"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects modifications to an RDS cluster or its deletion, which may indicate potential data exfiltration attempts, unauthorized access, or exposure of sensitive information.",
    "generated_rule": "title: AWS RDS Cluster Modification or Deletion\nid: 9b7f3cde-8f4a-4b9e-9c3d-2f5b8e7a9d3f\nstatus: test\ndescription: Detects modifications to an RDS cluster or its deletion, which may indicate potential data exfiltration attempts, unauthorized access, or exposure of sensitive information.\nreferences:\n- https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html\nauthor: Your Name\ndate: 2023-10-10\nmodified: 2023-10-10\ntags:\n- attack.exfiltration\n- attack.t1537\n- attack.t1020\nlogsource:\n  product: aws\n  service: cloudtrail\ndetection:\n  selection_modify:\n    eventSource: rds.amazonaws.com\n    eventName:\n      - ModifyDBCluster\n      - ModifyDBClusterParameterGroup\n  selection_delete:\n    eventSource: rds.amazonaws.com\n    eventName: DeleteDBCluster\n  condition: selection_modify or selection_delete\nfalsepositives:\n- Authorized changes to RDS clusters\nlevel: high\nsource_file: ./sigma_all_rules/rules/cloud/aws/cloudtrail/aws_rds_cluster_modification_or_deletion.yml",
    "expected_rule": "title: Modification or Deletion of an AWS RDS Cluster\nid: 457cc9ac-d8e6-4d1d-8c0e-251d0f11a74c\nstatus: experimental\ndescription: Detects modifications to an RDS cluster or its deletion, which may indicate potential data exfiltration attempts, unauthorized access, or exposure of sensitive information.\nreferences:\n    - https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_ModifyDBCluster.html\n    - https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBCluster.html\n    - https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-privilege-escalation/aws-rds-privesc#rds-modifydbinstance\nauthor: Ivan Saakov\ndate: 2024-12-06\ntags:\n    - attack.exfiltration\n    - attack.t1020\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: rds.amazonaws.com\n        eventName:\n            - ModifyDBCluster\n            - DeleteDBCluster\n    condition: selection\nfalsepositives:\n    - Verify if the modification or deletion was performed by an authorized administrator.\n    - Confirm if the modification or deletion was part of a planned change or maintenance activity.\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.31779563719862225,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule provides slightly broader detection coverage by including ModifyDBClusterParameterGroup and has more detailed references, while maintaining equivalent core detection capabilities for cluster modifications and deletions. Both rules effectively capture the primary attack vectors through eventSource and critical eventNames.",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Consider adding error handling conditions and more specific attribute filters (like errorCode, responseElements) to reduce false positives while maintaining the broader detection scope, and align false positive descriptions with the EXPECTED rule's more detailed format."
      }
    },
    "overall_score": 0.7844489092996555,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
    "generated_rule": "title: Suspicious File Creation in Public Folder\nid: 9f8b7c2d-4e3a-4b9a-9f1b-2d3e4f5a6b7c\nstatus: test\ndescription: Detects the creation of files with suspicious extensions in the public folder, which could indicate potential malicious activity.\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.execution\nlogsource:\n  category: file_event\n  product: windows\ndetection:\n  selection:\n    TargetFilename|startswith: C:\\Users\\Public\\\n    TargetFilename|endswith:\n    - .bat\n    - .cmd\n    - .cpl\n    - .dll\n    - .exe\n    - .hta\n    - .iso\n    - .lnk\n    - .msi\n    - .ps1\n    - .psm1\n    - .scr\n    - .vbe\n    - .vbs\n    - .zip\n    - .7z\n    - .bin\n    - .chm\n    - .py\n    - .sys\n  condition: selection\nfalsepositives:\n- Legitimate software installations or updates\nlevel: medium\nsource_file: ./sigma_all_rules/rules/windows/file/file_event/file_event_win_public_folder_susp_files.yml",
    "expected_rule": "title: Suspicious Binaries and Scripts in Public Folder\nid: b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e\nstatus: experimental\ndescription: Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.\nreferences:\n    - https://intel.thedfirreport.com/events/view/30032 # Private Report\n    - https://intel.thedfirreport.com/eventReports/view/70 # Private Report\n    - https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/\nauthor: 'The DFIR Report'\ndate: 2025-01-23\ntags:\n    - attack.execution\n    - attack.t1204\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: ':\\Users\\Public\\'\n        TargetFilename|endswith:\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.js'\n            - '.ps1'\n            - '.vbe'\n            - '.vbs'\n    condition: selection\nfalsepositives:\n    - Administrators deploying legitimate binaries to public folders.\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.14741725652757676,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule provides broader detection coverage with additional file extensions (.iso, .zip, .7z, .bin, .chm, .py, .sys) and uses startswith instead of contains for path matching which is more precise, though it lacks the specific MITRE technique ID (T1204) and valuable threat intel references; both rules effectively monitor Public folder for suspicious files but GENERATED includes more potentially malicious file types while maintaining similar core detection logic",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add specific MITRE technique IDs, include threat intelligence references, consider adjusting severity to 'high' like the EXPECTED rule, and potentially reduce the file extension list to focus on highest-risk file types to better balance detection coverage with false positive rates"
      }
    },
    "overall_score": 0.7418543141318942,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the creation of a file named \"WerFault.exe\" or \"wer.dll\" in an uncommon folder, which could be a sign of WerFault DLL hijacking.",
    "generated_rule": "title: Creation of WerFault.exe/Wer.dll in Unusual Folder\nid: 28a452f3-786c-4fd8-b8f2-bddbe9d616d1\nstatus: test\ndescription: Detects the creation of a file named \"WerFault.exe\" or \"wer.dll\" in an uncommon folder, which could be a sign of WerFault DLL hijacking.\nreferences:\n- https://www.bleepingcomputer.com/news/security/hackers-are-now-hiding-malware-in-windows-event-logs/\nauthor: frack113\ndate: 2022-05-09\nmodified: 2024-11-28\ntags:\n- attack.persistence\n- attack.defense-evasion\n- attack.t1574.001\nlogsource:\n  product: windows\n  category: file_event\ndetection:\n  selection:\n    TargetFilename|endswith:\n    - \\WerFault.exe\n    - \\wer.dll\n  filter_main_known_locations:\n    TargetFilename|startswith:\n    - C:\\Windows\\SoftwareDistribution\\\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWOW64\\\n    - C:\\Windows\\WinSxS\\\n  condition: selection and not 1 of filter_main_known_locations\nfalsepositives:\n- Unknown\nlevel: medium",
    "expected_rule": "title: Creation of WerFault.exe/Wer.dll in Unusual Folder\nid: 28a452f3-786c-4fd8-b8f2-bddbe9d616d1\nstatus: test\ndescription: Detects the creation of a file named \"WerFault.exe\" or \"wer.dll\" in an uncommon folder, which could be a sign of WerFault DLL hijacking.\nreferences:\n    - https://www.bleepingcomputer.com/news/security/hackers-are-now-hiding-malware-in-windows-event-logs/\nauthor: frack113\ndate: 2022-05-09\nmodified: 2024-11-28\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.t1574.001\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\WerFault.exe'\n            - '\\wer.dll'\n    filter_main_known_locations:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.00990442054958185,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule in core detection logic, with the only difference being a minor variation in the condition statement ('not 1 of filter_main_known_locations' vs 'not 1 of filter_main_*') and path separator style (forward vs. backward slashes). Both differences have no material impact on detection effectiveness or false positive rates as they achieve the same logical outcome.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider standardizing path separator style to backslashes for consistency, though current implementation is functionally equivalent; the wildcard pattern in the condition statement could be aligned with the expected rule for better maintainability."
      }
    },
    "overall_score": 0.7374761051373955,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious filenames that contain a right-to-left override character and a potentially spoofed file extensions.\n",
    "generated_rule": "title: Suspicious Filenames with Right-to-Left Override and Spoofed Extensions\nid: 9f8b7c2d-3e4a-4f5b-9a2d-1c2f3e4b5a6d\nstatus: test\ndescription: Detects suspicious filenames that contain a right-to-left override character and potentially spoofed file extensions, which may indicate obfuscation or masquerading attempts.\nreferences:\n- https://redcanary.com/blog/right-to-left-override/\n- https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.t1036.002\nlogsource:\n  category: file_event\n  product: windows\ndetection:\n  selection:\n    TargetFilename|contains: \u202e\n    TargetFilename|re: \\.[a-zA-Z0-9]{1,4}\\u202e\\.[a-zA-Z0-9]{1,4}$\n  condition: selection\nfalsepositives:\n- Filenames containing legitimate use of right-to-left scripts such as Arabic or Hebrew\nlevel: high",
    "expected_rule": "title: Potential File Extension Spoofing Using Right-to-Left Override\nid: 979baf41-ca44-4540-9d0c-4fcef3b5a3a4\nrelated:\n    - id: ad691d92-15f2-4181-9aa4-723c74f9ddc3\n      type: derived\nstatus: experimental\ndescription: |\n    Detects suspicious filenames that contain a right-to-left override character and a potentially spoofed file extensions.\nreferences:\n    - https://redcanary.com/blog/right-to-left-override/\n    - https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method\nauthor: Jonathan Peters (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2024-11-17\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1036.002\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_rtlo_unicode:\n        TargetFilename|contains: '\\u202e'\n    selection_extensions:\n        TargetFilename|contains:\n            - 'fpd..'\n            - 'nls..'\n            - 'vsc..'\n            - 'xcod.'\n            - 'xslx.'\n    condition: all of selection_*\nfalsepositives:\n    - Filenames that contains scriptures such as arabic or hebrew might make use of this character\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3613390848734036,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule uses a broader regex pattern for detection which could catch more variants but lacks the specific extension patterns found in the EXPECTED rule; the GENERATED rule's regex approach \\.[a-zA-Z0-9]{1,4}\\u202e\\.[a-zA-Z0-9]{1,4}$ is more flexible but could miss specific known-bad patterns like 'fpd..', 'xcod.' that the EXPECTED rule explicitly checks; the EXPECTED rule's 'all of selection_*' logic provides better precision by requiring both RTLO character and specific extension patterns",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.65
        },
        "improvement_synopsis": "Add specific known-bad extension patterns while maintaining the regex for broader coverage, implement 'all of' logic to combine specific and generic detection patterns, and consider adding file size or path context conditions to reduce false positives"
      }
    },
    "overall_score": 0.7653347712183508,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\n",
    "generated_rule": "title: Uncommon Application Creating .RDP File\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\nreferences:\n- https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.defense-evasion\nlogsource:\n  product: windows\n  category: file_event\ndetection:\n  selection:\n    TargetFilename|endswith: .rdp\n    Image|endswith:\n    - \\brave.exe\n    - \\CCleaner Browser\\Application\\CCleanerBrowser.exe\n    - \\chromium.exe\n    - \\firefox.exe\n    - \\Google\\Chrome\\Application\\chrome.exe\n    - \\iexplore.exe\n    - \\microsoftedge.exe\n    - \\msedge.exe\n    - \\Opera.exe\n    - \\Vivaldi.exe\n    - \\Whale.exe\n    - \\olk.exe\n    - \\Outlook.exe\n    - \\RuntimeBroker.exe\n    - \\Thunderbird.exe\n    - \\Discord.exe\n    - \\Keybase.exe\n    - \\msteams.exe\n    - \\Slack.exe\n    - \\teams.exe\n  condition: selection\nfalsepositives:\n- Legitimate software updates or installations\nlevel: high",
    "expected_rule": "title: .RDP File Created By Uncommon Application\nid: fccfb43e-09a7-4bd2-8b37-a5a7df33386d\nrelated:\n    - id: f748c45a-f8d3-4e6f-b617-fe176f695b8f\n      type: derived\nstatus: test\ndescription: |\n    Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\nreferences:\n    - https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/\n    - https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-04-18\nmodified: 2024-11-01\ntags:\n    - attack.defense-evasion\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '.rdp'\n        Image|endswith:\n            # Covers browsers\n            - '\\brave.exe'\n            - '\\CCleaner Browser\\Application\\CCleanerBrowser.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\Google\\Chrome\\Application\\chrome.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\Opera.exe'\n            - '\\Vivaldi.exe'\n            - '\\Whale.exe'\n            # Covers email clients\n            - '\\olk.exe' # Outlook\n            - '\\Outlook.exe'\n            - '\\RuntimeBroker.exe' # If the windows mail client is used\n            - '\\Thunderbird.exe'\n            # Covers chat applications\n            - '\\Discord.exe' # Should open the browser for download, but just in case.\n            - '\\Keybase.exe'\n            - '\\msteams.exe'\n            - '\\Slack.exe'\n            - '\\teams.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching process paths, file extension monitoring, and detection logic; the only minor differences are in metadata fields (references, author, dates) which don't impact detection effectiveness, and both rules implement the same comprehensive coverage of browsers, email clients, and chat applications that could create .rdp files",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional reference URL and improving the falsepositives field documentation to match the EXPECTED rule's 'Unknown' designation rather than specifying 'Legitimate software updates or installations' which could be too permissive"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.",
    "generated_rule": "title: Suspicious Use of WSMAN Provider Without PowerShell\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: test\ndescription: Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application, indicating potential misuse or lateral movement.\nreferences:\n- https://twitter.com/chadtilbury/status/1275851297770610688\n- https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral-movement\n- attack.t1021.003\nlogsource:\n  product: windows\n  service: powershell-classic\ndetection:\n  selection:\n    Data|contains: ProviderName=WSMan\n  filter_powershell:\n    Data|contains:\n    - HostApplication=powershell\n    - HostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\n    - HostApplication=C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell\n  filter_host_application_null:\n    Data|re: HostId=[a-zA-Z0-9-]{36} EngineVersion=\n  condition: selection and not 1 of filter_*\nfalsepositives:\n- Legitimate use of WSMAN by non-PowerShell applications\nlevel: medium\nfields:\n- ComputerName\n- User\n- CommandLine\nsource_file: ./sigma_all_rules/rules/windows/powershell/powershell_classic/suspicious_wsman_provider_no_powershell.yml",
    "expected_rule": "title: Suspicious Non PowerShell WSMAN COM Provider\nid: df9a0e0e-fedb-4d6c-8668-d765dfc92aa7\nstatus: test\ndescription: Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.\nreferences:\n    - https://twitter.com/chadtilbury/status/1275851297770610688\n    - https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/\n    - https://github.com/bohops/WSMan-WinRM\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-06-24\nmodified: 2024-12-27\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - attack.lateral-movement\n    - attack.t1021.003\nlogsource:\n    product: windows\n    service: powershell-classic\ndetection:\n    selection:\n        Data|contains: 'ProviderName=WSMan'\n    filter_main_ps:\n        Data|contains:\n            - 'HostApplication=powershell'\n            - 'HostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell'\n            - 'HostApplication=C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell'\n            # In some cases powershell was invoked with inverted slashes\n            - 'HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell'\n            - 'HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell'\n    filter_main_host_application_null:\n        # Note: Since we're using the raw data field to match. There is no easy way to filter out cases where the \"HostApplication\" field is null (i.e doesn't exist). We're practically forced to use a regex.\n        # If you're already mapping and extracting the field, then obviously use that directly.\n        Data|re: 'HostId=[a-zA-Z0-9-]{36}\\s+EngineVersion='\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.13550541765540447,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.89,
        "reasoning": "The GENERATED rule closely matches the EXPECTED rule's core detection logic with identical selection criteria and similar filtering approach, including the key WSMAN provider detection and PowerShell host application filters. The only notable differences are: 1) The EXPECTED rule includes additional forward-slash path variants in filter_main_ps which could prevent evasion through path normalization, 2) Filter naming is slightly different but functionally equivalent, 3) Both rules implement the same regex pattern for handling null HostApplication cases.",
        "criteria_scores": {
          "detection_effectiveness": 0.85,
          "false_positive_control": 0.98
        },
        "improvement_synopsis": "Add forward-slash path variants to PowerShell host application filters to prevent potential evasion through path normalization; consider adopting the more descriptive filter_main_* naming convention for consistency with other rules."
      }
    },
    "overall_score": 0.7508763544138511,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the image load of VSS DLL by uncommon executables",
    "generated_rule": "title: Suspicious Volume Shadow Copy VSS DLL Load\nid: 9f8b7c2d-4e3a-4b8a-9f2d-1a2b3c4d5e6f\nstatus: test\ndescription: Detects the image load of VSS DLLs by uncommon executables to identify potential malicious activity.\nreferences:\n- https://github.com/ORCx41/DeleteShadowCopies\nauthor: Cybersecurity Analyst\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.impact\n- attack.t1490\nlogsource:\n  category: image_load\n  product: windows\ndetection:\n  selection:\n    ImageLoaded|endswith:\n    - \\vss_ps.dll\n    - \\vssapi.dll\n    - \\vsstrace.dll\n  filter_legit:\n    Image|startswith: C:\\Windows\\\n    Image|endswith:\n    - \\clussvc.exe\n    - \\dismhost.exe\n    - \\dllhost.exe\n    - \\inetsrv\\appcmd.exe\n    - \\inetsrv\\iissetup.exe\n    - \\msiexec.exe\n    - \\rundll32.exe\n    - \\searchindexer.exe\n    - \\srtasks.exe\n    - \\svchost.exe\n    - \\System32\\SystemPropertiesAdvanced.exe\n    - \\taskhostw.exe\n    - \\thor.exe\n    - \\thor64.exe\n    - \\tiworker.exe\n    - \\vssvc.exe\n    - \\WmiPrvSE.exe\n    - \\wsmprovhost.exe\n  filter_program_files:\n    Image|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  condition: selection and not 1 of filter_*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: Potentially Suspicious Volume Shadow Copy Vsstrace.dll Load\nid: 48bfd177-7cf2-412b-ad77-baf923489e82\nrelated:\n    - id: 333cdbe8-27bb-4246-bf82-b41a0dca4b70 # vss_ps.dll\n      type: similar\n    - id: 37774c23-25a1-4adb-bb6d-8bb9fd59c0f8 # vssapi.dll\n      type: similar\nstatus: test\ndescription: Detects the image load of VSS DLL by uncommon executables\nreferences:\n    - https://github.com/ORCx41/DeleteShadowCopies\nauthor: frack113\ndate: 2023-02-17\nmodified: 2025-01-19\ntags:\n    - attack.defense-evasion\n    - attack.impact\n    - attack.t1490\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\vsstrace.dll'\n    filter_main_windows:\n        - Image:\n              - 'C:\\Windows\\explorer.exe'\n              - 'C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        - Image|startswith:\n              - 'C:\\Windows\\System32\\'\n              - 'C:\\Windows\\SysWOW64\\'\n              - 'C:\\Windows\\Temp\\{' # Installers\n              - 'C:\\Windows\\WinSxS\\'\n              - 'C:\\ProgramData\\Package Cache\\{'  # Microsoft Visual Redistributable installer  VC_redist/vcredist EXE\n    filter_optional_program_files:\n        # When using this rule in your environment replace the \"Program Files\" folder by the exact applications you know use this. Examples would be software such as backup solutions\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.17174022531477795,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.83,
        "reasoning": "The GENERATED rule provides broader detection by monitoring multiple VSS DLLs (vss_ps.dll, vssapi.dll, vsstrace.dll) compared to EXPECTED's focus on vsstrace.dll only, but has less granular filtering for Windows system processes. The GENERATED rule's filter logic is more permissive with broad C:\\Windows\\ path matching versus EXPECTED's specific process enumeration, though it maintains good coverage of legitimate programs.",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.67
        },
        "improvement_synopsis": "Enhance false positive control by implementing more specific Windows process path filtering similar to EXPECTED rule, particularly for explorer.exe and SystemSettings.exe; consider adding specific version paths like WinSxS and Package Cache filters while maintaining the broader VSS DLL coverage."
      }
    },
    "overall_score": 0.7419350563286945,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs",
    "generated_rule": "title: HackTool - EvtMuteHook DLL Load Detection\nid: 7f3b9c2e-4d5b-4f8e-9a2b-3c9f5e2d8b1a\nstatus: stable\ndescription: Detects the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs.\nreferences:\n- https://github.com/bats3c/EvtMute\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.t1562.002\nlogsource:\n  category: image_load\n  product: windows\ndetection:\n  selection:\n    ImageLoaded|endswith: \\EvtMuteHook.dll\n    Hashes|contains: IMPHASH=330768A4F172E10ACB6287B87289D83B\n  condition: selection\nfalsepositives:\n- Other DLLs with the same Imphash\nlevel: high",
    "expected_rule": "title: HackTool - SharpEvtMute DLL Load\nid: 49329257-089d-46e6-af37-4afce4290685\nrelated:\n    - id: bedfc8ad-d1c7-4e37-a20e-e2b0dbee759c # Process Creation\n      type: similar\nstatus: test\ndescription: Detects the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs\nreferences:\n    - https://github.com/bats3c/EvtMute\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-09-07\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.t1562.002\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Hashes|contains: 'IMPHASH=330768A4F172E10ACB6287B87289D83B'\n    condition: selection\nfalsepositives:\n    - Other DLLs with the same Imphash\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.13540268456375848,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule maintains core detection effectiveness by using the same critical IMPHASH detection but adds an additional ImageLoaded path check which provides defense-in-depth, though this addition could slightly increase false positives in certain environments where legitimate DLLs share the same name pattern",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Consider removing the ImageLoaded path check unless specifically needed for your environment, as the IMPHASH alone provides sufficient detection with better false positive control as demonstrated in the EXPECTED rule"
      }
    },
    "overall_score": 0.7388506711409396,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects potential COM object hijacking via modification of default system CLSID.",
    "error": "Failed to generate rule: HTTPSConnectionPool(host='my-microservice-680275457059.us-central1.run.app', port=443): Max retries exceeded with url: /api/v1/rules (Caused by ResponseError('too many 503 error responses'))",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects changes to the Windows EventLog channel permission values. It focuses on changes to the Security Descriptor Definition Language (SDDL) string, as modifications to these values can restrict access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel. Upon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".\n",
    "generated_rule": "title: Detect Changes to Windows EventLog Channel Permission Values\nid: 3e8f9b2c-4d3a-4f8b-9c3b-2f8e9b2c4d3a\nstatus: experimental\ndescription: Detects changes to the Security Descriptor Definition Language (SDDL) string of Windows EventLog channels, which can restrict access to specific users or groups, aiding in defense evasion.\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.t1562.002\nlogsource:\n  category: registry_set\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains: \\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\\n    TargetObject|endswith: \\ChannelAccess\n    Details|contains:\n    - '(A;;0x1;;;LA)'\n    - '(A;;0x1;;;SY)'\n    - '(A;;0x5;;;BA)'\n    - '(A;;0x4;;;AU)'\n    - '(A;;0x2;;;BU)'\n  filter_trustedinstaller:\n    Image: C:\\Windows\\servicing\\TrustedInstaller.exe\n  filter_tiworker:\n    Image|startswith: C:\\Windows\\WinSxS\\\n    Image|endswith: \\TiWorker.exe\n  condition: selection and not 1 of filter_*\nfalsepositives:\n- Legitimate administrative changes to event log permissions\nlevel: high",
    "expected_rule": "title: Windows Event Log Access Tampering Via Registry\nid: ba226dcf-d390-4642-b9af-b534872f1156\nstatus: experimental\ndescription: |\n    Detects changes to the Windows EventLog channel permission values. It focuses on changes to the Security Descriptor Definition Language (SDDL) string, as modifications to these values can restrict access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel. Upon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".\nreferences:\n    - https://www.atomicredteam.io/atomic-red-team/atomics/T1562.002#atomic-test-8---modify-event-log-channel-access-permissions-via-registry---powershell\n    - https://www.youtube.com/watch?v=uSYvHUVU8xY\n    - https://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language\nauthor: X__Junior\ndate: 2025-01-16\ntags:\n    - attack.t1547.001\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    # O:SYG:SYD:(D;;0x1;;;WD)\n    # O:BAG:SYD:(A;;0x2;;;S-1-15-2-1)(D;;0x1;;;WD)\n    selection_key_1:\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System'\n        TargetObject|endswith: '\\CustomSD'\n    selection_key_2:\n        TargetObject|contains:\n            - '\\Policies\\Microsoft\\Windows\\EventLog\\Setup'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels'\n        TargetObject|endswith: '\\ChannelAccess'\n    selection_details:\n        - Details|contains: 'D:(D;'\n        - Details|contains|all:\n              - 'D:('\n              - ')(D;'\n    condition: 1 of selection_key_* and selection_details\nfalsepositives:\n    - Administrative activity, still unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1701656091248781,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant differences in detection approach compared to EXPECTED: it focuses on specific SDDL patterns rather than broader malicious modifications, misses key registry paths (Setup EventLog), lacks comprehensive SDDL pattern detection for denial operations (D:), and uses a more limited set of registry locations; however, it does include good false positive filtering for TrustedInstaller and TiWorker processes which the EXPECTED rule lacks",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Expand registry path coverage to include Setup EventLog paths, implement broader SDDL pattern detection focusing on denial operations (D:), maintain existing FP filters but add detection for broader range of malicious SDDL modifications including custom security descriptors"
      }
    },
    "overall_score": 0.6875414022812194,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
    "generated_rule": "title: Suspicious Command Execution via Run Dialog Box\nid: 3f9b8c2e-4b5d-4f8e-9a2b-2c3e5f8a9d7e\nstatus: test\ndescription: Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key, often used by threat actors to deceive users into executing malicious commands.\nreferences:\n- https://attack.mitre.org/techniques/T1547/001/\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.execution\n- attack.t1547.001\nlogsource:\n  category: registry_set\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains: \\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\n    Details|contains:\n    - 'cmd.exe'\n    - 'powershell'\n    - 'pwsh'\n    - 'mshta'\n    - 'wscript'\n    - 'cscript'\n    - 'rundll32'\n  condition: selection\nfalsepositives:\n- Legitimate use by administrators or power users\n- Commonly used applications or scripts\nlevel: medium\nfields:\n- TargetObject\n- Details\nsource_file: ./sigma_all_rules/rules/windows/registry/registry_set/registry_set_runmru_command_execution.yml",
    "expected_rule": "title: Potentially Suspicious Command Executed Via Run Dialog Box - Registry\nid: a7df0e9e-91a5-459a-a003-4cde67c2ff5d\nrelated:\n    - id: f9d091f6-f1c7-4873-a24f-050b4a02b4dd\n      type: derived\nstatus: test\ndescription: |\n    Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\n    This technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\nreferences:\n    - https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf\n    - https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71\n    - https://www.forensafe.com/blogs/runmrukey.html\n    - https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/\nauthor: Ahmed Farouk, Nasreddine Bencherchali\ndate: 2024-11-01\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_key:\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU'\n    selection_powershell_command:\n        Details|contains:\n            - 'powershell'\n            - 'pwsh'\n    selection_powershell_susp_keywords:\n        Details|contains:\n            - ' -e '\n            - ' -ec '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n            - 'ftp'\n            - 'Hidden'\n            - 'http'\n            - 'iex'\n            - 'Invoke-'\n    selection_wmic_command:\n        Details|contains: 'wmic'\n    selection_wmic_susp_keywords:\n        Details|contains:\n            - 'shadowcopy'\n            - 'process call create'\n    condition: selection_key and (all of selection_powershell_* or all of selection_wmic_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3579748624351896,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.41,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule - it lacks detection of encoded PowerShell commands, suspicious WMIC usage, and specific malicious indicators like HTTP/FTP/IEX. The GENERATED rule uses simple string matching while the EXPECTED rule implements layered detection with command+keyword pairs for better precision. The GENERATED rule's broader command matching (cmd.exe, rundll32, etc.) without context increases false positives.",
        "criteria_scores": {
          "detection_effectiveness": 0.4,
          "false_positive_control": 0.45
        },
        "improvement_synopsis": "Add detection for encoded PowerShell commands, WMIC abuse patterns, and suspicious download/execution keywords; implement nested conditions to combine command presence with suspicious parameters; remove overly broad command matches like cmd.exe without context; raise severity to high given the attack context."
      }
    },
    "overall_score": 0.6624937156087973,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects NetNTLM downgrade attack",
    "generated_rule": "title: NetNTLM Downgrade Attack Detection\nid: 9f8b7c2d-3e4a-4b8f-9a2b-1c2d3e4f5a6b\nstatus: stable\ndescription: Detects attempts to downgrade NetNTLM security settings, which can indicate a potential attack.\nreferences:\n- https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.t1562.001\n- attack.t1112\nlogsource:\n  product: windows\n  service: security\ndetection:\n  selection:\n    EventID: 4657\n    ObjectName|contains|all:\n    - \\REGISTRY\\MACHINE\\SYSTEM\n    - ControlSet\n    - \\Control\\Lsa\n    ObjectValueName:\n    - LmCompatibilityLevel\n    - NtlmMinClientSec\n    - RestrictSendingNTLMTraffic\n  condition: selection\nfalsepositives:\n- Legitimate administrative changes to security settings\nlevel: high",
    "expected_rule": "title: NetNTLM Downgrade Attack - Registry\nid: d67572a0-e2ec-45d6-b8db-c100d14b8ef2\nstatus: test\ndescription: Detects NetNTLM downgrade attack\nreferences:\n    - https://web.archive.org/web/20171113231705/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks\n    - https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers\nauthor: Florian Roth (Nextron Systems), wagga, Nasreddine Bencherchali (Splunk STRT)\ndate: 2018-03-20\nmodified: 2024-12-03\ntags:\n    - attack.defense-evasion\n    - attack.t1562.001\n    - attack.t1112\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection_regkey:\n        TargetObject|contains|all:\n            - 'SYSTEM\\'\n            - 'ControlSet'\n            - '\\Control\\Lsa'\n    selection_value_lmcompatibilitylevel:\n        TargetObject|endswith: '\\lmcompatibilitylevel'\n        Details:\n            - 'DWORD (0x00000000)'\n            - 'DWORD (0x00000001)'\n            - 'DWORD (0x00000002)'\n    selection_value_ntlmminclientsec:\n        TargetObject|endswith: '\\NtlmMinClientSec'\n        Details:\n            - 'DWORD (0x00000000)' # No Security\n            - 'DWORD (0x00000010)' # Only Integrity\n            - 'DWORD (0x00000020)' # Only confidentiality\n            - 'DWORD (0x00000030)' # Both Integrity and confidentiality\n    selection_value_restrictsendingntlmtraffic:\n        # Note: The obvious values with issues are 0x00000000 (allow all) and 0x00000001 (audit).\n        # 0x00000002 can be secure but only if \"ClientAllowedNTLMServers\" is properly configured\n        # Hence all values should be monitored and investigated\n        TargetObject|endswith: '\\RestrictSendingNTLMTraffic'\n    condition: selection_regkey and 1 of selection_value_*\nfalsepositives:\n    - Services or tools that set the values to more restrictive values\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.4052995391705069,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule: it lacks specific value monitoring for LmCompatibilityLevel and NtlmMinClientSec (missing DWORD values), uses less precise registry path matching (ObjectName vs TargetObject), and doesn't separate registry key and value detections which could lead to missed variants; while it captures basic registry modifications, it misses the granular detection of specific dangerous configurations that the EXPECTED rule monitors",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add specific DWORD value detection for each registry setting, implement separate conditions for registry keys and values, use more precise TargetObject field instead of ObjectName, and include detailed value monitoring especially for RestrictSendingNTLMTraffic configurations"
      }
    },
    "overall_score": 0.7463248847926267,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
    "generated_rule": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n- https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n- https://github.com/hfiref0x/UACME\n- https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\changepk.exe\n    ParentImage|endswith: \\slui.exe\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using ChangePK and SLUI\nid: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc\nstatus: test\ndescription: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)\nreferences:\n    - https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\changepk.exe'\n        ParentImage|endswith: '\\slui.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in terms of core detection logic, matching exactly on process creation events for changepk.exe with slui.exe as parent and high/system integrity levels, with the only difference being minor YAML formatting variations in quotes and list indentation that don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed as both rules are equivalent in detection capability; optional enhancement could be adding comments to explain the SID values as done in the EXPECTED rule for improved maintainability"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts",
    "generated_rule": "title: Detection of SYSTEM Privilege Child Processes by Service Accounts\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: Detects child processes spawned with SYSTEM privileges by parent processes running under LOCAL SERVICE or NETWORK SERVICE accounts.\nreferences:\n- https://example.com/reference\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.privilege-escalation\n- attack.t1134.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentUser|endswith:\n    - \\NETWORK SERVICE\n    - \\LOCAL SERVICE\n    User|endswith:\n    - \\SYSTEM\n    - \\Syst\u00e8me\n    - \\\u0421\u0418\u0421\u0422\u0415\u041c\u0410\n    IntegrityLevel: System\n  filter_common:\n    Image|endswith:\n    - \\rundll32.exe\n    - \\svchost.exe\n  condition: selection and not filter_common\nfields:\n- ParentUser\n- User\n- Image\n- CommandLine\nfalsepositives:\n- Legitimate software updates or system maintenance tasks\nlevel: high",
    "expected_rule": "title: Suspicious Child Process Created as System\nid: 590a5f4c-6c8c-4f10-8307-89afe9453a9d\nstatus: test\ndescription: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\n    - https://github.com/antonioCoco/RogueWinRM\n    - https://twitter.com/Cyb3rWard0g/status/1453123054243024897\nauthor: Teymur Kheirkhabarov, Roberto Rodriguez (@Cyb3rWard0g), Open Threat Research (OTR)\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.t1134.002\nlogsource:\n    category: process_creation\n    product: windows\n    definition: 'Requirements: ParentUser field needs sysmon >= 13.30'\ndetection:\n    selection:\n        ParentUser|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        ParentUser|endswith:\n            - '\\NETWORK SERVICE'\n            - '\\LOCAL SERVICE'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|endswith: # System\n            - '\\SYSTEM'\n            - '\\Syst\u00e8me'\n            - '\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    filter_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'DavSetCookie'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.15104091972596745,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule captures core detection logic for SYSTEM privilege escalation from service accounts but lacks important elements: 1) Missing AUTHORI/AUTORI patterns in User/ParentUser which could miss some variants 2) Less comprehensive filter conditions - only basic rundll32/svchost vs. specific DavSetCookie pattern 3) No S-1-16-16384 SID alternative for IntegrityLevel 4) Similar core detection approach but less robust implementation",
        "criteria_scores": {
          "detection_effectiveness": 0.7,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Add AUTHORI/AUTORI User/ParentUser patterns, include S-1-16-16384 SID alternative for IntegrityLevel, implement more specific filter conditions like DavSetCookie pattern, and expand references to aid investigation"
      }
    },
    "overall_score": 0.7127602299314918,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
    "generated_rule": "title: UAC Bypass Using IEInstal - Comprehensive Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64) by monitoring both file and process activities.\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Your Name\ndate: 2023-10-10\nmodified: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_file:\n    Image: C:\\Program Files\\Internet Explorer\\IEInstal.exe\n    TargetFilename|startswith: C:\\Users\\\n    TargetFilename|contains: \\AppData\\Local\\Temp\\\n    TargetFilename|endswith: consent.exe\n  selection_process:\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n    ParentImage|endswith: \\ieinstal.exe\n    Image|contains: \\AppData\\Local\\Temp\\\n    Image|endswith: consent.exe\n  condition: selection_file or selection_process\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using IEInstal - Process\nid: 80fc36aa-945e-4181-89f2-2f907ab6775d\nstatus: test\ndescription: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n        ParentImage|endswith: '\\ieinstal.exe'\n        Image|contains: '\\AppData\\Local\\Temp\\'\n        Image|endswith: 'consent.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3306826178747362,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule expands detection coverage by including both process creation and file monitoring while maintaining all critical detection elements from the EXPECTED rule including integrity level checks, path patterns, and process relationships; the additional file monitoring component provides enhanced detection capabilities without introducing significant false positive risks",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Consider adding file size or hash conditions to the file monitoring component to reduce potential false positives while maintaining the enhanced detection capabilities"
      }
    },
    "overall_score": 0.817670654468684,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects potential RDP Session Hijacking activity on Windows systems",
    "generated_rule": "title: Potential RDP Session Hijacking Activity\nid: 9c2f1a3b-4d5e-4f8b-9a2e-3b7f8e9c1d2f\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems by monitoring suspicious use of tscon.exe\nreferences:\n- https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2023-10-15\ntags:\n- attack.execution\n- attack.t1563\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n    Image|endswith: '\\tscon.exe'\n  selection_integrity:\n    IntegrityLevel: System\n  selection_cmd:\n    CommandLine|contains: ' /dest:'\n  condition: all of selection_*\nfalsepositives:\n- Legitimate administrative activity\nlevel: medium\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_tscon_rdp_session_hijacking.yml",
    "expected_rule": "title: Potential RDP Session Hijacking Activity\nid: 224f140f-3553-4cd1-af78-13d81bf9f7cc\nstatus: test\ndescription: Detects potential RDP Session Hijacking activity on Windows systems\nreferences:\n    - https://twitter.com/Moti_B/status/909449115477659651\nauthor: '@juju4'\ndate: 2022-12-27\nmodified: 2024-12-01\ntags:\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\tscon.exe'\n        - OriginalFileName: 'tscon.exe'\n    selection_integrity:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1127362348587333,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule maintains core detection capabilities for RDP session hijacking via tscon.exe with System integrity level, and adds a useful CommandLine filter for '/dest:' which could help reduce false positives, but lacks the OriginalFileName alternative detection and S-1-16-16384 SID coverage from the EXPECTED rule which could allow some evasion scenarios",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Add OriginalFileName alternative detection path and include S-1-16-16384 SID in IntegrityLevel conditions to match EXPECTED rule's evasion resistance while maintaining the beneficial CommandLine filter"
      }
    },
    "overall_score": 0.7331840587146833,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the usage of binaries such as 'net', 'sc' or 'powershell' in order to stop, pause, disable or delete critical or important Windows services such as AV, Backup, etc. As seen being used in some ransomware scripts\n",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')",
    "generated_rule": "title: NetSupport RAT Execution From Unusual Location\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')\nreferences:\n- https://redcanary.com/blog/misbehaving-rats/\nauthor: Your Name\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.execution\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\client32.exe\n    Product|contains: NetSupport Remote Control\n    OriginalFileName|contains: client32.exe\n    Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n  filter:\n    Image|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  condition: selection and not filter\nfalsepositives:\n- Legitimate installations in non-standard paths\nlevel: medium",
    "expected_rule": "title: Remote Access Tool - NetSupport Execution From Unusual Location\nid: 37e8d358-6408-4853-82f4-98333fca7014\nstatus: test\ndescription: Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\client32.exe'\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.08645576780818931,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains nearly identical detection capabilities as the EXPECTED rule with matching core detection logic including Image path, Product name, OriginalFileName, and IMPHASH values, plus identical filter conditions for legitimate Program Files paths; the only notable difference is an additional attack.execution MITRE tag which actually improves coverage without impacting detection accuracy",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "The rule is highly effective as-is, but could be marginally improved by updating the falsepositives field to be more generic ('Unknown') rather than specifying a particular scenario, which helps avoid anchoring bias during investigation"
      }
    },
    "overall_score": 0.7506139419520473,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120",
    "generated_rule": "title: Detection of SysmonEOP PoC Execution for CVE-2022-41120\nid: 9b8f7c6d-3e4a-4d2b-9f8e-123456789abc\nstatus: stable\ndescription: Detects the execution of the Proof of Concept (PoC) that can be used to exploit Sysmon CVE-2022-41120.\nreferences:\n- https://github.com/Wh04m1001/SysmonEoP\nauthor: Cybersecurity Analyst\ndate: 2023-10-23\ntags:\n- cve.2022-41120\n- attack.t1068\n- attack.privilege-escalation\n- detection.emerging-threats\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_image:\n    Image|endswith: \n    - \\SysmonEOP.exe\n  selection_hash:\n    Hashes|contains:\n    - IMPHASH=22F4089EB8ABA31E1BB162C6D9BF72E5\n    - IMPHASH=5123FA4C4384D431CD0D893EEB49BBEC\n  selection_parent:\n    ParentImage|endswith:\n    - \\Sysmon.exe\n    - \\Sysmon64.exe\n  condition: 1 of selection_*\nfalsepositives:\n- Unlikely\nlevel: critical",
    "expected_rule": "title: HackTool - SysmonEOP Execution\nid: 8a7e90c5-fe6e-45dc-889e-057fe4378bd9\nstatus: test\ndescription: Detects the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120\nreferences:\n    - https://github.com/Wh04m1001/SysmonEoP\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-12-04\nmodified: 2024-11-23\ntags:\n    - cve.2022-41120\n    - attack.t1068\n    - attack.privilege-escalation\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\SysmonEOP.exe'\n    selection_hash:\n        Hashes|contains:\n            - 'IMPHASH=22F4089EB8ABA31E1BB162C6D9BF72E5'\n            - 'IMPHASH=5123FA4C4384D431CD0D893EEB49BBEC'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1437349106711734,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule maintains equivalent core detection capabilities with the EXPECTED rule, matching on both SysmonEOP.exe and specific IMPHASHes, while adding an additional parent process check (Sysmon.exe/Sysmon64.exe) which actually improves detection specificity; both rules use appropriate endswith/contains operators and have identical hash values for detection",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "The generated rule is actually slightly more robust than the expected rule due to the additional parent process check, though consider adding a command line parameter check to further improve specificity and catch potential variants of the exploit"
      }
    },
    "overall_score": 0.7709337276677932,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
    "generated_rule": "title: Suspicious Msiexec Usage for Malicious Payload Execution\nid: 12345678-abcd-efgh-ijkl-9876543210ab\nstatus: test\ndescription: Detects potential abuse of msiexec.exe to execute malicious payloads by monitoring specific command-line arguments.\nreferences:\n- https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.t1218.007\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\msiexec.exe\n    CommandLine|contains|all:\n    - ' msiexec'\n    - ' -q'\n    - ' -y'\n    - '://'\n  filter_known:\n    CommandLine|contains:\n    - 'C:\\Program Files\\Bonjour\\mdnsNSP.dll'\n    - 'C:\\Program Files (x86)\\Apple Software Update\\ScriptingObjectModel.dll'\n    - 'C:\\Windows\\CCM\\'\n  condition: selection and not 1 of filter_known\nfalsepositives:\n- Legitimate software installations or updates using msiexec with quiet or web-based parameters\nlevel: high\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_msiexec_suspicious_usage.yml",
    "expected_rule": "title: Msiexec Quiet Installation\nid: 79a87aa6-e4bd-42fc-a5bb-5e6fbdcd62f5\nstatus: test\ndescription: |\n    Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\n    Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md\n    - https://twitter.com/_st0pp3r_/status/1583914244344799235\nauthor: frack113\ndate: 2022-01-16\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains|windash:\n            - '-i'\n            - '-package'\n            - '-a'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains|windash: '-q'\n    filter_user_temp:\n        # The %temp% is a very common location for installers\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n    filter_system_temp:\n        ParentImage|startswith: 'C:\\Windows\\Temp\\'\n    filter_ccm:\n        ParentImage: 'C:\\Windows\\CCM\\Ccm32BitLauncher.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - WindowsApps installing updates via the quiet flag\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.317368114596829,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.62,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED - it lacks OriginalFileName checks, misses several key command line arguments (-i, -package, -a, -j), and relies too heavily on the presence of URLs ('://') which is easily evadable. While it includes some good filters, it misses important legitimate paths like temp directories that the EXPECTED rule properly handles.",
        "criteria_scores": {
          "detection_effectiveness": 0.5,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Add OriginalFileName detection, include additional command line arguments (-i, -package, -a, -j), remove over-reliance on URL detection, and incorporate temp directory filtering logic from the EXPECTED rule to improve detection coverage while maintaining good FP control."
      }
    },
    "overall_score": 0.7153420286492072,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations",
    "generated_rule": "title: Execution of System Informer Tool\nid: 3a2f1b5e-8c4d-4f9b-9a2e-1b2f3c4d5e6f\nstatus: stable\ndescription: Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options, and other low-level operations.\nreferences:\n- https://github.com/winsiderss/systeminformer\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.persistence\n- attack.privilege-escalation\n- attack.discovery\n- attack.defense-evasion\n- attack.t1082\n- attack.t1564\n- attack.t1543\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\SystemInformer.exe\n    OriginalFileName: SystemInformer.exe\n    Description: System Informer\n    Product: System Informer\n    Hashes|contains:\n    - MD5=19426363A37C03C3ED6FEDF57B6696EC\n    - SHA1=8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC\n    - SHA256=8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287\n    - IMPHASH=B68908ADAEB5D662F87F2528AF318F12\n  condition: selection\nfalsepositives:\n- System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly.\nlevel: medium",
    "expected_rule": "title: PUA - System Informer Execution\nid: 5722dff1-4bdd-4949-86ab-fbaf707e767a\nrelated:\n    - id: 811e0002-b13b-4a15-9d00-a613fce66e42\n      type: similar\nstatus: test\ndescription: Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations\nreferences:\n    - https://github.com/winsiderss/systeminformer\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-08\nmodified: 2024-11-23\ntags:\n    - attack.persistence\n    - attack.privilege-escalation\n    - attack.discovery\n    - attack.defense-evasion\n    - attack.t1082\n    - attack.t1564\n    - attack.t1543\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SystemInformer.exe'\n        - OriginalFileName: 'SystemInformer.exe'\n        - Description: 'System Informer'\n        - Product: 'System Informer'\n        - Hashes|contains:\n              # Note: add other hashes as needed\n              # 3.0.11077.6550\n              - 'MD5=19426363A37C03C3ED6FEDF57B6696EC'\n              - 'SHA1=8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC'\n              - 'SHA256=8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287'\n              - 'IMPHASH=B68908ADAEB5D662F87F2528AF318F12'\n    condition: selection\nfalsepositives:\n    - System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.044864284756070294,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic, hash values, file indicators, and MITRE ATT&CK mappings; the only notable differences are in metadata fields (related rules, modification dates) which don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding 'related' field references to link similar rules and include version-specific comments for hash values as seen in the expected rule to improve documentation and maintainability"
      }
    },
    "overall_score": 0.7402160711890176,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of Windows Credential Editor (WCE)",
    "generated_rule": "title: Detect Windows Credential Editor (WCE) Usage\nid: 9f8b7c3d-4e2b-4f8a-9c3d-2f8b7c3d4e2b\nstatus: test\ndescription: Detects the use of Windows Credential Editor (WCE) by monitoring process creation and registry events.\nreferences:\n- https://www.ampliasecurity.com/research/windows-credentials-editor/\nauthor: Cybersecurity Analyst\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.credential-access\n- attack.t1003.001\n- attack.s0005\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_process:\n    Image|endswith:\n    - \\wce.exe\n    - \\wce64.exe\n  selection_registry:\n    TargetObject|contains: Services\\WCESERVICE\\Start\n  condition: 1 of selection_process or selection_registry\nfalsepositives:\n- Legitimate software with similar behavior\nlevel: critical",
    "expected_rule": "title: HackTool - Windows Credential Editor (WCE) Execution\nid: 7aa7009a-28b9-4344-8c1f-159489a390df\nstatus: test\ndescription: Detects the use of Windows Credential Editor (WCE)\nreferences:\n    - https://www.ampliasecurity.com/research/windows-credentials-editor/\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-12-31\nmodified: 2024-11-23\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.s0005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        Hashes|contains:  # Sysmon field hashes contains all types\n            - IMPHASH=a53a02b997935fd8eedcb5f7abab9b9f\n            - IMPHASH=e96a73c7bf33a464c510ede582318bf2\n    selection_2:\n        CommandLine|endswith: '.exe -S'\n        ParentImage|endswith: '\\services.exe'\n    filter:\n        Image|endswith: '\\clussvc.exe'\n    condition: 1 of selection_* and not filter\nfalsepositives:\n    - Another service that uses a single -s command line switch\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.32650494159928123,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.41,
        "reasoning": "The GENERATED rule relies on basic filename matching and registry monitoring which is easily evadable, while the EXPECTED rule uses more robust detection via IMPHASH values, service behavior patterns, and specific command line arguments. The GENERATED rule lacks the critical IMPHASH detection which helps identify WCE variants regardless of filename, and misses the services.exe parent process pattern that indicates service installation behavior.",
        "criteria_scores": {
          "detection_effectiveness": 0.3,
          "false_positive_control": 0.65
        },
        "improvement_synopsis": "Add IMPHASH-based detection, include parent process context for service installation patterns, implement command line argument detection for '-S' flag, and add specific filtering for legitimate services like clussvc.exe to reduce false positives while maintaining high-fidelity detection."
      }
    },
    "overall_score": 0.6546262353998202,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
    "generated_rule": "title: UAC Bypass Using MSConfig GUI Hack (UACMe 55)\nid: 9f8b7c2d-4d3e-4a5b-9f2e-1a2f3b4c5d6e\nstatus: test\ndescription: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Your Name\ndate: 2023-10-01\nmodified: 2023-10-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n    ParentImage|endswith: \\AppData\\Local\\Temp\\pkgmgr.exe\n    CommandLine: '\"C:\\Windows\\system32\\msconfig.exe\" -5'\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using MSConfig Token Modification - Process\nid: ad92e3f9-7eb6-460e-96b1-582b0ccbb980\nstatus: test\ndescription: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n        ParentImage|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n        CommandLine: '\"C:\\Windows\\system32\\msconfig.exe\" -5'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic including IntegrityLevel values, ParentImage path, and CommandLine parameters. The rules are functionally equivalent in detecting the UAC bypass technique using MSConfig GUI hack with identical process creation monitoring, integrity level checks, and command line parameters.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "The generated rule is essentially identical to the expected rule in both detection and FP control - only minor metadata differences exist (title, id, author) which don't impact detection effectiveness."
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
    "generated_rule": "title: UAC Bypass Abusing Winsat Path Parsing\nid: 3f9b7c2e-8f4b-4b9a-9c3e-2f5e8b7d9c1a\nstatus: test\ndescription: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n    ParentImage|endswith: \\AppData\\Local\\Temp\\system32\\winsat.exe\n    ParentCommandLine|contains: C:\\Windows \\system32\\winsat.exe\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Abusing Winsat Path Parsing - Process\nid: 7a01183d-71a2-46ad-ad5c-acd989ac1793\nstatus: test\ndescription: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n        ParentImage|endswith: '\\AppData\\Local\\Temp\\system32\\winsat.exe'\n        ParentCommandLine|contains: 'C:\\Windows \\system32\\winsat.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule in core detection logic, containing the same critical detection fields (IntegrityLevel values, ParentImage path, ParentCommandLine patterns) and conditions for detecting UAC bypass via winsat.exe path parsing abuse, with only cosmetic YAML formatting differences that don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No significant improvements needed as both rules are functionally equivalent; minor optional enhancement would be to add the 'modified' field for version tracking and use consistent quote formatting for string values"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of CoercedPotato, a tool for privilege escalation",
    "generated_rule": "title: HackTool - CoercedPotato Execution Detection\nid: 9f2b7c3e-4d5a-4f8b-9a2e-3c9f8b7e4d5a\nstatus: stable\ndescription: Detects the use of CoercedPotato, a tool for privilege escalation by monitoring process creation and named pipe patterns.\nreferences:\n- https://github.com/hackvens/CoercedPotato\n- https://blog.hackvens.fr/articles/CoercedPotato.html\nauthor: Your Name\ndate: 2023-10-11\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1055\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_process:\n    Image|endswith: \\CoercedPotato.exe\n    CommandLine|contains: ' --exploitId '\n  selection_pipe:\n    PipeName|contains: \\coerced\\\n  condition: 1 of selection_*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: HackTool - CoercedPotato Execution\nid: e8d34729-86a4-4140-adfd-0a29c2106307\nstatus: experimental\ndescription: Detects the use of CoercedPotato, a tool for privilege escalation\nreferences:\n    - https://github.com/hackvens/CoercedPotato\n    - https://blog.hackvens.fr/articles/CoercedPotato.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-10-11\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loader_img:\n        Image|endswith: '\\CoercedPotato.exe'\n    selection_params:\n        CommandLine|contains: ' --exploitId '\n    selection_loader_imphash:\n        Hashes|contains:\n            - 'IMPHASH=A75D7669DB6B2E107A44C4057FF7F7D6'\n            - 'IMPHASH=F91624350E2C678C5DCBE5E1F24E22C9'\n            - 'IMPHASH=14C81850A079A87E83D50CA41C709A15'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3145558425721292,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule captures core detection logic for CoercedPotato through process name and command line parameters similar to EXPECTED rule, but lacks the important IMPHASH detection which would help catch variants and recompiled versions of the tool, reducing overall detection effectiveness while maintaining similar false positive control through specific process and command line matching",
        "criteria_scores": {
          "detection_effectiveness": 0.7,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Add IMPHASH detection conditions to catch tool variants and recompiled versions, consider adding pipe monitoring as an additional detection vector though validate FP impact first, maintain current specific process name and command line parameter matching"
      }
    },
    "overall_score": 0.7536389606430323,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed",
    "error": "Failed to generate rule: HTTPSConnectionPool(host='my-microservice-680275457059.us-central1.run.app', port=443): Max retries exceeded with url: /api/v1/rules (Caused by ResponseError('too many 503 error responses'))",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
    "generated_rule": "title: UAC Bypass Using Consent and Comctl32 - Comprehensive Detection\nid: 3f9b7c2e-8b4d-4f3b-9c2e-1a2f3e4b5c6d\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22) through process creation and file events.\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Cybersecurity Analyst\ndate: 2023-10-15\nmodified: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  process_selection:\n    ParentImage|endswith: \\consent.exe\n    Image|endswith: \\werfault.exe\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  file_selection:\n    TargetFilename|startswith: C:\\Windows\\System32\\consent.exe.@\n    TargetFilename|endswith: \\comctl32.dll\n  condition: process_selection or file_selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using Consent and Comctl32 - Process\nid: 1ca6bd18-0ba0-44ca-851c-92ed89a61085\nstatus: test\ndescription: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\werfault.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.31687783887162324,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule maintains core detection capabilities for UAC bypass via consent.exe and comctl32.dll with identical process creation detection logic, but adds an additional file_selection component that monitors for related file modifications which could provide earlier detection, though the file path pattern could be more specific to reduce FP risk",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Refine the file_selection pattern to be more specific about the exact comctl32.dll path and consider adding command line parameters to further reduce false positives while maintaining the enhanced detection capability"
      }
    },
    "overall_score": 0.7842194597179057,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level",
    "generated_rule": "title: Detect Service Configuration Modification by Medium Integrity Processes\nid: 3a7b9c2d-4f8e-4d3b-9f2e-1a2b3c4d5e6f\nstatus: stable\ndescription: Detects modification of service configurations (ImagePath, FailureCommand, and ServiceDLL) in the registry by processes with Medium integrity level, which may indicate privilege escalation attempts.\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://pentestlab.blog/2017/03/31/insecure-registry-permissions/\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.privilege-escalation\n- attack.t1574.011\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection:\n    IntegrityLevel:\n    - Medium\n    - S-1-16-8192\n    CommandLine|contains|all:\n    - ControlSet\n    - services\n    CommandLine|contains:\n    - \\ImagePath\n    - \\FailureCommand\n    - \\ServiceDll\n  condition: selection\nfields:\n- CommandLine\n- ParentCommandLine\n- IntegrityLevel\nfalsepositives:\n- Legitimate administrative tasks\nlevel: high",
    "expected_rule": "title: Potential Privilege Escalation via Service Permissions Weakness\nid: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981\nstatus: test\ndescription: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/31/insecure-registry-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n        CommandLine|contains|all:\n            - 'ControlSet'\n            - 'services'\n        CommandLine|contains:\n            - '\\ImagePath'\n            - '\\FailureCommand'\n            - '\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same IntegrityLevel checks, CommandLine patterns, and condition operators as the EXPECTED rule, while adding helpful fields specification and more descriptive falsepositives documentation that aids in investigation and tuning",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "The rule is highly effective as-is, but could be enhanced by adding process creation metadata fields like ProcessId and ParentProcessId to aid in investigation and potentially adding exclusions for known legitimate service modification tools"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a suspicious process creation as SYSTEM user (suspicious program or command line parameter)",
    "generated_rule": "title: Suspicious SYSTEM User Process Creation\nid: 3f8b9c2d-4b5e-4a8e-9f3b-2d9f5e6c7a8b\nstatus: test\ndescription: Detects a suspicious process creation as SYSTEM user with suspicious programs or command line parameters.\nreferences:\n- Internal Research\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.credential-access\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1134\n- attack.t1003\n- attack.t1027\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    IntegrityLevel:\n    - System\n    - S-1-16-16384\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  selection_special:\n  - Image|endswith:\n    - \\calc.exe\n    - \\cscript.exe\n    - \\forfiles.exe\n    - \\hh.exe\n    - \\mshta.exe\n    - \\ping.exe\n    - \\wscript.exe\n  - CommandLine|contains:\n    - ' -NoP '\n    - ' -W Hidden '\n    - ' -decode '\n    - ' /decode '\n    - ' /urlcache '\n    - ' -urlcache '\n    - ' -e* JAB'\n    - ' -e* SUVYI'\n    - ' -e* SQBFAFgA'\n    - ' -e* aWV4I'\n    - ' -e* IAB'\n    - ' -e* PAA'\n    - ' -e* aQBlAHgA'\n    - vssadmin delete shadows\n    - reg SAVE HKLM\n    - ' -ma '\n    - Microsoft\\Windows\\CurrentVersion\\Run\n    - .downloadstring(\n    - .downloadfile(\n    - ' /ticket:'\n    - 'dpapi::'\n    - event::clear\n    - event::drop\n    - id::modify\n    - 'kerberos::'\n    - 'lsadump::'\n    - 'misc::'\n    - 'privilege::'\n    - 'rpc::'\n    - 'sekurlsa::'\n    - 'sid::'\n    - 'token::'\n    - vault::cred\n    - vault::list\n    - ' p::d '\n    - ;iex(\n    - MiniDump\n    - 'net user '\n  filter_main_ping:\n    CommandLine|contains|all:\n    - ping\n    - 127.0.0.1\n    - ' -n '\n  filter_vs:\n    Image|endswith: \\PING.EXE\n    ParentCommandLine|contains: \\DismFoDInstall.cmd\n  filter_config_mgr:\n    ParentImage|contains: :\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\n  filter_java:\n    ParentImage|contains:\n    - :\\Program Files (x86)\\Java\\\n    - :\\Program Files\\Java\\\n    ParentImage|endswith: \\bin\\javaws.exe\n    Image|contains:\n    - :\\Program Files (x86)\\Java\\\n    - :\\Program Files\\Java\\\n    Image|endswith: \\bin\\jp2launcher.exe\n    CommandLine|contains: ' -ma '\n  condition: all of selection* and not 1 of filter_*\nfalsepositives:\n- Administrative activity\n- Scripts and administrative tools used in the monitored environment\n- Monitoring activity\nlevel: high",
    "expected_rule": "title: Suspicious SYSTEM User Process Creation\nid: 2617e7ed-adb7-40ba-b0f3-8f9945fe6c09\nstatus: test\ndescription: Detects a suspicious process creation as SYSTEM user (suspicious program or command line parameter)\nreferences:\n    - Internal Research\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Florian Roth (Nextron Systems), David ANDRE (additional keywords)\ndate: 2021-12-20\nmodified: 2024-12-01\ntags:\n    - attack.credential-access\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1134\n    - attack.t1003\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_special:\n        - Image|endswith:\n              - '\\calc.exe'\n              - '\\cscript.exe'\n              - '\\forfiles.exe'\n              - '\\hh.exe'\n              - '\\mshta.exe'\n              - '\\ping.exe'\n              - '\\wscript.exe'\n        - CommandLine|contains:\n              # - 'sc stop ' # stops a system service # causes FPs\n              - ' -NoP '  # Often used in malicious PowerShell commands\n              - ' -W Hidden '  # Often used in malicious PowerShell commands\n              - ' -decode '  # Used with certutil\n              - ' /decode '  # Used with certutil\n              - ' /urlcache '  # Used with certutil\n              - ' -urlcache '  # Used with certutil\n              - ' -e* JAB'  # PowerShell encoded commands\n              - ' -e* SUVYI'  # PowerShell encoded commands\n              - ' -e* SQBFAFgA'  # PowerShell encoded commands\n              - ' -e* aWV4I'  # PowerShell encoded commands\n              - ' -e* IAB'  # PowerShell encoded commands\n              - ' -e* PAA'  # PowerShell encoded commands\n              - ' -e* aQBlAHgA'  # PowerShell encoded commands\n              - 'vssadmin delete shadows'  # Ransomware\n              - 'reg SAVE HKLM'  # save registry SAM - syskey extraction\n              - ' -ma '  # ProcDump\n              - 'Microsoft\\Windows\\CurrentVersion\\Run'  # Run key in command line - often in combination with REG ADD\n              - '.downloadstring('  # PowerShell download command\n              - '.downloadfile('  # PowerShell download command\n              - ' /ticket:'  # Rubeus\n              - 'dpapi::'     # Mimikatz\n              - 'event::clear'        # Mimikatz\n              - 'event::drop'     # Mimikatz\n              - 'id::modify'      # Mimikatz\n              - 'kerberos::'       # Mimikatz\n              - 'lsadump::'      # Mimikatz\n              - 'misc::'     # Mimikatz\n              - 'privilege::'       # Mimikatz\n              - 'rpc::'      # Mimikatz\n              - 'sekurlsa::'       # Mimikatz\n              - 'sid::'        # Mimikatz\n              - 'token::'      # Mimikatz\n              - 'vault::cred'     # Mimikatz\n              - 'vault::list'     # Mimikatz\n              - ' p::d '  # Mimikatz\n              - ';iex('  # PowerShell IEX\n              - 'MiniDump'  # Process dumping method apart from procdump\n              - 'net user '\n    filter_main_ping:\n        CommandLine|contains|all:\n            - 'ping'\n            - '127.0.0.1'\n            - ' -n '\n    filter_vs:\n        Image|endswith: '\\PING.EXE'\n        ParentCommandLine|contains: '\\DismFoDInstall.cmd'\n    filter_config_mgr:\n        ParentImage|contains: ':\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_java:\n        ParentImage|contains:\n            - ':\\Program Files (x86)\\Java\\'\n            - ':\\Program Files\\Java\\'\n        ParentImage|endswith: '\\bin\\javaws.exe'\n        Image|contains:\n            - ':\\Program Files (x86)\\Java\\'\n            - ':\\Program Files\\Java\\'\n        Image|endswith: '\\bin\\jp2launcher.exe'\n        CommandLine|contains: ' -ma '\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Administrative activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates near-identical detection capabilities to the EXPECTED rule with exact matches in critical detection logic including IntegrityLevel checks, User context, suspicious process patterns, command line parameters, encoded PowerShell commands, Mimikatz modules, and comprehensive filter conditions for legitimate activities. The only notable difference is in formatting and comments, which don't impact detection effectiveness.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding descriptive comments for detection patterns and maintaining consistent YAML formatting to improve rule maintainability, though detection effectiveness is essentially equivalent to the expected rule."
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
    "generated_rule": "title: Suspicious Ordinal Call to ShellExec_RunDLL\nid: 9f8b7c2e-4d3a-4f8b-9a2e-123456789abc\nstatus: test\ndescription: Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands, potentially bypassing existing detections.\nreferences:\n- Internal Research\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n  - Image|endswith: \\rundll32.exe\n  - OriginalFileName: RUNDLL32.EXE\n  - CommandLine|contains: rundll32\n  selection_ordinal:\n    CommandLine|contains|all:\n    - 'SHELL32.DLL'\n    - '#60'  # Ordinal number for ShellExec_RunDLL\n  condition: all of selection_*\nfalsepositives:\n- Unknown\nlevel: high\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_rundll32_suspicious_ordinal_shellexec.yml",
    "expected_rule": "title: Suspicious ShellExec_RunDLL Call Via Ordinal\nid: 8823e85d-31d8-473e-b7f4-92da070f0fc6\nrelated:\n    - id: d87bd452-6da1-456e-8155-7dc988157b7d\n      type: derived\nstatus: experimental\ndescription: |\n    Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\n    Adversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\nreferences:\n    - https://redcanary.com/blog/raspberry-robin/\n    - https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/\n    - https://github.com/SigmaHQ/sigma/issues/1009\n    - https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_img:\n        ParentCommandLine|contains: 'SHELL32.DLL'\n    selection_parent_ordinal:\n        ParentCommandLine|contains:\n            # Note: The ordinal number may differ depending on the DLL version\n            # Example: rundll32 SHELL32.DLL,#572 \"cmd.exe\" \"/c calc.exe\"\n            - '#568'\n            - '#570'\n            - '#572'\n            - '#576'\n    selection_susp_cli_parent:\n        # Note: Add additional binaries and suspicious paths to increase coverage\n        - ParentCommandLine|contains:\n              - 'comspec'\n              - 'iex'\n              - 'Invoke-'\n              - 'msiexec'\n              - 'odbcconf'\n              - 'regsvr32'\n        - ParentCommandLine|contains:\n              - '\\Desktop\\'\n              - '\\ProgramData\\'\n              - '\\Temp\\'\n              - '\\Users\\Public\\'\n    selection_susp_child_img:\n        Image|endswith:\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: all of selection_parent_* and 1 of selection_susp_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.40892308706140235,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.41,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule: it only looks for ordinal #60 while missing other known ordinals (#568,#570,#572,#576), lacks parent process context, misses suspicious child process detection, and doesn't monitor suspicious paths or PowerShell commands that are crucial for comprehensive detection of this technique. The simpler detection logic makes it more prone to evasion.",
        "criteria_scores": {
          "detection_effectiveness": 0.4,
          "false_positive_control": 0.45
        },
        "improvement_synopsis": "Add multiple ordinal number variations, implement parent/child process relationship checks, include suspicious path and command monitoring, add known suspicious child process images, and incorporate PowerShell/command execution patterns to match the comprehensiveness of the expected rule."
      }
    },
    "overall_score": 0.6752307717653505,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
    "generated_rule": "title: Potential SquiblyTwo Technique Execution with Renamed WMIC\nid: 9f2b7c3e-4d5a-4f8b-9a2e-3c9f4e8b7d2a\nstatus: test\ndescription: Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields\nreferences:\n- https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html\n- https://twitter.com/mattifestation/status/986280382042595328\n- https://atomicredteam.io/defense-evasion/T1220/\n- https://lolbas-project.github.io/lolbas/Binaries/Wmic/\nauthor: Markus Neis, Florian Roth\ndate: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.t1047\n- attack.t1220\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_pe:\n    Image|endswith: \\wmic.exe\n    OriginalFileName: wmic.exe\n    Hashes|contains:\n    - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n    - IMPHASH=37777A96245A3C74EB217308F3546F4C\n    - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\n  selection_cli:\n    CommandLine|contains|all:\n    - 'format:'\n    - http\n  condition: all of selection_*\nfalsepositives:\n- Unknown\nlevel: medium",
    "expected_rule": "title: Potential SquiblyTwo Technique Execution\nid: 8d63dadf-b91b-4187-87b6-34a1114577ea\nstatus: test\ndescription: Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields\nreferences:\n    - https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html\n    - https://twitter.com/mattifestation/status/986280382042595328 # Deleted\n    - https://atomicredteam.io/defense-evasion/T1220/\n    - https://lolbas-project.github.io/lolbas/Binaries/Wmic/\nauthor: Markus Neis, Florian Roth\ndate: 2019-01-16\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.t1047\n    - attack.t1220\n    - attack.execution\n    - attack.t1059.005\n    - attack.t1059.007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n        - Hashes|contains:  # Sysmon field hashes contains all types\n              - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n              - IMPHASH=37777A96245A3C74EB217308F3546F4C\n              - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\n    selection_cli:\n        CommandLine|contains|all:\n            - 'format:'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.09579606440071553,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same process creation monitoring, WMIC execution patterns, IMPHASHes, and command line parameters as the EXPECTED rule, with only cosmetic YAML formatting differences that do not impact detection capability or precision",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No significant improvements needed as both rules are functionally equivalent - only minor YAML formatting standardization could be applied to match the EXPECTED rule's style"
      }
    },
    "overall_score": 0.7589490161001788,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
    "generated_rule": "title: HackTool - Impersonate Tool Execution\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: test\ndescription: Detects execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely or interactively.\nreferences:\n- https://sensepost.com/blog/2022/abusing-windows-tokens-to-compromise-active-directory-without-touching-lsass/\n- https://github.com/sensepost/impersonate\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.privilege-escalation\n- attack.defense-evasion\n- attack.t1134.001\n- attack.t1134.003\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection_commandline:\n    CommandLine|contains:\n    - 'impersonate.exe'\n    - ' list '\n    - ' exec '\n    - ' adduser '\n  selection_hash:\n    Hashes|contains:\n    - MD5=9520714AB576B0ED01D1513691377D01\n    - SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A\n    - IMPHASH=0A358FFC1697B7A07D0E817AC740DF62\n  condition: selection_commandline or selection_hash\nfalsepositives:\n- Unknown\nlevel: medium",
    "expected_rule": "title: HackTool - Impersonate Execution\nid: cf0c254b-22f1-4b2b-8221-e137b3c0af94\nstatus: test\ndescription: Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively\nreferences:\n    - https://sensepost.com/blog/2022/abusing-windows-tokens-to-compromise-active-directory-without-touching-lsass/\n    - https://github.com/sensepost/impersonate\nauthor: Sai Prashanth Pulisetti @pulisettis\ndate: 2022-12-21\nmodified: 2024-11-23\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1134.001\n    - attack.t1134.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or selection_hash\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.12200634084290585,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.83,
        "reasoning": "The GENERATED rule has nearly identical detection capabilities with a key difference in the condition logic - using 'or' between commandline selections instead of 'all of selection_commandline_*' which could potentially allow for more false positives by matching single components rather than requiring both exe and options to be present, though core detection elements (hashes, command parameters, and basic structure) are properly preserved",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Modify condition logic to use 'all of selection_commandline_*' instead of simple 'or' between selections to ensure both executable name and command options are present for more precise detection while maintaining the existing hash-based alternative path"
      }
    },
    "overall_score": 0.7295015852107264,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of IOX - a tool for port forwarding and intranet proxy purposes",
    "generated_rule": "title: IOX Tunneling Tool Execution Detection\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects the execution of IOX, a tool used for port forwarding and intranet proxy purposes.\nreferences:\n- https://github.com/EddieIvan01/iox\nauthor: Your Name\ndate: 2023-10-01\nmodified: 2023-10-01\ntags:\n- attack.command-and-control\n- attack.t1090\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_image:\n    Image|endswith: \\iox.exe\n  selection_commandline:\n    CommandLine|contains:\n    - 'fwd -l'\n    - 'fwd -r'\n    - 'proxy -l'\n    - 'proxy -r'\n  selection_hashes:\n    Hashes|contains:\n    - MD5=9DB2D314DD3F704A02051EF5EA210993\n    - SHA1=039130337E28A6623ECF9A0A3DA7D92C5964D8DD\n    - SHA256=C6CF82919B809967D9D90EA73772A8AA1C1EB3BC59252D977500F64F1A0D6731\n  condition: 1 of selection_*\nfalsepositives:\n- Legitimate use in controlled environments\nlevel: high",
    "expected_rule": "title: PUA- IOX Tunneling Tool Execution\nid: d7654f02-e04b-4934-9838-65c46f187ebc\nstatus: test\ndescription: Detects the use of IOX - a tool for port forwarding and intranet proxy purposes\nreferences:\n    - https://github.com/EddieIvan01/iox\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-10-08\nmodified: 2024-11-23\ntags:\n    - attack.command-and-control\n    - attack.t1090\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\iox.exe'\n    selection_commandline:\n        CommandLine|contains:\n            - '.exe fwd -l '\n            - '.exe fwd -r '\n            - '.exe proxy -l '\n            - '.exe proxy -r '\n    selection_hashes:\n        # v0.4\n        Hashes|contains:\n            - \"MD5=9DB2D314DD3F704A02051EF5EA210993\"\n            - \"SHA1=039130337E28A6623ECF9A0A3DA7D92C5964D8DD\"\n            - \"SHA256=C6CF82919B809967D9D90EA73772A8AA1C1EB3BC59252D977500F64F1A0D6731\"\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.10475430775343542,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.89,
        "reasoning": "The GENERATED rule maintains nearly identical detection capabilities with the EXPECTED rule, including matching hash values, process names, and command line parameters, with only minor differences in the command line detection patterns (missing '.exe' prefix which could slightly impact detection in edge cases), but core detection logic and hash-based identification remain equivalent",
        "criteria_scores": {
          "detection_effectiveness": 0.85,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Add '.exe' prefix to command line detection patterns to match EXPECTED rule's more precise command line matching, though current implementation remains highly effective for typical IOX tool usage scenarios"
      }
    },
    "overall_score": 0.7431885769383588,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.\nAutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.\nAttackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.\n",
    "generated_rule": "title: Renamed AutoIt Execution Detection\nid: 9b2f4e3a-7c8b-4d3a-9f3e-2b5e4f8c9d7a\nstatus: stable\ndescription: Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe. AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks. A renamed AutoIt executable is particularly suspicious.\nreferences:\n- https://www.autoitscript.com/site/\nauthor: Cybersecurity Analyst\ndate: 2023-10-25\ntags:\n- attack.defense-evasion\n- attack.t1027\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_commandline:\n    CommandLine|contains:\n    - ' /AutoIt3ExecuteScript'\n    - ' /ErrorStdOut'\n  selection_hashes:\n    Hashes|contains:\n    - IMPHASH=FDC554B3A8683918D731685855683DDF\n    - IMPHASH=CD30A61B60B3D60CECDB034C8C83C290\n    - IMPHASH=F8A00C72F2D667D2EDBB234D0C0AE000\n  selection_originalfilename:\n    OriginalFileName:\n    - AutoIt3.exe\n    - AutoIt2.exe\n    - AutoIt.exe\n  filter_legit_name:\n    Image|endswith:\n    - \\AutoIt.exe\n    - \\AutoIt2.exe\n    - \\AutoIt3_x64.exe\n    - \\AutoIt3.exe\n  condition: 1 of selection_* and not 1 of filter_legit_name\nfalsepositives:\n- Legitimate use of renamed AutoIt executables\nlevel: high",
    "expected_rule": "title: Renamed AutoIt Execution\nid: f4264e47-f522-4c38-a420-04525d5b880f\nstatus: test\ndescription: |\n    Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.\n    AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.\n    Attackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.\nreferences:\n    - https://twitter.com/malmoeb/status/1665463817130725378?s=12&t=C0_T_re0wRP_NfKa27Xw9w\n    - https://www.autoitscript.com/site/\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-06-04\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.t1027\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' /AutoIt3ExecuteScript'\n            - ' /ErrorStdOut'\n    selection_2:\n        Hashes|contains:\n            - 'IMPHASH=FDC554B3A8683918D731685855683DDF'  # AutoIt v2 - doesn't cover all binaries\n            - 'IMPHASH=CD30A61B60B3D60CECDB034C8C83C290'  # AutoIt v2 - doesn't cover all binaries\n            - 'IMPHASH=F8A00C72F2D667D2EDBB234D0C0AE000'  # AutoIt v3 - doesn't cover all binaries\n    selection_3:\n        OriginalFileName:\n            - 'AutoIt3.exe'\n            - 'AutoIt2.exe'\n            - 'AutoIt.exe'\n    filter_main_legit_name:\n        Image|endswith:\n            - '\\AutoIt.exe'\n            - '\\AutoIt2.exe'\n            - '\\AutoIt3_x64.exe'\n            - '\\AutoIt3.exe'\n    condition: 1 of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.10753933408604821,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains nearly identical detection logic with the same command line arguments, import hashes, original filenames, and filtering conditions as the EXPECTED rule, with only minor structural differences in naming conventions (selection_commandline vs selection_1) and filter naming (filter_legit_name vs filter_main_legit_name) that don't impact detection capability; both rules effectively detect renamed AutoIt executions while properly filtering legitimate instances",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding more detailed comments for import hashes as in the EXPECTED rule and expand the description to include specific malware types (keyloggers, spyware, botnets) for better context, but core detection logic is essentially equivalent"
      }
    },
    "overall_score": 0.755884833521512,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
    "generated_rule": "title: UAC Bypass Using Disk Cleanup\nid: b697e69c-746f-4a86-9f59-7bfff8eab881\nstatus: test\ndescription: Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n    ParentCommandLine: C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using Disk Cleanup\nid: b697e69c-746f-4a86-9f59-7bfff8eab881\nstatus: test\ndescription: Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n        ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in all critical detection aspects - same command line patterns, parent process checks, integrity levels, and conditions. The only differences are cosmetic YAML formatting variations that do not impact detection capability or false positive control.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No functional improvements needed as both rules are equivalent in detection and FP control - only YAML formatting differs in list representations and quotes"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff",
    "generated_rule": "title: Suspicious PCHunter Execution\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: test\ndescription: Detects suspicious use of PCHunter, a tool used to view and manipulate processes, kernel options, and other low-level operations.\nreferences:\n- https://web.archive.org/web/20231210115125/http://www.xuetr.com/\n- https://www.crowdstrike.com/blog/falcon-overwatch-report-finds-increase-in-ecrime/\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1082\n- attack.t1057\n- attack.t1012\n- attack.t1083\n- attack.t1007\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_image:\n    Image|endswith:\n    - \\PCHunter64.exe\n    - \\PCHunter32.exe\n  selection_pe:\n  - OriginalFileName: PCHunter.exe\n  - Description: Epoolsoft Windows Information View Tools\n  selection_hashes:\n    Hashes|contains:\n    - SHA1=5F1CBC3D99558307BC1250D084FA968521482025\n    - MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7\n    - SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32\n    - IMPHASH=444D210CEA1FF8112F256A4997EED7FF\n    - SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB\n    - MD5=228DD0C2E6287547E26FFBD973A40F14\n    - SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C\n    - IMPHASH=0479F44DF47CFA2EF1CCC4416A538663\n  condition: 1 of selection_*\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: HackTool - PCHunter Execution\nid: fca949cc-79ca-446e-8064-01aa7e52ece5\nstatus: test\ndescription: Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff\nreferences:\n    - https://web.archive.org/web/20231210115125/http://www.xuetr.com/\n    - https://www.crowdstrike.com/blog/falcon-overwatch-report-finds-increase-in-ecrime/\n    - https://www.hexacorn.com/blog/2018/04/20/kernel-hacking-tool-you-might-have-never-heard-of-xuetr-pchunter/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali\ndate: 2022-10-10\nmodified: 2024-11-23\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1082\n    - attack.t1057\n    - attack.t1012\n    - attack.t1083\n    - attack.t1007\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic including process names, PE metadata, and hash indicators, identical MITRE ATT&CK tags, and equivalent condition logic - the only notable difference is a missing reference to hexacorn.com blog which does not impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the hexacorn.com reference for completeness, but no functional improvements needed as the detection logic and false positive controls are effectively identical to the expected rule"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence",
    "generated_rule": "title: Suspicious Scheduled Task Creation via Masqueraded XML File\nid: dd2a821e-3b07-4d3b-a9ac-929fe4c6ca0c\nstatus: test\ndescription: Detects the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence.\nreferences:\n- https://learn.microsoft.com/en-us/windows/win32/taskschd/daily-trigger-example--xml-\n- https://github.com/elastic/protections-artifacts/blob/084067123d3328a823b1c3fdde305b694275c794/behavior/rules/persistence_suspicious_scheduled_task_creation_via_masqueraded_xml_file.toml\nauthor: Swachchhanda Shrawan Poudel, Elastic (idea)\ndate: 2023-04-20\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.persistence\n- attack.t1036.005\n- attack.t1053.005\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection_img:\n    Image|endswith: \\schtasks.exe\n    OriginalFileName: schtasks.exe\n  selection_cli_create:\n    CommandLine|contains:\n    - /create\n    - -create\n  selection_cli_xml:\n    CommandLine|contains:\n    - /xml\n    - -xml\n  filter_main_extension_xml:\n    CommandLine|contains: .xml\n  filter_main_system_process:\n    IntegrityLevel:\n    - System\n    - S-1-16-16384\n  filter_main_rundll32:\n    ParentImage|endswith: \\rundll32.exe\n    ParentCommandLine|contains|all:\n    - :\\WINDOWS\\Installer\\MSI\n    - .tmp,zzzzInvokeManagedCustomActionOutOfProc\n  filter_optional_third_party:\n    ParentImage|endswith:\n    - :\\ProgramData\\OEM\\UpgradeTool\\CareCenter_*\\BUnzip\\Setup_msi.exe\n    - :\\Program Files\\Axis Communications\\AXIS Camera Station\\SetupActions.exe\n    - :\\Program Files\\Axis Communications\\AXIS Device Manager\\AdmSetupActions.exe\n    - :\\Program Files (x86)\\Zemana\\AntiMalware\\AntiMalware.exe\n    - :\\Program Files\\Dell\\SupportAssist\\pcdrcui.exe\n  condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n- Unknown\nlevel: medium\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_schtasks_schedule_via_masqueraded_xml_file.yml",
    "expected_rule": "title: Suspicious Scheduled Task Creation via Masqueraded XML File\nid: dd2a821e-3b07-4d3b-a9ac-929fe4c6ca0c\nstatus: test\ndescription: Detects the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence\nreferences:\n    - https://learn.microsoft.com/en-us/windows/win32/taskschd/daily-trigger-example--xml-\n    - https://github.com/elastic/protections-artifacts/blob/084067123d3328a823b1c3fdde305b694275c794/behavior/rules/persistence_suspicious_scheduled_task_creation_via_masqueraded_xml_file.toml\nauthor: Swachchhanda Shrawan Poudel, Elastic (idea)\ndate: 2023-04-20\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1036.005\n    - attack.t1053.005\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\schtasks.exe'\n        - OriginalFileName: 'schtasks.exe'\n    selection_cli_create:\n        CommandLine|contains:\n            - '/create'\n            - '-create'\n    selection_cli_xml:\n        CommandLine|contains:\n            - '/xml'\n            - '-xml'\n    filter_main_extension_xml:\n        CommandLine|contains: '.xml'\n    filter_main_system_process:\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    filter_main_rundll32:\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - ':\\WINDOWS\\Installer\\MSI'\n            - '.tmp,zzzzInvokeManagedCustomActionOutOfProc'\n    filter_optional_third_party:\n        ParentImage|endswith:\n            # Consider removing any tools that you don't use to avoid blind spots\n            - ':\\ProgramData\\OEM\\UpgradeTool\\CareCenter_*\\BUnzip\\Setup_msi.exe'\n            - ':\\Program Files\\Axis Communications\\AXIS Camera Station\\SetupActions.exe'\n            - ':\\Program Files\\Axis Communications\\AXIS Device Manager\\AdmSetupActions.exe'\n            - ':\\Program Files (x86)\\Zemana\\AntiMalware\\AntiMalware.exe'\n            - ':\\Program Files\\Dell\\SupportAssist\\pcdrcui.exe'\n    condition: all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.095082218163824,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in core detection logic, including all critical selection criteria (schtasks.exe execution, /create and /xml flags), filters for legitimate system processes, and third-party application exclusions. The only differences are cosmetic YAML formatting variations that do not impact detection capability or false positive control.",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed; consider adding a comment about reviewing third-party exclusions as seen in the EXPECTED rule to help analysts maintain the rule over time"
      }
    },
    "overall_score": 0.758770554540956,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks",
    "generated_rule": "title: Suspicious Cabinet File Expansion from Uncommon Locations\nid: 3c9f8a2b-7e4b-4d3a-9f2e-8a2d9f3b7c1d\nstatus: test\ndescription: Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, as seen in Iranian MeteorExpress related attacks.\nreferences:\n- https://labs.sentinelone.com/meteorexpress-mysterious-wiper-paralyzes-iranian-trains-with-epic-troll\nauthor: Your Name\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.t1218\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_cmd:\n    Image|endswith: \\expand.exe\n    CommandLine|contains|all:\n    - '-F:'\n    - '.cab'\n  selection_folders:\n    CommandLine|contains:\n    - :\\Perflogs\\\n    - :\\ProgramData\\\n    - :\\Users\\Public\\\n    - :\\Windows\\Temp\\\n    - \\AppData\\Local\\Temp\\\n    - \\AppData\\Roaming\\\n  filter_known:\n    ParentImage: C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\ClickToRun\\OfficeC2RClient.exe\n  condition: selection_cmd and selection_folders and not filter_known\nfalsepositives:\n- Legitimate software installations or updates\nlevel: medium",
    "expected_rule": "title: Potentially Suspicious Cabinet File Expansion\nid: 9f107a84-532c-41af-b005-8d12a607639f\nstatus: test\ndescription: Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks\nreferences:\n    - https://labs.sentinelone.com/meteorexpress-mysterious-wiper-paralyzes-iranian-trains-with-epic-troll\n    - https://blog.malwarebytes.com/threat-intelligence/2021/08/new-variant-of-konni-malware-used-in-campaign-targetting-russia/\nauthor: Bhabesh Raj, X__Junior (Nextron Systems)\ndate: 2021-07-30\nmodified: 2024-11-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\expand.exe'\n        CommandLine|contains|windash: '-F:'\n    selection_folders_1:\n        CommandLine|contains:\n            - ':\\Perflogs\\'\n            - ':\\ProgramData'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\Temp\\'\n            - '\\Admin$\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\C$\\'\n            - '\\Temporary Internet'\n    selection_folders_2:\n        - CommandLine|contains|all:\n              - ':\\Users\\'\n              - '\\Favorites\\'\n        - CommandLine|contains|all:\n              - ':\\Users\\'\n              - '\\Favourites\\'\n        - CommandLine|contains|all:\n              - ':\\Users\\'\n              - '\\Contacts\\'\n    filter_optional_dell:\n        # Launched by Dell ServiceShell.exe\n        ParentImage: 'C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe'\n        CommandLine|contains: 'C:\\ProgramData\\Dell\\UpdateService\\Temp\\'\n    condition: selection_cmd and 1 of selection_folders_* and not 1 of filter_optional_*\nfalsepositives:\n    - System administrator Usage\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1669706375527732,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule captures core detection logic for expand.exe with cabinet files but lacks several important detection paths including Admin$, C$, Temporary Internet folders, and user-specific paths (Favorites/Contacts). The base command detection and common suspicious paths are well-implemented, but missing the 'windash' modifier and additional folder variants reduces detection coverage. Filter logic is more limited, only handling ClickToRun vs. the EXPECTED rule's Dell-specific cases.",
        "criteria_scores": {
          "detection_effectiveness": 0.7,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Add missing suspicious paths (Admin$, C$, Temporary Internet), implement windash modifier for command detection, include user-specific folder combinations (Favorites/Contacts), and consider additional legitimate software filters while maintaining the current strong base detection logic."
      }
    },
    "overall_score": 0.7167426593881933,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
    "generated_rule": "title: ManageEngine Endpoint Central Dctask64.EXE Execution Detection\nid: 9f8b7c2d-3e4a-4b8f-9a2d-1c2f3e4d5b6a\nstatus: stable\ndescription: Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central. This binary can be abused for DLL injection, arbitrary command, and process execution.\nreferences:\n- https://twitter.com/gN3mes1s/status/1222088214581825540\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.t1055.001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\dctask64.exe\n    CommandLine|contains:\n    - ' executecmd64 '\n    - ' invokeexe '\n    - ' injectDll '\n  condition: selection\nfalsepositives:\n- Legitimate use of ManageEngine Endpoint Central\nlevel: high",
    "expected_rule": "title: ManageEngine Endpoint Central Dctask64.EXE Potential Abuse\nid: 6345b048-8441-43a7-9bed-541133633d7a\nstatus: test\ndescription: |\n    Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\n    This binary can be abused for DLL injection, arbitrary command and process execution.\nreferences:\n    - https://twitter.com/gN3mes1s/status/1222088214581825540\n    - https://twitter.com/gN3mes1s/status/1222095963789111296\n    - https://twitter.com/gN3mes1s/status/1222095371175911424\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-28\nmodified: 2025-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1055.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dctask64.exe'\n        - Hashes|contains:\n              - 'IMPHASH=6834B1B94E49701D77CCB3C0895E1AFD'\n              - 'IMPHASH=1BB6F93B129F398C7C4A76BB97450BBA'\n              - 'IMPHASH=FAA2AC19875FADE461C8D89DCF2710A3'\n              - 'IMPHASH=F1039CED4B91572AB7847D26032E6BBF'\n    selection_cli:\n        CommandLine|contains:\n            - ' executecmd64 '\n            - ' invokeexe '\n            - ' injectDll '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.4011727460835033,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule - it lacks hash-based detection (IMPHASH values) which would help catch variants even if command lines are modified, uses single selection group instead of required correlation (all of selection_*), and misses additional reference sources that provide context for detection variants. The detection logic is more permissive due to single condition which could increase false positives.",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add IMPHASH-based detection, implement stricter condition logic using 'all of selection_*', include additional reference sources, and split detection logic into separate selection groups for better correlation requirements"
      }
    },
    "overall_score": 0.7452931865208758,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution GMER tool based on image and hash fields.",
    "generated_rule": "title: GMER Rootkit Detector and Remover Execution\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: Detects the execution of the GMER tool based on image path and known hash values.\nreferences:\n- http://www.gmer.net/\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n    Image|endswith: \n    - \\gmer.exe\n  selection_hash:\n    Hashes|contains:\n    - MD5=E9DC058440D321AA17D0600B3CA0AB04\n    - SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57\n    - SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173\n  condition: 1 of selection_*\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: HackTool - GMER Rootkit Detector and Remover Execution\nid: 9082ff1f-88ab-4678-a3cc-5bcff99fc74d\nstatus: test\ndescription: Detects the execution GMER tool based on image and hash fields.\nreferences:\n    - http://www.gmer.net/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-10-05\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\gmer.exe'\n    selection_sysmon_hash:\n        Hashes|contains:\n            - 'MD5=E9DC058440D321AA17D0600B3CA0AB04'\n            - 'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57'\n            - 'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.023405338238748796,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same image path detection, hash values, and condition logic as the EXPECTED rule, with only cosmetic differences in the selection_hash vs selection_sysmon_hash naming and minor metadata variations that don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adopting the more descriptive title prefix 'HackTool -' and the more specific selection_sysmon_hash naming convention for better rule organization, though these changes are stylistic rather than functional improvements"
      }
    },
    "overall_score": 0.7408513345596872,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)",
    "generated_rule": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentImage|endswith: \\pkgmgr.exe\n    Image|endswith: \\dism.exe\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using PkgMgr and DISM\nid: a743ceba-c771-4d75-97eb-8a90f7f4844c\nstatus: test\ndescription: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pkgmgr.exe'\n        Image|endswith: '\\dism.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in terms of core detection logic, matching exactly on critical fields (ParentImage, Image, IntegrityLevel) with the same values and conditions; the only differences are cosmetic in YAML formatting (quotes and indentation) which do not impact detection capability or false positive control",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed; optional enhancement would be to add comments explaining the SID values for IntegrityLevel as seen in the EXPECTED rule for better maintainability"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of \"Setup16.EXE\" and old installation utility with a custom \".lst\" file.\nThese \".lst\" file can contain references to external program that \"Setup16.EXE\" will execute.\nAttackers and adversaries might leverage this as a living of the land utility.\n",
    "generated_rule": "title: Execution of Setup16.EXE with Custom .lst File\nid: 9f8b7c2e-4d3a-4f8b-9c2e-1a2b3c4d5e6f\nstatus: test\ndescription: Detects the execution of Setup16.EXE, an old installation utility, with a custom \".lst\" file. These \".lst\" files can contain references to external programs that Setup16.EXE will execute, potentially used by attackers as a living-off-the-land technique.\nauthor: Your Name\ndate: 2023-11-09\ntags:\n- attack.execution\n- attack.t1218\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\Setup16.EXE\n    CommandLine|contains: .lst\n  condition: selection\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nfalsepositives:\n- Legitimate software installations using Setup16.EXE with .lst files\nlevel: medium\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_setup16_lst_execution.yml",
    "expected_rule": "title: Setup16.EXE Execution With Custom .Lst File\nid: 99c8be4f-3087-4f9f-9c24-8c7e257b442e\nstatus: experimental\ndescription: |\n    Detects the execution of \"Setup16.EXE\" and old installation utility with a custom \".lst\" file.\n    These \".lst\" file can contain references to external program that \"Setup16.EXE\" will execute.\n    Attackers and adversaries might leverage this as a living of the land utility.\nreferences:\n    - https://www.hexacorn.com/blog/2024/10/12/the-sweet16-the-oldbin-lolbin-called-setup16-exe/\nauthor: frack113\ndate: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1574.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage: 'C:\\Windows\\SysWOW64\\setup16.exe'\n        ParentCommandLine|contains: ' -m '\n    filter_optional_valid_path:\n        Image|startswith: 'C:\\~MSSETUP.T\\'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - On modern Windows system, the \"Setup16\" utility is practically never used, hence false positive should be very rare.\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3206405493639536,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.55,
        "reasoning": "The GENERATED rule has significant detection gaps compared to the EXPECTED rule - it uses a generic Image path match vs specific ParentImage path, lacks the critical '-m' command line parameter check, and doesn't include the legitimate path filter. The GENERATED rule's broader Image match could catch some variants but misses key specificity that helps identify actual abuse patterns.",
        "criteria_scores": {
          "detection_effectiveness": 0.5,
          "false_positive_control": 0.6
        },
        "improvement_synopsis": "Add specific ParentImage path 'C:\\Windows\\SysWOW64\\setup16.exe', include '-m' parameter detection, implement filter for legitimate MSSETUP.T paths, and consider adding reference documentation to support analysis."
      }
    },
    "overall_score": 0.6951601373409884,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
    "generated_rule": "title: Detect CreateMiniDump Hack Tool Usage\nid: 7f3b9c2e-4f2b-4e3a-9f3d-2b8f9c3e4d5f\nstatus: test\ndescription: Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine\nreferences:\n- https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsass-passwords-without-mimikatz-minidumpwritedump-av-signature-bypass\nauthor: Your Name\ndate: 2023-11-30\ntags:\n- attack.credential-access\n- attack.t1003.001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\CreateMiniDump.exe\n    Hashes|contains: IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: HackTool - CreateMiniDump Execution\nid: 36d88494-1d43-4dc0-b3fa-35c8fea0ca9d\nstatus: test\ndescription: Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine\nreferences:\n    - https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsass-passwords-without-mimikatz-minidumpwritedump-av-signature-bypass\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-12-22\nmodified: 2024-11-23\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\CreateMiniDump.exe'\n        - Hashes|contains: 'IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.06560730593607311,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic including the same Image path and IMPHASH conditions, identical logsource configuration, appropriate severity level, and matching MITRE ATT&CK tags - the only differences are cosmetic (ID, author, dates) which don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No significant improvements needed as detection logic matches the expected rule; minor suggestion would be to add the modified date field for version tracking purposes but this doesn't impact detection capability"
      }
    },
    "overall_score": 0.7514018264840183,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects suspicious print spool service (spoolsv.exe) child processes.",
    "generated_rule": "title: Suspicious Print Spool Service Child Processes\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: Detects suspicious child processes spawned by the print spool service (spoolsv.exe), which may indicate malicious activity.\nreferences:\n- https://attack.mitre.org/techniques/T1068/\nauthor: Your Name\ndate: 2023-10-01\nmodified: 2023-10-01\ntags:\n- attack.execution\n- attack.t1203\n- attack.privilege-escalation\n- attack.t1068\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentImage|endswith: \\spoolsv.exe\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\rundll32.exe\n    - \\wmic.exe\n    - \\certutil.exe\n    - \\mshta.exe\n    - \\regsvr32.exe\n    - \\bitsadmin.exe\n    - \\curl.exe\n    - \\wget.exe\n  filter:\n    CommandLine|contains:\n    - .spl\n    - route add\n    - program files\n    - add portopening\n    - rule name\n  condition: selection and not filter\nfields:\n- Image\n- CommandLine\n- ParentImage\nfalsepositives:\n- Legitimate administration activity\nlevel: high",
    "expected_rule": "title: Suspicious Spool Service Child Process\nid: dcdbc940-0bff-46b2-95f3-2d73f848e33b\nstatus: test\ndescription: Detects suspicious print spool service (spoolsv.exe) child processes.\nreferences:\n    - https://github.com/microsoft/Microsoft-365-Defender-Hunting-Queries/blob/efa17a600b43c897b4b7463cc8541daa1987eeb4/Exploits/Print%20Spooler%20RCE/Suspicious%20Spoolsv%20Child%20Process.md\nauthor: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)\ndate: 2021-07-11\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.t1203\n    - attack.privilege-escalation\n    - attack.t1068\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel:\n            - 'System'\n            - 'S-1-16-16384'\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.40951269108119126,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED: lacks IntegrityLevel checks which are crucial for privilege escalation detection, missing key suspicious binaries (gpupdate.exe, nltest.exe, sc.exe, etc.), simpler condition logic that could miss complex attack chains, and lacks OriginalFileName validation for rundll32 which helps prevent bypass; however it does capture core suspicious processes and has basic filter conditions",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add IntegrityLevel validation, expand suspicious binary coverage to match EXPECTED rule, implement more granular condition logic with separate detection blocks, add OriginalFileName checks, and enhance rundll32 detection with both image and command-line validation"
      }
    },
    "overall_score": 0.7473781727702977,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
    "generated_rule": "title: Renamed AdFind Execution Detection\nid: 3b7f9c2e-8f4b-4d3a-9f3b-2c9f4e6a7b1c\nstatus: stable\ndescription: Detects the use of a renamed Adfind.exe, commonly used in breaches for domain trust discovery.\nreferences:\n- https://www.joeware.net/freetools/tools/adfind/\n- https://thedfirreport.com/2020/05/08/adfind-recon/\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.discovery\n- attack.t1018\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_commandline:\n    CommandLine|contains:\n    - domainlist\n    - trustdmp\n    - dcmodes\n    - adinfo\n    - ' dclist '\n    - computer_pwdnotreqd\n    - objectcategory=\n    - -subnets -f\n    - name=\"Domain Admins\"\n    - '-sc u:'\n    - domainncs\n    - dompol\n    - ' oudmp '\n    - subnetdmp\n    - gpodmp\n    - fspdmp\n    - users_noexpire\n    - computers_active\n    - computers_pwdnotreqd\n  selection_hash:\n    Hashes|contains:\n    - IMPHASH=BCA5675746D13A1F246E2DA3C2217492\n    - IMPHASH=53E117A96057EAF19C41380D0E87F1C2\n  selection_filename:\n    OriginalFileName: AdFind.exe\n  filter:\n    Image|endswith: \\AdFind.exe\n  condition: 1 of selection_commandline or 1 of selection_hash or 1 of selection_filename and not filter\nfalsepositives:\n- Legitimate administrative use of renamed AdFind\nlevel: high",
    "expected_rule": "title: Renamed AdFind Execution\nid: df55196f-f105-44d3-a675-e9dfb6cc2f2b\nstatus: test\ndescription: Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://thedfirreport.com/2020/05/08/adfind-recon/\n    - https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-21\nmodified: 2024-11-23\ntags:\n    - attack.discovery\n    - attack.t1018\n    - attack.t1087.002\n    - attack.t1482\n    - attack.t1069.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'domainlist'\n            - 'trustdmp'\n            - 'dcmodes'\n            - 'adinfo'\n            - ' dclist '\n            - 'computer_pwdnotreqd'\n            - 'objectcategory='\n            - '-subnets -f'\n            - 'name=\"Domain Admins\"'\n            - '-sc u:'\n            - 'domainncs'\n            - 'dompol'\n            - ' oudmp '\n            - 'subnetdmp'\n            - 'gpodmp'\n            - 'fspdmp'\n            - 'users_noexpire'\n            - 'computers_active'\n            - 'computers_pwdnotreqd'\n    selection_2:\n        Hashes|contains:\n            - 'IMPHASH=BCA5675746D13A1F246E2DA3C2217492'\n            - 'IMPHASH=53E117A96057EAF19C41380D0E87F1C2'\n    selection_3:\n        OriginalFileName: 'AdFind.exe'\n    filter:\n        Image|endswith: '\\AdFind.exe'\n    condition: 1 of selection* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.11708757154522387,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule closely mirrors the EXPECTED rule with identical detection logic across command line arguments, import hashes, and filename checks, using the same condition logic (1 of selection* and not filter) and maintaining equivalent false positive controls through the Image filter - the only meaningful differences are in metadata fields rather than detection capability",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional reference URLs from the expected rule to provide better context, and potentially update the status from 'stable' to 'test' to match the expected rule's more conservative classification"
      }
    },
    "overall_score": 0.7582718928863059,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
    "generated_rule": "title: HackTool - LocalPotato Execution\nid: 6bd75993-9888-4f91-9404-e1e4e4e34b77\nstatus: test\ndescription: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples\nreferences:\n- https://www.localpotato.com/localpotato_html/LocalPotato.html\n- https://github.com/decoder-it/LocalPotato\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\nmodified: 2024-11-23\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- cve.2023-21746\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n    Image|endswith: \\LocalPotato.exe\n  selection_cli:\n    CommandLine|contains|all:\n    - .exe -i C:\\\n    - -o Windows\\\n  selection_hash_plain:\n    Hashes|contains:\n    - IMPHASH=E1742EE971D6549E8D4D81115F88F1FC\n    - IMPHASH=DD82066EFBA94D7556EF582F247C8BB5\n  condition: 1 of selection_*\nfalsepositives:\n- Unlikely\nlevel: high\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_hktl_localpotato.yml",
    "expected_rule": "title: HackTool - LocalPotato Execution\nid: 6bd75993-9888-4f91-9404-e1e4e4e34b77\nstatus: test\ndescription: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples\nreferences:\n    - https://www.localpotato.com/localpotato_html/LocalPotato.html\n    - https://github.com/decoder-it/LocalPotato\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-02-14\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - cve.2023-21746\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\LocalPotato.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '.exe -i C:\\'\n            - '-o Windows\\'\n    selection_hash_plain:\n        Hashes|contains:\n            - 'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC'\n            - 'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in terms of detection logic, containing the same exact detection patterns for LocalPotato.exe execution including image path matching, command line arguments, and IMPHASH values; the only differences are cosmetic in YAML formatting (quotes and indentation) which do not impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed as both rules are equivalent in detection capability; minor YAML formatting standardization could be applied for consistency but would not impact effectiveness"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.",
    "generated_rule": "title: PUA - Nimgrab Execution\nid: 74a12f18-505c-4114-8d0b-8448dd5485c6\nstatus: test\ndescription: Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/28d190330fe44de6ff4767fc400cc10fa7cd6540/atomics/T1105/T1105.md\nauthor: frack113\ndate: 2022-08-28\nmodified: 2024-11-23\ntags:\n- attack.command-and-control\n- attack.t1105\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_image:\n    Image|endswith: \\nimgrab.exe\n  selection_hashes:\n    Hashes|contains:\n    - MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n    - SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n    - IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45\n  condition: 1 of selection_*\nfalsepositives:\n- Legitimate use of Nim on a developer systems\nlevel: high",
    "expected_rule": "title: PUA - Nimgrab Execution\nid: 74a12f18-505c-4114-8d0b-8448dd5485c6\nstatus: test\ndescription: Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/28d190330fe44de6ff4767fc400cc10fa7cd6540/atomics/T1105/T1105.md\nauthor: frack113\ndate: 2022-08-28\nmodified: 2024-11-23\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\nimgrab.exe'\n    selection_hashes:\n        Hashes|contains:\n            - MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n            - SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n            - IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of Nim on a developer systems\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.013136889979010746,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule with only cosmetic differences in YAML formatting - both rules detect nimgrab.exe execution using the same Image path and hash indicators, employ identical condition logic '1 of selection_*', and maintain the same false positive controls through specific hash matching and clear documentation of legitimate developer usage",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No significant improvements needed as the rules are functionally equivalent - the only differences are in YAML formatting style (array notation) which does not impact detection capability or false positive rates"
      }
    },
    "overall_score": 0.7382842224947526,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
    "generated_rule": "title: UAC Bypass Using NTFS Reparse Point and Wusa.exe DLL Hijacking\nid: 8a7b9c2d-3f4e-4d5b-9c2e-1a2b3c4d5e6f\nstatus: test\ndescription: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection1:\n    CommandLine|startswith: '\"C:\\Windows\\system32\\wusa.exe\" /quiet C:\\Users\\'\n    CommandLine|endswith: \\AppData\\Local\\Temp\\update.msu\n    IntegrityLevel:\n    - High\n    - System\n  selection2:\n    ParentImage|endswith: \\dism.exe\n    CommandLine|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\Temp\\\n    - \\dismhost.exe\n    IntegrityLevel:\n    - High\n    - System\n  condition: 1 of selection*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using NTFS Reparse Point - Process\nid: 39ed3c80-e6a1-431b-9df3-911ac53d08a7\nstatus: test\ndescription: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|startswith: '\"C:\\Windows\\system32\\wusa.exe\"  /quiet C:\\Users\\'\n        CommandLine|endswith: '\\AppData\\Local\\Temp\\update.msu'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    selection2:\n        ParentCommandLine: '\"C:\\Windows\\system32\\dism.exe\" /online /quiet /norestart /add-package /packagepath:\"C:\\Windows\\system32\\pe386\" /ignorecheck'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\dismhost.exe {'\n        Image|endswith: '\\DismHost.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.13836238902340592,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.83,
        "reasoning": "The GENERATED rule captures core attack patterns with selection1 and selection2 matching key process behaviors, but lacks some specificity in selection2 compared to EXPECTED rule - notably missing the specific ParentCommandLine pattern and the Image field check for DismHost.exe, though it maintains good high-level detection through IntegrityLevel and command line patterns",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Add specific ParentCommandLine pattern for dism.exe, include Image field check for DismHost.exe, and consider adding SID-based IntegrityLevel checks (S-1-16-16384, S-1-16-12288) to match EXPECTED rule's granularity"
      }
    },
    "overall_score": 0.7335905972558514,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent",
    "generated_rule": "title: Detection of PPID Spoofing Tools Execution\nid: 8b7f9c3e-2d4b-4f8b-9f3e-1a2f3b4c5d6e\nstatus: stable\ndescription: Detects the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent\nreferences:\n- https://pentestlab.blog/2020/02/24/parent-pid-spoofing/\n- https://www.picussecurity.com/resource/blog/how-to-detect-parent-pid-ppid-spoofing-attacks\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.t1134.004\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \n    - \\SelectMyParent.exe\n    CommandLine|contains:\n    - PPID-spoof\n    - ppid_spoof\n    - spoof-ppid\n    - spoof_ppid\n    - ppidspoof\n    - spoofppid\n    - spoofedppid\n    - ' -spawnto '\n    OriginalFileName|contains:\n    - PPID-spoof\n    - ppid_spoof\n    - spoof-ppid\n    - spoof_ppid\n    - ppidspoof\n    - spoofppid\n    - spoofedppid\n    Description: SelectMyParent\n    Hashes|contains:\n    - IMPHASH=04D974875BD225F00902B4CAD9AF3FBC\n    - IMPHASH=A782AF154C9E743DDF3F3EB2B8F3D16E\n    - IMPHASH=89059503D7FBF470E68F7E63313DA3AD\n    - IMPHASH=CA28337632625C8281AB8A130B3D6BAD\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: HackTool - PPID Spoofing SelectMyParent Tool Execution\nid: 52ff7941-8211-46f9-84f8-9903efb7077d\nstatus: test\ndescription: Detects the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent\nreferences:\n    - https://pentestlab.blog/2020/02/24/parent-pid-spoofing/\n    - https://www.picussecurity.com/resource/blog/how-to-detect-parent-pid-ppid-spoofing-attacks\n    - https://www.ired.team/offensive-security/defense-evasion/parent-process-id-ppid-spoofing\n    - https://www.virustotal.com/gui/search/filename%253A*spoof*%2520filename%253A*ppid*/files\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-07-23\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.t1134.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SelectMyParent.exe'\n        - CommandLine|contains:\n              - 'PPID-spoof'\n              - 'ppid_spoof'\n              - 'spoof-ppid'\n              - 'spoof_ppid'\n              - 'ppidspoof'\n              - 'spoofppid'\n              - 'spoofedppid'\n              - ' -spawnto '\n        - OriginalFileName|contains:\n              - 'PPID-spoof'\n              - 'ppid_spoof'\n              - 'spoof-ppid'\n              - 'spoof_ppid'\n              - 'ppidspoof'\n              - 'spoofppid'\n              - 'spoofedppid'\n        - Description: 'SelectMyParent'\n        - Hashes|contains:\n              - 'IMPHASH=04D974875BD225F00902B4CAD9AF3FBC'\n              - 'IMPHASH=A782AF154C9E743DDF3F3EB2B8F3D16E'\n              - 'IMPHASH=89059503D7FBF470E68F7E63313DA3AD'\n              - 'IMPHASH=CA28337632625C8281AB8A130B3D6BAD'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.08479005395261552,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule, containing the same critical detection logic including Image paths, CommandLine patterns, OriginalFileName matches, Description fields, and specific IMPHASH values; the only notable differences are in metadata fields (status, references) which don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the additional reference URL for ired.team and virustotal to provide more comprehensive threat intelligence context, though this is purely documentation-related and doesn't affect detection capability"
      }
    },
    "overall_score": 0.7561975134881538,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.",
    "generated_rule": "title: PUA - Fast Reverse Proxy (FRP) Execution\nid: 32410e29-5f94-4568-b6a3-d91a8adad863\nstatus: test\ndescription: Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.\nreferences:\n- https://asec.ahnlab.com/en/38156/\n- https://github.com/fatedier/frp\nauthor: frack113, Florian Roth\ndate: 2022-09-02\nmodified: 2024-11-23\ntags:\n- attack.command-and-control\n- attack.t1090\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n    Image|endswith:\n    - \\frpc.exe\n    - \\frps.exe\n  selection_cli:\n    CommandLine|contains: \\frpc.ini\n  selection_hashes:\n    Hashes|contains:\n    - MD5=7D9C233B8C9E3F0EA290D2B84593C842\n    - SHA1=06DDC9280E1F1810677935A2477012960905942F\n    - SHA256=57B0936B8D336D8E981C169466A15A5FD21A7D5A2C7DAF62D5E142EE860E387C\n  condition: 1 of selection_*\nfalsepositives:\n- Legitimate use\nlevel: high\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_pua_frp.yml",
    "expected_rule": "title: PUA - Fast Reverse Proxy (FRP) Execution\nid: 32410e29-5f94-4568-b6a3-d91a8adad863\nstatus: test\ndescription: Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.\nreferences:\n    - https://asec.ahnlab.com/en/38156/\n    - https://github.com/fatedier/frp\nauthor: frack113, Florian Roth\ndate: 2022-09-02\nmodified: 2024-11-23\ntags:\n    - attack.command-and-control\n    - attack.t1090\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\frpc.exe'\n            - '\\frps.exe'\n    selection_cli:\n        CommandLine|contains: '\\frpc.ini'\n    selection_hashes:\n        # v0.44.0\n        Hashes|contains:\n            - \"MD5=7D9C233B8C9E3F0EA290D2B84593C842\"\n            - \"SHA1=06DDC9280E1F1810677935A2477012960905942F\"\n            - \"SHA256=57B0936B8D336D8E981C169466A15A5FD21A7D5A2C7DAF62D5E142EE860E387C\"\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule in terms of detection logic, containing the same core detection components (Image paths, CommandLine patterns, and hash values) with only minor formatting differences in quotes and comment placement that don't impact detection capability. Both rules effectively detect FRP execution through multiple methods including binary names, configuration files, and specific hash values.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "The rule could be enhanced by adding version information comments for the hashes directly in the rule like the EXPECTED version does (v0.44.0), but this is a minor documentation improvement rather than a detection capability issue."
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
    "generated_rule": "title: MpiExec LOLBIN Command Line Flag Detection\nid: 729ce0ea-5d8f-4769-9762-e35de441586d\nstatus: test\ndescription: Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary\nreferences:\n- https://twitter.com/mrd0x/status/1465058133303246867\n- https://learn.microsoft.com/en-us/powershell/high-performance-computing/mpiexec?view=hpc19-ps\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2024-11-23\ntags:\n- attack.execution\n- attack.defense-evasion\n- attack.t1218\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\mpiexec.exe\n    CommandLine|contains:\n    - ' /n 1 '\n    - ' -n 1 '\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: MpiExec Lolbin\nid: 729ce0ea-5d8f-4769-9762-e35de441586d\nstatus: test\ndescription: Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary\nreferences:\n    - https://twitter.com/mrd0x/status/1465058133303246867\n    - https://learn.microsoft.com/en-us/powershell/high-performance-computing/mpiexec?view=hpc19-ps\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-11\nmodified: 2024-11-23\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        - Image|endswith: '\\mpiexec.exe'\n        - Hashes|contains: 'IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217'\n    selection_flags:\n        CommandLine|contains:\n            - ' /n 1 '\n            - ' -n 1 '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1768014571948998,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule lacks the hash-based detection (IMPHASH) that provides an additional layer of verification in the EXPECTED rule and uses a simpler condition logic ('selection' vs 'all of selection*') which makes it more susceptible to evasion. The GENERATED rule only relies on image path and command line parameters, missing the opportunity to validate the binary authenticity through hash verification.",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add IMPHASH verification to validate binary authenticity, implement 'all of selection*' condition logic to ensure both binary and command line criteria are met, and consider adding additional command line parameters that could be used in variations of this attack."
      }
    },
    "overall_score": 0.689200364298725,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
    "generated_rule": "title: Detection of Dumpert Process Dumper Usage\nid: 5f3b9c2e-4d3a-4b8e-9f1e-2c3d9f8e6b7a\nstatus: test\ndescription: Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory\nreferences:\n- https://github.com/outflanknl/Dumpert\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.credential-access\n- attack.t1003.001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    - Hashes|contains: 09D278F9DE118EF09163C6140255C690\n    - CommandLine|contains: Dumpert.dll\n  condition: selection\nfalsepositives:\n- Very unlikely\nlevel: critical",
    "expected_rule": "title: HackTool - Dumpert Process Dumper Execution\nid: 2704ab9e-afe2-4854-a3b1-0c0706d03578\nstatus: test\ndescription: Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory\nreferences:\n    - https://github.com/outflanknl/Dumpert\n    - https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/\nauthor: Florian Roth (Nextron Systems)\ndate: 2020-02-04\nmodified: 2025-01-22\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Hashes|contains: 'MD5=09D278F9DE118EF09163C6140255C690'\n        - CommandLine|contains: 'Dumpert.dll'\n    condition: selection\nfalsepositives:\n    - Very unlikely\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.05019872214116816,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains nearly identical detection capabilities as the EXPECTED rule with the key detection elements (Dumpert.dll and specific MD5 hash) preserved, only differing in the MD5 hash format specification which does not impact detection effectiveness; both rules correctly identify Dumpert process dumper usage through process creation monitoring with the same critical severity and false positive controls",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the 'MD5=' prefix to hash detection for consistency with standard formats and include additional reference URLs as in the expected rule for better context and documentation"
      }
    },
    "overall_score": 0.741549680535292,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the \"IDiagnosticProfileUAC\" UAC bypass technique",
    "generated_rule": "title: UAC Bypass Using IDiagnostic Profile\nid: 5f3b9c2e-8b4d-4f3a-9c2e-1a2b3c4d5e6f\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique by monitoring specific process creation and file events.\nreferences:\n- https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.execution\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_process:\n    ParentImage|endswith: \\DllHost.exe\n    ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  selection_file:\n    Image|endswith: \\DllHost.exe\n    TargetFilename|startswith: C:\\Windows\\System32\\\n    TargetFilename|endswith: .dll\n  condition: selection_process or selection_file\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using IDiagnostic Profile\nid: 4cbef972-f347-4170-b62a-8253f6168e6d\nstatus: test\ndescription: Detects the \"IDiagnosticProfileUAC\" UAC bypass technique\nreferences:\n    - https://github.com/Wh04m1001/IDiagnosticProfileUAC\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-03\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains: ' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.1789113428943938,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule includes additional file-based detection logic (selection_file) which could potentially improve detection coverage, but also introduces unnecessary complexity and potential false positives compared to the EXPECTED rule which achieves the same core detection with a more focused approach on process creation events; both rules correctly identify the key UAC bypass indicators including DllHost.exe parent process, specific ProcessID GUID, and elevated integrity levels",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.65
        },
        "improvement_synopsis": "Remove the unnecessary file-based detection logic (selection_file) as it adds complexity without significant detection benefit and could increase false positives; maintain focus on the core process creation indicators which are sufficient for reliable detection of this UAC bypass technique"
      }
    },
    "overall_score": 0.7197278357235984,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
    "generated_rule": "title: Renamed High-Risk Binary Execution\nid: 5f3b9c2e-8f4d-4a3b-9b2d-1f2c3d4e5f6a\nstatus: stable\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n- https://attack.mitre.org/techniques/T1036/003/\nauthor: Cybersecurity Analyst\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.t1036.003\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    OriginalFileName:\n    - Cmd.Exe\n    - CONHOST.EXE\n    - 7z.exe\n    - WinRAR.exe\n    - wevtutil.exe\n    - net.exe\n    - net1.exe\n    - netsh.exe\n    - InstallUtil.exe\n    - certutil.exe\n    - cmstp.exe\n    - cscript.exe\n    - IE4UINIT.EXE\n    - mshta.exe\n    - msiexec.exe\n    - msxsl.exe\n    - powershell_ise.exe\n    - powershell.exe\n    - psexec.c\n    - psexec.exe\n    - psexesvc.exe\n    - pwsh.dll\n    - reg.exe\n    - regsvr32.exe\n    - rundll32.exe\n    - WerMgr\n    - wmic.exe\n    - wscript.exe\n  filter:\n    Image|endswith:\n    - \\cmd.exe\n    - \\conhost.exe\n    - \\7z.exe\n    - \\WinRAR.exe\n    - \\wevtutil.exe\n    - \\net.exe\n    - \\net1.exe\n    - \\netsh.exe\n    - \\InstallUtil.exe\n    - \\certutil.exe\n    - \\cmstp.exe\n    - \\cscript.exe\n    - \\ie4uinit.exe\n    - \\mshta.exe\n    - \\msiexec.exe\n    - \\msxsl.exe\n    - \\powershell_ise.exe\n    - \\powershell.exe\n    - \\psexec.exe\n    - \\psexec64.exe\n    - \\PSEXESVC.exe\n    - \\pwsh.exe\n    - \\reg.exe\n    - \\regsvr32.exe\n    - \\rundll32.exe\n    - \\wermgr.exe\n    - \\wmic.exe\n    - \\wscript.exe\n  condition: selection and not filter\nfalsepositives:\n- Custom applications using renamed binaries with slight name changes. Typically easy to spot and whitelist.\nlevel: high",
    "expected_rule": "title: Potential Defense Evasion Via Rename Of Highly Relevant Binaries\nid: 0ba1da6d-b6ce-4366-828c-18826c9de23e\nrelated:\n    - id: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142\n      type: similar\n    - id: 2569ed8c-1147-498a-9b8c-2ad3656b10ed # Renamed Rundll32 Specific\n      type: derived\n    - id: a7a7e0e5-1d57-49df-9c58-9fe5bc0346a2 # Renamed PsExec\n      type: obsolete\n    - id: d178a2d7-129a-4ba4-8ee6-d6e1fecd5d20 # Renamed PowerShell\n      type: obsolete\n    - id: d4d2574f-ac17-4d9e-b986-aeeae0dc8fe2 # Renamed Rundll32\n      type: obsolete\nstatus: test\ndescription: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.\nreferences:\n    - https://mgreen27.github.io/posts/2019/05/12/BinaryRename.html\n    - https://mgreen27.github.io/posts/2019/05/29/BinaryRename2.html\n    - https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/megacortex-ransomware-spotted-attacking-enterprise-networks\n    - https://twitter.com/christophetd/status/1164506034720952320\n    - https://threatresearch.ext.hp.com/svcready-a-new-loader-reveals-itself/\nauthor: Matthew Green - @mgreen27, Florian Roth (Nextron Systems), frack113\ndate: 2019-06-15\nmodified: 2024-12-03\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\n    - car.2013-05-009\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'Execute processes remotely'\n        - Product: 'Sysinternals PsExec'\n        - Description|startswith:\n              - 'Windows PowerShell'\n              - 'pwsh'\n        - OriginalFileName:\n              - 'certutil.exe'\n              - 'cmstp.exe'\n              - 'cscript.exe'\n              - 'IE4UINIT.EXE'\n              - 'mshta.exe'\n              - 'msiexec.exe'\n              - 'msxsl.exe'\n              - 'powershell_ise.exe'\n              - 'powershell.exe'\n              - 'psexec.c'        # old versions of psexec (2016 seen)\n              - 'psexec.exe'\n              - 'psexesvc.exe'\n              - 'pwsh.dll'\n              - 'reg.exe'\n              - 'regsvr32.exe'\n              - 'rundll32.exe'\n              - 'WerMgr'\n              - 'wmic.exe'\n              - 'wscript.exe'\n    filter:\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\cmstp.exe'\n            - '\\cscript.exe'\n            - '\\ie4uinit.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\psexec.exe'\n            - '\\psexec64.exe'\n            - '\\PSEXESVC.exe'\n            - '\\pwsh.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wermgr.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\n    - PsExec installed via Windows Store doesn't contain original filename field (False negative)\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.14072225216389977,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.83,
        "reasoning": "The GENERATED rule maintains strong core detection capabilities for renamed binaries but lacks some important metadata fields and detection conditions present in the EXPECTED rule, specifically missing Description/Product-based detections for PowerShell and PsExec which could allow evasion. The GENERATED rule includes additional binaries like Cmd.Exe, CONHOST.EXE, 7z.exe which expands detection scope but may increase false positives. Both rules share similar effective filter logic for legitimate paths.",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Add Description and Product-based detection conditions for PowerShell and PsExec, remove lower-risk binaries from detection scope, and include the additional context about PsExec Windows Store installations in false positives documentation to match EXPECTED rule's precision."
      }
    },
    "overall_score": 0.7341805630409749,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata",
    "generated_rule": "title: Detect UACMe Execution via PE Metadata\nid: 5f3b9c2e-8b4d-4f3e-9a2b-2c9f5e8a9b3d\nstatus: test\ndescription: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Your Name\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_pe:\n    Product: UACMe\n    Company:\n    - REvol Corp\n    - APT 92\n    - UG North\n    - Hazardous Environments\n    - CD Project Rekt\n    Description:\n    - UACMe main module\n    - Pentesting utility\n    OriginalFileName:\n    - Akagi.exe\n    - Akagi64.exe\n  selection_img:\n    Image|endswith:\n    - \\Akagi64.exe\n    - \\Akagi.exe\n  selection_hashes_sysmon:\n    Hashes|contains:\n    - IMPHASH=767637C23BB42CD5D7397CF58B0BE688\n    - IMPHASH=14C4E4C72BA075E9069EE67F39188AD8\n    - IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC\n    - IMPHASH=7D010C6BB6A3726F327F7E239166D127\n    - IMPHASH=89159BA4DD04E4CE5559F132A9964EB3\n    - IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F\n    - IMPHASH=5834ED4291BDEB928270428EBBAF7604\n    - IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38\n    - IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894\n    - IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74\n    - IMPHASH=3DE09703C8E79ED2CA3F01074719906B\n  condition: 1 of selection_*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: HackTool - UACMe Akagi Execution\nid: d38d2fa4-98e6-4a24-aff1-410b0c9ad177\nstatus: test\ndescription: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Product: 'UACMe'\n        - Company:\n              - 'REvol Corp'\n              - 'APT 92'\n              - 'UG North'\n              - 'Hazardous Environments'\n              - 'CD Project Rekt'\n        - Description:\n              - 'UACMe main module'\n              - 'Pentesting utility'\n        - OriginalFileName:\n              - 'Akagi.exe'\n              - 'Akagi64.exe'\n    selection_img:\n        Image|endswith:\n            - '\\Akagi64.exe'\n            - '\\Akagi.exe'\n    selection_hashes_sysmon:\n        Hashes|contains:\n            - 'IMPHASH=767637C23BB42CD5D7397CF58B0BE688'\n            - 'IMPHASH=14C4E4C72BA075E9069EE67F39188AD8'\n            - 'IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC'\n            - 'IMPHASH=7D010C6BB6A3726F327F7E239166D127'\n            - 'IMPHASH=89159BA4DD04E4CE5559F132A9964EB3'\n            - 'IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F'\n            - 'IMPHASH=5834ED4291BDEB928270428EBBAF7604'\n            - 'IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38'\n            - 'IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894'\n            - 'IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74'\n            - 'IMPHASH=3DE09703C8E79ED2CA3F01074719906B'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.039529074529074504,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule, with matching PE metadata checks, file paths, and import hash detections for UACMe variants. The detection logic, including the '1 of selection_*' condition and all key indicators (Product, Company, Description, OriginalFileName, Image paths, and IMPHASHes) are perfectly aligned, ensuring comprehensive coverage of UACMe execution patterns.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Minor formatting improvements could be made to match the EXPECTED rule's YAML structure (quotes around values, indentation), but these don't impact detection effectiveness or false positive rates."
      }
    },
    "overall_score": 0.7448822686322685,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects execution of renamed version of PAExec. Often used by attackers",
    "generated_rule": "title: Renamed PAExec Execution\nid: 9f8b7c2d-3e4a-4f5b-9c2d-1a2b3c4d5e6f\nstatus: test\ndescription: Detects execution of a renamed version of PAExec, which is often used by attackers to evade detection.\nreferences:\n- https://www.poweradmin.com/paexec/\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.t1202\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    OriginalFileName: PAExec.exe\n  filter_known_locations:\n    Image|endswith:\n    - \\paexec.exe\n    - \\paexec64.exe\n    - \\paexec32.exe\n    - \\paexec-[XXXXX]-[ComputerName].exe\n  condition: selection and not 1 of filter_known_locations\nfalsepositives:\n- Legitimate administrative tasks where PAExec is renamed\n- Software that bundles PAExec and renames it for branding purposes\nlevel: high",
    "expected_rule": "title: Renamed PAExec Execution\nid: c4e49831-1496-40cf-8ce1-b53f942b02f9\nrelated:\n    - id: 7b0666ad-3e38-4e3d-9bab-78b06de85f7b\n      type: obsolete\nstatus: test\ndescription: Detects execution of renamed version of PAExec. Often used by attackers\nreferences:\n    - https://www.poweradmin.com/paexec/\n    - https://summit.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-technical-s05-att&cking-fin7.pdf\nauthor: Florian Roth (Nextron Systems), Jason Lynch\ndate: 2021-05-22\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\n    - attack.t1202\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'PAExec Application'\n        - OriginalFileName: 'PAExec.exe'\n        - Product|contains: 'PAExec'\n        - Hashes|contains:\n              - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n              - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n              - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n              - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter_main_known_location:\n        - Image|endswith: '\\paexec.exe'\n        - Image|startswith: 'C:\\Windows\\PAExec-'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PAExec with their software and rename it, so that it is less embarrassing\n    - When executed with the \"-s\" flag. PAExec will copy itself to the \"C:\\Windows\\\" directory with a different name. Usually like this \"PAExec-[XXXXX]-[ComputerName]\"\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3800182830294673,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED - it lacks multiple detection criteria like Description, Product fields and critical hash-based detection (IMPHASH values), while having similar but less comprehensive filter conditions. The generated rule's filter conditions miss the Windows directory specific path check which could allow evasion.",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add Description and Product field checks, implement IMPHASH detection, expand filter conditions to include Windows directory specific paths, and consider adding related rule references for better context and correlation"
      }
    },
    "overall_score": 0.7400045707573668,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
    "generated_rule": "title: Detect UAC Bypass via WSReset\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: stable\ndescription: Detects the pattern of UAC Bypass via WSReset executable, which is used to bypass User Account Control (UAC) and execute processes with elevated privileges.\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n- https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: \\wsreset.exe\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Legitimate use of WSReset.exe with elevated privileges\nlevel: high\nfields:\n- Image\n- IntegrityLevel\n- User\n- CommandLine\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_uac_bypass_wsreset.yml",
    "expected_rule": "title: UAC Bypass WSReset\nid: 89a9a0e0-f61a-42e5-8957-b1479565a658\nstatus: test\ndescription: Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Wsreset/\n    - https://github.com/hfiref0x/UACME\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wsreset.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same Image|endswith and IntegrityLevel conditions, matching the EXPECTED rule's ability to detect WSReset UAC bypass attempts; it includes the same critical fields for monitoring elevated privileges and adds helpful 'fields' section for investigation that improves upon the original rule while maintaining the same high-fidelity detection approach",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "The GENERATED rule could benefit from including the additional reference to UACME GitHub repository as found in the EXPECTED rule, though this is a minor documentation improvement rather than a detection enhancement"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of NPS, a port forwarding and intranet penetration proxy server",
    "generated_rule": "title: Detection of NPS Tunneling Tool Execution\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: test\ndescription: Detects the execution of NPS, a port forwarding and intranet penetration proxy server, to identify potential unauthorized network tunneling activities.\nreferences:\n- https://github.com/ehang-io/nps\nauthor: Your Name\ndate: 2023-10-10\nmodified: 2023-10-10\ntags:\n- attack.command-and-control\n- attack.t1090\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_img:\n    Image|endswith: \\npc.exe\n  selection_cli_1:\n    CommandLine|contains|all:\n    - ' -server='\n    - ' -vkey='\n    - ' -password='\n  selection_cli_2:\n    CommandLine|contains: ' -config=npc'\n  selection_hashes:\n    Hashes|contains:\n    - MD5=AE8ACF66BFE3A44148964048B826D005\n    - SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181\n    - SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856\n  condition: 1 of selection_*\nfalsepositives:\n- Legitimate use of NPS for authorized network management\nlevel: high",
    "expected_rule": "title: PUA - NPS Tunneling Tool Execution\nid: 68d37776-61db-42f5-bf54-27e87072d17e\nstatus: test\ndescription: Detects the use of NPS, a port forwarding and intranet penetration proxy server\nreferences:\n    - https://github.com/ehang-io/nps\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-10-08\nmodified: 2024-11-23\ntags:\n    - attack.command-and-control\n    - attack.t1090\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\npc.exe'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - ' -server='\n            - ' -vkey='\n            - ' -password='\n    selection_cli_2:\n        CommandLine|contains: ' -config=npc'\n    selection_hashes:\n        # v0.26.10\n        Hashes|contains:\n            - \"MD5=AE8ACF66BFE3A44148964048B826D005\"\n            - \"SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181\"\n            - \"SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856\"\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic, conditions, hash values, and command line parameters for NPS tool detection. The only minor differences are in metadata fields (title prefix 'PUA -' and description formatting) which don't impact detection effectiveness.",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Consider adding the 'PUA -' prefix to title for better categorization and expand the falsepositives field to be more specific about legitimate use cases rather than using a generic description."
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
    "generated_rule": "title: Renamed ZOHO Dctask64 Execution\nid: 340a090b-c4e9-412e-bb36-b4b16fe96f9b\nstatus: test\ndescription: Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central. This binary can be abused for DLL injection, arbitrary command and process execution.\nreferences:\n- https://twitter.com/gN3mes1s/status/1222088214581825540\n- https://twitter.com/gN3mes1s/status/1222095963789111296\n- https://twitter.com/gN3mes1s/status/1222095371175911424\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-28\nmodified: 2024-04-22\ntags:\n- attack.defense-evasion\n- attack.t1036\n- attack.t1055.001\n- attack.t1202\n- attack.t1218\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Hashes|contains:\n    - 6834B1B94E49701D77CCB3C0895E1AFD\n    - 1BB6F93B129F398C7C4A76BB97450BBA\n    - FAA2AC19875FADE461C8D89DCF2710A3\n    - F1039CED4B91572AB7847D26032E6BBF\n  filter_main_legit_name:\n    Image|endswith: \\dctask64.exe\n  condition: selection and not 1 of filter_main_*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: Renamed ZOHO Dctask64 Execution\nid: 340a090b-c4e9-412e-bb36-b4b16fe96f9b\nstatus: test\ndescription: |\n    Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\n    This binary can be abused for DLL injection, arbitrary command and process execution.\nreferences:\n    - https://twitter.com/gN3mes1s/status/1222088214581825540\n    - https://twitter.com/gN3mes1s/status/1222095963789111296\n    - https://twitter.com/gN3mes1s/status/1222095371175911424\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-01-28\nmodified: 2025-01-22\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1055.001\n    - attack.t1202\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Hashes|contains:\n            - 'IMPHASH=6834B1B94E49701D77CCB3C0895E1AFD'\n            - 'IMPHASH=1BB6F93B129F398C7C4A76BB97450BBA'\n            - 'IMPHASH=FAA2AC19875FADE461C8D89DCF2710A3'\n            - 'IMPHASH=F1039CED4B91572AB7847D26032E6BBF'\n    filter_main_legit_name:\n        Image|endswith: '\\dctask64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0760185441036505,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule matches the EXPECTED rule in core detection logic but lacks the 'IMPHASH=' prefix in hash values which could potentially lead to hash matching against other hash types (MD5/SHA1/etc) instead of specifically IMPHASH values, though the specific hashes used are likely unique enough to still be effective; all other detection components including filters, conditions, and metadata are identical and properly implemented",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Add 'IMPHASH=' prefix to hash values in the selection criteria to ensure specific matching against import hash values only, preventing potential mismatches with other hash types that could share the same values"
      }
    },
    "overall_score": 0.7240046360259126,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Search for usage of reg or Powershell by non-privileged users to modify service configuration in registry",
    "generated_rule": "title: Non-privileged Usage of Reg or Powershell for Service Configuration\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects usage of reg or Powershell by non-privileged users to modify service configuration in the registry, which may indicate malicious activity.\nreferences:\n- https://example.com/reference\nauthor: Your Name\ndate: 2023-10-10\ntags:\n- attack.defense-evasion\n- attack.t1112\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_reg:\n    CommandLine|contains|all:\n    - 'reg '\n    - add\n  selection_ps:\n    CommandLine|contains|all:\n    - powershell\n    - set-itemproperty\n  selection_integrity:\n    IntegrityLevel: Medium\n  selection_registry:\n    CommandLine|contains|all:\n    - ControlSet\n    - Services\n  condition: (selection_reg or selection_ps) and selection_integrity and selection_registry\nfalsepositives:\n- Legitimate administrative tasks by non-privileged users\nlevel: high",
    "expected_rule": "title: Non-privileged Usage of Reg or Powershell\nid: 8f02c935-effe-45b3-8fc9-ef8696a9e41d\nstatus: test\ndescription: Search for usage of reg or Powershell by non-privileged users to modify service configuration in registry\nreferences:\n    - https://image.slidesharecdn.com/kheirkhabarovoffzonefinal-181117201458/95/hunting-for-privilege-escalation-in-windows-environment-20-638.jpg\nauthor: Teymur Kheirkhabarov (idea), Ryan Plas (rule), oscd.community\ndate: 2020-10-05\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.t1112\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli:\n        - CommandLine|contains|all:\n              - 'reg '\n              - 'add'\n        - CommandLine|contains:\n              - 'powershell'\n              - 'set-itemproperty'\n              - ' sp '\n              - 'new-itemproperty'\n    selection_data:\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n        CommandLine|contains|all:\n            - 'ControlSet'\n            - 'Services'\n        CommandLine|contains:\n            - 'ImagePath'\n            - 'FailureCommand'\n            - 'ServiceDLL'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.15777513984919567,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED: missing key command variations ('sp', 'new-itemproperty'), lacks S-1-16-8192 integrity level check, and omits critical registry keys (ImagePath, FailureCommand, ServiceDLL) that are commonly abused for service manipulation; detection logic is also less efficient with separate conditions vs. the EXPECTED rule's more comprehensive 'all of selection_*' approach",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add missing PowerShell cmdlets and command variations, include S-1-16-8192 integrity level, add specific registry keys (ImagePath/FailureCommand/ServiceDLL), and consolidate detection logic using 'all of selection_*' pattern for more robust detection"
      }
    },
    "overall_score": 0.6844437849622989,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
    "generated_rule": "title: UAC Bypass Using Windows Media Player - Comprehensive Detection\nid: 9c3f2b1e-4d2f-4a8b-9f3e-2a1b5c6d7e8f\nstatus: test\ndescription: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32) across file, process, and registry events.\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: file_event\n  product: windows\ndetection:\n  selection_file:\n    TargetFilename|startswith: C:\\Users\\\n    TargetFilename|endswith: \\AppData\\Local\\Temp\\OskSupport.dll\n  selection_process:\n    Image: C:\\Program Files\\Windows Media Player\\osk.exe\n  selection_registry:\n    TargetObject|endswith: \\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe\n    Details: Binary Data\n  condition: 1 of selection_file or 1 of selection_process or 1 of selection_registry\nfalsepositives:\n- Unknown\nlevel: high\nsource_file: ./sigma_all_rules/rules/windows/comprehensive/uac_bypass_wmp_comprehensive.yml",
    "expected_rule": "title: UAC Bypass Using Windows Media Player - Process\nid: 0058b9e5-bcd7-40d4-9205-95ca5a16d7b2\nstatus: test\ndescription: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-23\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img_1:\n        Image: 'C:\\Program Files\\Windows Media Player\\osk.exe'\n    selection_img_2:\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        ParentCommandLine: '\"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\eventvwr.msc\" /s'\n    selection_integrity:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: 1 of selection_img_* and selection_integrity\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.3289831217509649,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule takes a different approach by monitoring file, process, and registry events which provides broader visibility, but lacks critical process creation details like integrity level checks and cmd.exe execution patterns that are essential for reliable UAC bypass detection. The EXPECTED rule's focus on process creation with integrity level validation and specific command line parameters offers more precise detection of the actual bypass technique.",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add integrity level validation, include cmd.exe execution patterns with specific command line parameters, and combine process creation monitoring with the existing file/registry indicators while maintaining specific path checks to create a more comprehensive detection strategy."
      }
    },
    "overall_score": 0.7272457804377412,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
    "generated_rule": "title: UAC Bypass Using DismHost DLL Hijacking\nid: 853e74f9-9392-4935-ad3b-2e8c040dae86\nstatus: test\ndescription: Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentImage|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\Temp\\\n    - \\DismHost.exe\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Using DismHost\nid: 853e74f9-9392-4935-ad3b-2e8c040dae86\nstatus: test\ndescription: Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-30\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\DismHost.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in terms of detection logic, containing the exact same ParentImage path components, IntegrityLevel values, and condition logic - the only differences are cosmetic formatting variations in YAML structure that do not impact detection capability or false positive control",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed as rules are equivalent, though adding comments to explain the SID values (as in the EXPECTED rule) would improve maintainability and documentation"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
    "generated_rule": "title: Renamed NetSupport RAT Execution via Imphash and Metadata\nid: 0afbd410-de03-4078-8491-f132303cb67d\nstatus: test\ndescription: Detects the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product, and OriginalFileName strings\nreferences:\n- https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2024-11-23\ntags:\n- attack.defense-evasion\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Product|contains: NetSupport Remote Control\n    OriginalFileName|contains: client32.exe\n    Hashes|contains: IMPHASH=A9D50692E95B79723F3E76FCF70D023E\n  filter:\n    Image|endswith: \\client32.exe\n  condition: selection and not filter\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: Renamed NetSupport RAT Execution\nid: 0afbd410-de03-4078-8491-f132303cb67d\nstatus: test\ndescription: Detects the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-19\nmodified: 2024-11-23\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Hashes|contains: IMPHASH=A9D50692E95B79723F3E76FCF70D023E\n    filter:\n        Image|endswith: '\\client32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.07729131688837232,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in terms of core detection logic, using the same critical indicators (Product, OriginalFileName, Imphash) and filter conditions; the only differences are minor formatting variations in YAML structure that don't impact detection capability or false positive control",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed as both rules are equivalent in detection capability; minor YAML formatting could be standardized for consistency but doesn't impact effectiveness"
      }
    },
    "overall_score": 0.7543228292220929,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects Stracciatella which executes a Powershell runspace from within C# (aka SharpPick technique) with AMSI, ETW and Script Block Logging disabled based on PE metadata characteristics.",
    "generated_rule": "title: Stracciatella Execution Detection\nid: 7a4d9232-92fc-404d-8ce1-4c92e7caf539\nstatus: stable\ndescription: Detects Stracciatella which executes a Powershell runspace from within C# (aka SharpPick technique) with AMSI, ETW and Script Block Logging disabled based on PE metadata characteristics.\nreferences:\n- https://github.com/mgeeky/Stracciatella\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2024-11-23\ntags:\n- attack.execution\n- attack.defense-evasion\n- attack.t1059\n- attack.t1562.001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: '\\Stracciatella.exe'\n    OriginalFileName: 'Stracciatella.exe'\n    Description: 'Stracciatella'\n    Hashes|contains:\n      - 'SHA256=9d25e61ec1527e2a69d7c2a4e3fe2fe15890710c198a66a9f25d99fdf6c7b956'\n      - 'SHA256=fd16609bd9830c63b9413671678bb159b89c357d21942ddbb6b93add808d121a'\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: HackTool - Stracciatella Execution\nid: 7a4d9232-92fc-404d-8ce1-4c92e7caf539\nstatus: test\ndescription: Detects Stracciatella which executes a Powershell runspace from within C# (aka SharpPick technique) with AMSI, ETW and Script Block Logging disabled based on PE metadata characteristics.\nreferences:\n    - https://github.com/mgeeky/Stracciatella\nauthor: pH-T (Nextron Systems)\ndate: 2023-04-17\nmodified: 2024-11-23\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.t1059\n    - attack.t1562.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Stracciatella.exe'\n        - OriginalFileName: 'Stracciatella.exe'\n        - Description: 'Stracciatella'\n        - Hashes|contains:\n              - 'SHA256=9d25e61ec1527e2a69d7c2a4e3fe2fe15890710c198a66a9f25d99fdf6c7b956'\n              - 'SHA256=fd16609bd9830c63b9413671678bb159b89c357d21942ddbb6b93add808d121a'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.09620146210646185,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule in core detection logic, containing the same critical indicators (Image path, OriginalFileName, Description, and SHA256 hashes) with identical structure and values; the only differences are cosmetic YAML formatting variations that do not impact detection capability or false positive control",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "No significant improvements needed as both rules are functionally equivalent; minor YAML formatting standardization could be applied for consistency but would not impact detection effectiveness"
      }
    },
    "overall_score": 0.7590503655266154,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)",
    "generated_rule": "title: UAC Bypass Tools Using ComputerDefaults\nid: 3c05e90d-7eba-4324-9972-5d7f711a60a8\nstatus: test\ndescription: Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)\nreferences:\n- https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-31\nmodified: 2024-12-01\ntags:\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n    Image: C:\\Windows\\System32\\ComputerDefaults.exe\n  filter:\n    ParentImage|contains:\n    - :\\Windows\\System32\n    - :\\Program Files\n  condition: selection and not filter\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: UAC Bypass Tools Using ComputerDefaults\nid: 3c05e90d-7eba-4324-9972-5d7f711a60a8\nstatus: test\ndescription: Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)\nreferences:\n    - https://github.com/hfiref0x/UACME\nauthor: Christian Burkard (Nextron Systems)\ndate: 2021-08-31\nmodified: 2024-12-01\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n        Image: 'C:\\Windows\\System32\\ComputerDefaults.exe'\n    filter:\n        ParentImage|contains:\n            - ':\\Windows\\System32'\n            - ':\\Program Files'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in all critical detection aspects - same IntegrityLevel values, Image path, ParentImage filters, and condition logic - with only cosmetic YAML formatting differences in quotes and indentation that don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No functional improvements needed as both rules are equivalent in detection logic; optional enhancement could be adding quotes around string values for consistency with YAML best practices"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc).\nProcess Hacker is a tool to view and manipulate processes, kernel options and other low level options.\nThreat actors abused older vulnerable versions to manipulate system processes.\n",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same",
    "generated_rule": "title: Detect HandleKatz LSASS Obfuscated Memory Dump\nid: 3f8b9c2e-7d4a-4f3b-9a2e-2f8e9c3d4b5f\nstatus: test\ndescription: Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump.\nreferences:\n- https://github.com/codewhitesec/HandleKatz\nauthor: Your Name\ndate: 2023-10-05\nmodified: 2023-10-05\ntags:\n- attack.credential-access\n- attack.t1003.001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_image:\n    Image|endswith: \\loader.exe\n  selection_commandline:\n    CommandLine|contains|all:\n    - '--pid:'\n    - '--outfile:'\n    - .obf\n  selection_imphash:\n    Hashes|contains:\n    - IMPHASH=38D9E015591BBFD4929E0D0F47FA0055\n    - IMPHASH=0E2216679CA6E1094D63322E3412D650\n  condition: 1 of selection_*\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: HackTool - HandleKatz LSASS Dumper Execution\nid: ca621ba5-54ab-4035-9942-d378e6fcde3c\nstatus: test\ndescription: Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same\nreferences:\n    - https://github.com/codewhitesec/HandleKatz\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-08-18\nmodified: 2024-11-23\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loader_img:\n        Image|endswith: '\\loader.exe'\n        CommandLine|contains: '--pid:'\n    selection_loader_imphash:\n        Hashes|contains:\n            - 'IMPHASH=38D9E015591BBFD4929E0D0F47FA0055'\n            - 'IMPHASH=0E2216679CA6E1094D63322E3412D650'\n    selection_flags:\n        CommandLine|contains|all:\n            - '--pid:'\n            - '--outfile:'\n        CommandLine|contains:\n            - '.dmp'\n            - 'lsass'\n            - '.obf'\n            - 'dump'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.13495893750262677,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.85,
        "reasoning": "The GENERATED rule maintains core detection capabilities with loader.exe, IMPHASH values, and key command line parameters, but lacks the broader command line pattern matching for 'lsass', 'dmp', and 'dump' variants present in the EXPECTED rule, though it does include '.obf' detection; the overall structure and approach is sound with only minor detection gaps",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Add additional command line pattern matching for 'lsass', '.dmp', and 'dump' variants to catch more attack variations while maintaining the current strong false positive controls through specific IMPHASH values and command line parameter combinations"
      }
    },
    "overall_score": 0.7387397343756567,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects certain command line parameters often used during reconnaissance activity via web shells",
    "generated_rule": "title: Webshell Reconnaissance Command Line Detection\nid: 3f2b1c4d-7e2a-4f3b-9a5e-2d3f4b5c6d7e\nstatus: test\ndescription: Detects command line parameters often used during reconnaissance activity via web shells\nreferences:\n- https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.persistence\n- attack.t1505.003\n- attack.t1018\n- attack.t1033\n- attack.t1087\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_webserver_image:\n    ParentImage|endswith:\n    - \\w3wp.exe\n    - \\php-cgi.exe\n    - \\nginx.exe\n    - \\httpd.exe\n    - \\caddy.exe\n    - \\ws_tomcatservice.exe\n  selection_suspicious_commands:\n    CommandLine|contains:\n    - ' net user '\n    - ' net group '\n    - ' ping -n '\n    - ' &cd&echo '\n    - ' wmic /node:'\n    - ' powershell -enc '\n    - ' powershell -EncodedCommand '\n    - ' powershell -w hidden '\n    - ' powershell -windowstyle hidden'\n    - ' .WebClient).Download'\n    - ' Test-NetConnection '\n    - ' dir \\'\n  condition: 1 of selection_webserver_image and 1 of selection_suspicious_commands\nfalsepositives:\n- Legitimate administrative scripts or tools\nlevel: high",
    "expected_rule": "title: Webshell Detection With Command Line Keywords\nid: bed2a484-9348-4143-8a8a-b801c979301c\nstatus: test\ndescription: Detects certain command line parameters often used during reconnaissance activity via web shells\nreferences:\n    - https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html\n    - https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/\n    - https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild\nauthor: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community, Chad Hudson, Matt Anderson\ndate: 2017-01-01\nmodified: 2024-12-14\ntags:\n    - attack.persistence\n    - attack.t1505.003\n    - attack.t1018\n    - attack.t1033\n    - attack.t1087\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\w3wp.exe'\n            - '\\php-cgi.exe'\n            - '\\nginx.exe'\n            - '\\httpd.exe'\n            - '\\caddy.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'catalina.jar'\n            - 'CATALINA_HOME'\n    selection_susp_net_utility:\n        OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        CommandLine|contains:\n            - ' user '\n            - ' use '\n            - ' group '\n    selection_susp_ping_utility:\n        OriginalFileName: 'ping.exe'\n        CommandLine|contains: ' -n '\n    selection_susp_change_dir:\n        CommandLine|contains:\n            - '&cd&echo'  # china chopper web shell\n            - 'cd /d '  # https://www.computerhope.com/cdhlp.htm\n    selection_susp_wmic_utility:\n        OriginalFileName: 'wmic.exe'\n        CommandLine|contains: ' /node:'\n    selection_susp_powershell_cli:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -enc '\n            - ' -EncodedCommand '\n            - ' -w hidden '\n            - ' -windowstyle hidden'\n            - '.WebClient).Download'\n    selection_susp_misc_discovery_binaries:\n        - Image|endswith:\n              - '\\dsquery.exe'\n              - '\\find.exe'\n              - '\\findstr.exe'\n              - '\\ipconfig.exe'\n              - '\\netstat.exe'\n              - '\\nslookup.exe'\n              - '\\pathping.exe'\n              - '\\quser.exe'\n              - '\\schtasks.exe'\n              - '\\systeminfo.exe'\n              - '\\tasklist.exe'\n              - '\\tracert.exe'\n              - '\\ver.exe'\n              - '\\wevtutil.exe'\n              - '\\whoami.exe'\n        - OriginalFileName:\n              - 'dsquery.exe'\n              - 'find.exe'\n              - 'findstr.exe'\n              - 'ipconfig.exe'\n              - 'netstat.exe'\n              - 'nslookup.exe'\n              - 'pathping.exe'\n              - 'quser.exe'\n              - 'schtasks.exe'\n              - 'sysinfo.exe'\n              - 'tasklist.exe'\n              - 'tracert.exe'\n              - 'ver.exe'\n              - 'VSSADMIN.EXE'\n              - 'wevtutil.exe'\n              - 'whoami.exe'\n    selection_susp_misc_discovery_commands:\n        CommandLine|contains:\n            - ' Test-NetConnection '\n            - 'dir \\'  # remote dir: dir \\<redacted IP #3>\\C$:\\windows\\temp\\*.exe\n    condition: 1 of selection_webserver_* and 1 of selection_susp_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.34315741108489284,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule lacks critical detection components present in the EXPECTED rule including Tomcat-specific patterns, OriginalFileName checks for system utilities, comprehensive discovery binary detection, and detailed process characteristics which significantly impacts detection coverage while maintaining similar base detection logic for web shells",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add missing Tomcat detection logic, implement OriginalFileName checks for system utilities, expand discovery binary detection coverage, and include more specific process characteristics to match the EXPECTED rule's comprehensive detection capabilities"
      }
    },
    "overall_score": 0.7307893527712233,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)",
    "generated_rule": "title: Detect UAC Bypass via CMSTP Autoelevate-capable COM Objects\nid: 4b60e6f2-bf39-47b4-b4ea-398e33cfe253\nstatus: stable\ndescription: Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)\nreferences:\n- https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/\n- https://twitter.com/hFireF0X/status/897640081053364225\n- https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\n- https://github.com/hfiref0x/UACME\nauthor: Nik Seetharaman, Christian Burkard (Nextron Systems)\ndate: 2019-07-31\nmodified: 2024-12-01\ntags:\n- attack.execution\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1548.002\n- attack.t1218.003\n- attack.g0069\n- car.2019-04-001\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    ParentImage|endswith: \\DllHost.exe\n    ParentCommandLine|contains:\n    - ' /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n    - ' /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F}'\n    - ' /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}'\n    - ' /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    - ' /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}'\n    IntegrityLevel:\n    - High\n    - System\n    - S-1-16-16384\n    - S-1-16-12288\n  condition: selection\nfalsepositives:\n- Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\nfields:\n- ParentImage\n- ParentCommandLine\n- IntegrityLevel\nsource_file: ./sigma_all_rules/rules/windows/process_creation/proc_creation_win_uac_bypass_cmstp_com_object_access.yml",
    "expected_rule": "title: CMSTP UAC Bypass via COM Object Access\nid: 4b60e6f2-bf39-47b4-b4ea-398e33cfe253\nstatus: stable\ndescription: Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)\nreferences:\n    - https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/\n    - https://twitter.com/hFireF0X/status/897640081053364225\n    - https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf\n    - https://github.com/hfiref0x/UACME\nauthor: Nik Seetharaman, Christian Burkard (Nextron Systems)\ndate: 2019-07-31\nmodified: 2024-12-01\ntags:\n    - attack.execution\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1548.002\n    - attack.t1218.003\n    - attack.g0069\n    - car.2019-04-001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\DllHost.exe'\n        ParentCommandLine|contains:\n            - ' /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' # cmstplua.dll\n            - ' /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F}' # CMLUAUTIL\n            - ' /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}' # EditionUpgradeManagerObj.dll\n            - ' /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}' # colorui.dll\n            - ' /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}' # wscui.cpl\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n            - 'S-1-16-16384' # System\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is functionally identical to the EXPECTED rule in all critical detection aspects including process monitoring, COM object detection via ProcessIDs, integrity level checks, and UAC bypass detection capabilities - the only differences are minor formatting variations that do not impact detection effectiveness or false positive control",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding inline comments for the ProcessIDs like the EXPECTED rule does to improve maintainability, but no functional improvements needed as detection logic and FP controls are equivalent"
      }
    },
    "overall_score": 0.7349999999999999,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand",
    "generated_rule": "title: Detection of sc.exe Utility Spawning by Medium Integrity User\nid: 3b9f6c2e-4d3b-4f8b-9f2e-1a2f3b4c5d6e\nstatus: test\ndescription: Detects the spawning of sc.exe utility by a user with Medium integrity level to change service ImagePath or FailureCommand, indicating potential privilege escalation.\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Your Name\ndate: 2023-10-10\nmodified: 2023-10-10\ntags:\n- attack.persistence\n- attack.defense-evasion\n- attack.privilege-escalation\n- attack.t1574.011\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  scbynonadmin:\n    Image|endswith: \\sc.exe\n    IntegrityLevel:\n    - Medium\n    - S-1-16-8192\n  selection_imagepath:\n    CommandLine|contains|all:\n    - config\n    - binPath\n  selection_failurecommand:\n    CommandLine|contains|all:\n    - failure\n    - command\n  condition: scbynonadmin and 1 of selection_*\nfields:\n- CommandLine\n- ParentCommandLine\nfalsepositives:\n- Unknown\nlevel: high",
    "expected_rule": "title: Possible Privilege Escalation via Weak Service Permissions\nid: d937b75f-a665-4480-88a5-2f20e9f9b22a\nstatus: test\ndescription: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand\nreferences:\n    - https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n    - https://pentestlab.blog/2017/03/30/weak-service-permissions/\nauthor: Teymur Kheirkhabarov\ndate: 2019-10-26\nmodified: 2024-12-01\ntags:\n    - attack.persistence\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1574.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel:\n            - 'Medium'\n            - 'S-1-16-8192'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.06712326421226433,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic for sc.exe execution, integrity level checks, and command line parameters for both binPath and failure command modifications; the only differences are cosmetic in field naming (selection_imagepath vs selection_binpath) and minor formatting variations that do not impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "The rule is production-ready with only minor suggested improvements: standardize field naming conventions to match expected rule (selection_imagepath \u2192 selection_binpath) and consider adding fields list to expected rule for better event context"
      }
    },
    "overall_score": 0.7517808160530661,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation\n",
    "generated_rule": "title: Suspicious Process Spawned by Web Server\nid: 9f3b2c4d-5e6f-4a3b-9c2d-1a2f3b4c5d6e\nstatus: experimental\ndescription: Detects potentially suspicious processes being spawned by a web server process which could indicate a web shell or exploitation attempt.\nreferences:\n- https://media.defense.gov/2020/Jun/09/2002313081/-1/-1/0/CSI-DETECT-AND-PREVENT-WEB-SHELL-MALWARE-20200422.PDF\nauthor: Your Name\ndate: 2023-11-01\ntags:\n- attack.persistence\n- attack.t1505.003\n- attack.execution\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection_webserver_process:\n    ParentImage|endswith:\n    - \\caddy.exe\n    - \\httpd.exe\n    - \\nginx.exe\n    - \\php-cgi.exe\n    - \\php.exe\n    - \\tomcat.exe\n    - \\UMWorkerProcess.exe\n    - \\w3wp.exe\n    - \\ws_TomcatService.exe\n  selection_suspicious_children:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\rundll32.exe\n    - \\reg.exe\n    - \\wmic.exe\n    - \\bitsadmin.exe\n    - \\certutil.exe\n  filter_false_positives:\n    ParentImage|endswith: \\java.exe\n    CommandLine|contains|all:\n    - sc query\n    - ADManager Plus\n  condition: 1 of selection_webserver_process and 1 of selection_suspicious_children and not 1 of filter_false_positives\nfalsepositives:\n- Some legitimate web applications may spawn command line processes\nlevel: high",
    "expected_rule": "title: Suspicious Process By Web Server Process\nid: 8202070f-edeb-4d31-a010-a26c72ac5600\nstatus: test\ndescription: |\n    Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation\nreferences:\n    - https://media.defense.gov/2020/Jun/09/2002313081/-1/-1/0/CSI-DETECT-AND-PREVENT-WEB-SHELL-MALWARE-20200422.PDF\nauthor: Thomas Patzke, Florian Roth (Nextron Systems), Zach Stanford @svch0st, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2024-11-26\ntags:\n    - attack.persistence\n    - attack.t1505.003\n    - attack.t1190\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\caddy.exe'\n            - '\\httpd.exe'\n            - '\\nginx.exe'\n            - '\\php-cgi.exe'\n            - '\\php.exe'\n            - '\\tomcat.exe'\n            - '\\UMWorkerProcess.exe'  # https://www.fireeye.com/blog/threat-research/2021/03/detection-response-to-exploitation-of-microsoft-exchange-zero-day-vulnerabilities.html\n            - '\\w3wp.exe'\n            - '\\ws_TomcatService.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains:\n            - 'CATALINA_HOME'\n            - 'catalina.home'\n            - 'catalina.jar'\n    selection_anomaly_children:\n        Image|endswith:\n            - '\\arp.exe'\n            - '\\at.exe'\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\dsget.exe'\n            - '\\hostname.exe'\n            - '\\nbtstat.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netdom.exe'\n            - '\\netsh.exe'\n            - '\\nltest.exe'\n            - '\\ntdsutil.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\qprocess.exe'\n            - '\\query.exe'\n            - '\\qwinsta.exe'\n            - '\\reg.exe'\n            - '\\rundll32.exe'\n            - '\\sc.exe'\n            - '\\sh.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wusa.exe'\n    filter_main_fp_1:\n        ParentImage|endswith: '\\java.exe'\n        CommandLine|endswith: 'Windows\\system32\\cmd.exe /c C:\\ManageEngine\\ADManager \"Plus\\ES\\bin\\elasticsearch.bat -Enode.name=RMP-NODE1 -pelasticsearch-pid.txt'\n    filter_main_fp_2:\n        ParentImage|endswith: '\\java.exe'\n        CommandLine|contains|all:\n            - 'sc query'\n            - 'ADManager Plus'\n    condition: 1 of selection_webserver_* and selection_anomaly_children and not 1 of filter_main_*\nfalsepositives:\n    - Particular web applications may spawn a shell process legitimately\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.33580932474677305,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.65,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED: missing critical web server process characteristics for Tomcat (java/javaw.exe with specific parameters), lacks numerous suspicious child processes (arp.exe, at.exe, bash.exe, etc.), and has less comprehensive false positive filtering logic that only covers ADManager Plus scenarios while missing other potential legitimate uses",
        "criteria_scores": {
          "detection_effectiveness": 0.6,
          "false_positive_control": 0.75
        },
        "improvement_synopsis": "Add missing Tomcat process characteristics detection logic, expand suspicious child process list to include network enumeration and system tools, enhance false positive filters to cover more legitimate web application scenarios beyond just ADManager Plus"
      }
    },
    "overall_score": 0.7289523311866932,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.",
    "generated_rule": "title: Potential UAC Bypass Via Elevated Sdclt.EXE\nid: 12345678-90ab-cdef-1234-567890abcdef\nstatus: stable\ndescription: Detects sdclt.exe being spawned as an elevated process, which may indicate a UAC bypass attempt.\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/6\n- https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Your Name\ndate: 2023-10-01\nmodified: 2023-10-01\ntags:\n- attack.privilege-escalation\n- attack.defense-evasion\n- attack.t1548.002\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith: sdclt.exe\n    IntegrityLevel: High\n  condition: selection\nfalsepositives:\n- Legitimate use of sdclt.exe with elevated privileges\nlevel: medium",
    "expected_rule": "title: Potential UAC Bypass Via Sdclt.EXE\nid: 40f9af16-589d-4984-b78d-8c2aec023197\nstatus: test\ndescription: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.\nreferences:\n    - https://github.com/OTRF/detection-hackathon-apt29/issues/6\n    - https://github.com/OTRF/ThreatHunter-Playbook/blob/2d4257f630f4c9770f78d0c1df059f891ffc3fec/docs/evals/apt29/detections/3.B.2_C36B49B5-DF58-4A34-9FE9-56189B9DEFEA.md\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020-05-02\nmodified: 2024-12-01\ntags:\n    - attack.privilege-escalation\n    - attack.defense-evasion\n    - attack.t1548.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'S-1-16-12288' # High\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.05552427867698795,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule matches the EXPECTED rule's core detection logic exactly with identical process monitoring for sdclt.exe and High integrity level detection, including the same MITRE ATT&CK tags and level assignment; the only technical difference is that the EXPECTED rule includes an additional SID-based integrity level check (S-1-16-12288) which provides a redundant detection path, but the primary detection mechanism remains equally effective",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 1.0
        },
        "improvement_synopsis": "Add the SID-based integrity level check (S-1-16-12288) as an alternative detection path to match the EXPECTED rule's complete coverage, though the current implementation is already production-ready and highly effective"
      }
    },
    "overall_score": 0.7428810696692469,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors",
    "generated_rule": "title: HackSys Extreme Vulnerable Driver Load Detection\nid: 3f8b9c2e-4d3a-4f8b-9a2e-1b2c3d4e5f6g\nstatus: stable\ndescription: Detects the load of HackSys Extreme Vulnerable Driver, an intentionally vulnerable Windows driver often abused by threat actors for privilege escalation.\nreferences:\n- https://github.com/hacksysteam/HackSysExtremeVulnerableDriver\nauthor: Cybersecurity Analyst\ndate: 2023-10-05\ntags:\n- attack.privilege-escalation\n- attack.t1543.003\nlogsource:\n  product: windows\n  category: driver_load\ndetection:\n  selection:\n    ImageLoaded|endswith: \\HEVD.sys\n    Hashes|contains:\n      - IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5\n      - IMPHASH=c46ea2e651fd5f7f716c8867c6d13594\n  condition: selection\nfalsepositives:\n- Unlikely\nlevel: high",
    "expected_rule": "title: Vulnerable HackSys Extreme Vulnerable Driver Load\nid: 295c9289-acee-4503-a571-8eacaef36b28\nstatus: test\ndescription: Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors\nreferences:\n    - https://github.com/hacksysteam/HackSysExtremeVulnerableDriver\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-18\nmodified: 2024-11-23\ntags:\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        - ImageLoaded|endswith: '\\HEVD.sys'\n        - Hashes|contains:\n              - 'IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5' # Version 3.0\n              - 'IMPHASH=c46ea2e651fd5f7f716c8867c6d13594' # Version 3.0\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.03501773049645396,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule maintains identical core detection logic with the same ImageLoaded and Hashes conditions, matching IMPHASH values, and equivalent logsource configuration as the EXPECTED rule, with only cosmetic differences in metadata fields that don't impact detection capability",
        "criteria_scores": {
          "detection_effectiveness": 1.0,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "No critical improvements needed for detection logic; consider adding version information comments for the IMPHASH values as seen in the EXPECTED rule to aid in maintenance and documentation"
      }
    },
    "overall_score": 0.7437544326241134,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation",
    "generated_rule": "title: Detection of Vulnerable WinRing0 Driver Load\nid: 2b3f4c5d-7e8f-4a9b-8c6d-123456789abc\nstatus: test\ndescription: Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG), or malware for privilege escalation.\nreferences:\n- https://github.com/xmrig/xmrig/tree/master/bin/WinRing0\n- https://www.rapid7.com/blog/post/2021/12/13/driver-based-attacks-past-and-present/\nauthor: Your Name\ndate: 2023-10-05\ntags:\n- attack.privilege-escalation\n- attack.t1543.003\nlogsource:\n  product: windows\n  category: driver_load\ndetection:\n  selection:\n    ImageLoaded|endswith:\n      - \\WinRing0x64.sys\n      - \\WinRing0.sys\n      - \\WinRing0.dll\n      - \\WinRing0x64.dll\n      - \\winring00x64.sys\n    Hashes|contains: IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7\n  condition: selection\nfalsepositives:\n- Legitimate use of WinRing0 by authorized applications\nlevel: high",
    "expected_rule": "title: Vulnerable WinRing0 Driver Load\nid: 1a42dfa6-6cb2-4df9-9b48-295be477e835\nstatus: test\ndescription: Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation\nreferences:\n    - https://github.com/xmrig/xmrig/tree/master/bin/WinRing0\n    - https://www.rapid7.com/blog/post/2021/12/13/driver-based-attacks-past-and-present/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-07-26\nmodified: 2024-11-23\ntags:\n    - attack.privilege-escalation\n    - attack.t1543.003\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        - Hashes|contains: 'IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7'\n        - ImageLoaded|endswith:\n              - '\\WinRing0x64.sys'\n              - '\\WinRing0.sys'\n              - '\\WinRing0.dll'\n              - '\\WinRing0x64.dll'\n              - '\\winring00x64.sys'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.11955847070241321,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic for both the IMPHASH and ImageLoaded paths, identical logsource configuration, and proper tag implementation. The only minor differences are in metadata fields which don't impact detection effectiveness. The detection logic using both file path patterns and IMPHASH provides robust coverage against WinRing0 driver abuse while maintaining precision.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "The GENERATED rule could be slightly improved by adopting the more conservative 'Unknown' false positive statement rather than making assumptions about legitimate use cases, but the core detection logic is effectively identical to the expected rule and provides excellent coverage."
      }
    },
    "overall_score": 0.7588896176756033,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows",
    "generated_rule": "title: Detection of WinDivert Driver Load\nid: 12345678-1234-5678-1234-567812345678\nstatus: stable\ndescription: Detects the load of the WinDivert driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows\nreferences:\n- https://reqrypt.org/windivert-doc.html\nauthor: Your Name\ndate: 2023-10-01\ntags:\n- attack.collection\n- attack.defense-evasion\n- attack.t1599.001\n- attack.t1557.001\nlogsource:\n  category: driver_load\n  product: windows\ndetection:\n  selection:\n    ImageLoaded|contains:\n      - \\WinDivert.sys\n      - \\WinDivert64.sys\n      - \\NordDivert.sys\n      - \\lingtiwfp.sys\n      - \\eswfp.sys\n    Hashes|contains:\n      - IMPHASH=0604bb7cb4bb851e2168d5c7d9399087\n      - IMPHASH=2e5f0e649d97f32b03c09e4686d0574f\n      - IMPHASH=52f8aa269f69f0edad9e8fcdaedce276\n      - IMPHASH=c0e5d314da39dbf65a2dbff409cc2c76\n      - IMPHASH=58623490691babe8330adc81cd04a663\n      - IMPHASH=8ee39b48656e4d6b8459d7ba7da7438b\n      - IMPHASH=45ee545ae77e8d43fc70ede9efcd4c96\n      - IMPHASH=a1b2e245acd47e4a348e1a552a02859a\n      - IMPHASH=2a5f85fe4609461c6339637594fa9b0a\n      - IMPHASH=6b2c6f95233c2914d1d488ee27531acc\n      - IMPHASH=9f2fdd3f9ab922bbb0560a7df46f4342\n      - IMPHASH=d8a719865c448b1bd2ec241e46ac1c88\n      - IMPHASH=0ea54f8c9af4a2fe8367fa457f48ed38\n      - IMPHASH=9d519ae0a0864d6d6ae3f8b6c9c70af6\n      - IMPHASH=a74929edfc3289895e3f2885278947ae\n      - IMPHASH=a66b476c2d06c370f0a53b5537f2f11e\n      - IMPHASH=bdcd836a46bc2415773f6b5ea77a46e4\n      - IMPHASH=c28cd6ccd83179e79dac132a553693d9\n  condition: selection\nfalsepositives:\n- Legitimate use of WinDivert driver\nlevel: high",
    "expected_rule": "title: WinDivert Driver Load\nid: 679085d5-f427-4484-9f58-1dc30a7c426d\nstatus: test\ndescription: Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows\nreferences:\n    - https://reqrypt.org/windivert-doc.html\n    - https://rastamouse.me/ntlm-relaying-via-cobalt-strike/\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-07-30\nmodified: 2024-11-23\ntags:\n    - attack.collection\n    - attack.defense-evasion\n    - attack.t1599.001\n    - attack.t1557.001\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection:\n        - ImageLoaded|contains:\n              - '\\WinDivert.sys'\n              - '\\WinDivert64.sys'\n              # Other used names\n              - '\\NordDivert.sys'\n              - '\\lingtiwfp.sys'\n              - '\\eswfp.sys'\n        - Hashes|contains:\n              - 'IMPHASH=0604bb7cb4bb851e2168d5c7d9399087'\n              - 'IMPHASH=2e5f0e649d97f32b03c09e4686d0574f'\n              - 'IMPHASH=52f8aa269f69f0edad9e8fcdaedce276'\n              - 'IMPHASH=c0e5d314da39dbf65a2dbff409cc2c76'\n              - 'IMPHASH=58623490691babe8330adc81cd04a663'\n              - 'IMPHASH=8ee39b48656e4d6b8459d7ba7da7438b'\n              - 'IMPHASH=45ee545ae77e8d43fc70ede9efcd4c96'\n              - 'IMPHASH=a1b2e245acd47e4a348e1a552a02859a'\n              - 'IMPHASH=2a5f85fe4609461c6339637594fa9b0a'\n              - 'IMPHASH=6b2c6f95233c2914d1d488ee27531acc'\n              - 'IMPHASH=9f2fdd3f9ab922bbb0560a7df46f4342'\n              - 'IMPHASH=d8a719865c448b1bd2ec241e46ac1c88'\n              - 'IMPHASH=0ea54f8c9af4a2fe8367fa457f48ed38'\n              - 'IMPHASH=9d519ae0a0864d6d6ae3f8b6c9c70af6'\n              - 'IMPHASH=a74929edfc3289895e3f2885278947ae'\n              - 'IMPHASH=a66b476c2d06c370f0a53b5537f2f11e'\n              - 'IMPHASH=bdcd836a46bc2415773f6b5ea77a46e4'\n              - 'IMPHASH=c28cd6ccd83179e79dac132a553693d9'\n    condition: selection\nfalsepositives:\n    - Legitimate WinDivert driver usage\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.014781034924394199,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule, with matching ImageLoaded patterns, identical IMPHASH values, same logsource configuration, and equivalent detection logic structure. The only differences are cosmetic (rule ID, status, and minor formatting variations) with no impact on detection effectiveness.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the additional reference link about NTLM relaying via Cobalt Strike to provide more context about attack scenarios, but otherwise the rule is functionally equivalent to the expected version."
      }
    },
    "overall_score": 0.7386952587310984,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects driver load of the Process Hacker tool",
    "generated_rule": "title: PUA - Process Hacker Driver Load Detection\nid: 12345678-9abc-def0-1234-56789abcdef0\nstatus: stable\ndescription: Detects the loading of the Process Hacker driver, which may indicate privilege escalation attempts.\nreferences:\n- https://processhacker.sourceforge.io/\nauthor: Your Name\ndate: 2023-11-23\ntags:\n- attack.privilege-escalation\n- attack.t1543\nlogsource:\n  category: driver_load\n  product: windows\ndetection:\n  selection:\n    ImageLoaded|endswith: \\kprocesshacker.sys\n    Hashes|contains:\n      - IMPHASH=821D74031D3F625BCBD0DF08B70F1E77\n      - IMPHASH=F86759BB4DE4320918615DC06E998A39\n      - IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18\n      - IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0\n  condition: selection\nfalsepositives:\n- Legitimate use by developers or system administrators\nlevel: high",
    "expected_rule": "title: PUA - Process Hacker Driver Load\nid: 67add051-9ee7-4ad3-93ba-42935615ae8d\nrelated:\n    - id: 10cb6535-b31d-4512-9962-513dcbc42cc1\n      type: similar\nstatus: test\ndescription: Detects driver load of the Process Hacker tool\nreferences:\n    - https://processhacker.sourceforge.io/\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-11-16\nmodified: 2024-11-23\ntags:\n    - attack.privilege-escalation\n    - cve.2021-21551\n    - attack.t1543\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection:\n        - ImageLoaded|endswith: '\\kprocesshacker.sys'\n        - Hashes|contains:\n              - 'IMPHASH=821D74031D3F625BCBD0DF08B70F1E77'\n              - 'IMPHASH=F86759BB4DE4320918615DC06E998A39'\n              - 'IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18'\n              - 'IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0'\n    condition: selection\nfalsepositives:\n    - Legitimate use of process hacker or system informer by developers or system administrators\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.02583554376657826,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching detection logic for both the ImageLoaded path and all IMPHASH values, identical logsource configuration, and equivalent tag coverage for ATT&CK techniques; the only minor differences are in metadata fields that don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the related rule reference and expanding the false positive description to specifically mention 'system informer' as in the expected rule for slightly better context, though these are minor metadata improvements only"
      }
    },
    "overall_score": 0.7354588859416445,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects driver load of the System Informer tool",
    "generated_rule": "title: PUA - System Informer Driver Load Detection\nid: 10cb6535-b31d-4512-9962-513dcbc42cc1\nstatus: stable\ndescription: Detects driver load of the System Informer tool, which may be used for privilege escalation.\nreferences:\n- https://systeminformer.sourceforge.io/\n- https://github.com/winsiderss/systeminformer\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-08\nmodified: 2024-11-23\ntags:\n- attack.privilege-escalation\n- attack.t1543\nlogsource:\n  category: driver_load\n  product: windows\ndetection:\n  selection:\n    ImageLoaded|endswith: \\SystemInformer.sys\n    Hashes|contains:\n      - SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24\n      - SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454\n      - SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D\n      - SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B\n      - SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D\n      - SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34\n      - SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89\n      - SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB\n      - SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B\n      - SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97\n      - SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656\n      - SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4\n      - SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138\n  condition: selection\nfalsepositives:\n- System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly.\nlevel: medium",
    "expected_rule": "title: PUA - System Informer Driver Load\nid: 10cb6535-b31d-4512-9962-513dcbc42cc1\nrelated:\n    - id: 67add051-9ee7-4ad3-93ba-42935615ae8d\n      type: similar\nstatus: test\ndescription: Detects driver load of the System Informer tool\nreferences:\n    - https://systeminformer.sourceforge.io/\n    - https://github.com/winsiderss/systeminformer\nauthor: Florian Roth (Nextron Systems)\ndate: 2023-05-08\nmodified: 2024-11-23\ntags:\n    - attack.privilege-escalation\n    - attack.t1543\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection:\n        - ImageLoaded|endswith: '\\SystemInformer.sys'\n        - Hashes|contains:\n              - 'SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24'\n              - 'SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454'\n              - 'SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D'\n              - 'SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B'\n              - 'SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D'\n              - 'SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34'\n              - 'SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89'\n              - 'SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB'\n              - 'SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B'\n              - 'SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97'\n              - 'SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656'\n              - 'SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4'\n              - 'SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138'\n    condition: selection\nfalsepositives:\n    - System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.007001900022427843,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.95,
        "reasoning": "The GENERATED rule is nearly identical to the EXPECTED rule in core detection capabilities, containing the same ImageLoaded path and complete set of SHA256 hashes for SystemInformer.sys, with identical detection logic, conditions, and level settings. The only differences are cosmetic (YAML formatting) and a slightly more detailed description in the GENERATED rule that actually improves context.",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.95
        },
        "improvement_synopsis": "Consider adding the 'related' field from the EXPECTED rule to maintain correlation with similar detections, though this is a minor enhancement that doesn't impact detection effectiveness."
      }
    },
    "overall_score": 0.7367504750056069,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
    "generated_rule": "title: Remote Access Tool Service Installation Detection\nid: 9f8b7c2d-3e4a-4b8f-9a2d-1f2e4d5c6b7a\nstatus: stable\ndescription: Detects the installation of various remote access tool services, which are often abused by threat actors for unauthorized access.\nreferences:\n- https://redcanary.com/blog/misbehaving-rats/\nauthor: Cybersecurity Analyst\ndate: 2023-10-15\ntags:\n- attack.persistence\n- attack.t1543.003\n- attack.t1569.002\nlogsource:\n  product: windows\n  service: system\ndetection:\n  selection:\n    Provider_Name: Service Control Manager\n    EventID: 7045\n    ServiceName|contains:\n    - AmmyyAdmin\n    - AnyDesk\n    - Atera\n    - BASupportExpressSrvcUpdater\n    - BASupportExpressStandaloneService\n    - chromoting\n    - GoToAssist\n    - GoToMyPC\n    - jumpcloud\n    - LMIGuardianSvc\n    - LogMeIn\n    - monblanking\n    - Parsec\n    - RManService\n    - RPCPerformanceService\n    - RPCService\n    - SplashtopRemoteService\n    - SSUService\n    - TeamViewer\n    - TightVNC\n    - vncserver\n    - Zoho\n  condition: selection\nfalsepositives:\n- Legitimate installation of remote access tools for business or personal use\nlevel: medium\nsource_file: ./sigma_all_rules/rules/windows/builtin/system/service_control_manager/win_system_service_install_remote_access_tools.yml",
    "expected_rule": "title: Remote Access Tool Services Have Been Installed - Security\nid: c8b00925-926c-47e3-beea-298fd563728e\nrelated:\n    - id: 1a31b18a-f00c-4061-9900-f735b96c99fc\n      type: similar\nstatus: test\ndescription: Detects service installation of different remote access tools software. These software are often abused by threat actors to perform\nreferences:\n    - https://redcanary.com/blog/misbehaving-rats/\nauthor: Connor Martin, Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-12-23\nmodified: 2024-12-07\ntags:\n    - attack.persistence\n    - attack.t1543.003\n    - attack.t1569.002\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName|contains:\n            # Based on https://github.com/SigmaHQ/sigma/pull/2841\n            - 'AmmyyAdmin' # https://www.ammyy.com/en/\n            - 'AnyDesk' # https://usersince99.medium.com/windows-privilege-escalation-8214ceaf4db8\n            - 'Atera'\n            - 'BASupportExpressSrvcUpdater' # https://www.systemlookup.com/O23/6837-BASupSrvcUpdater_exe.html\n            - 'BASupportExpressStandaloneService' # https://www.systemlookup.com/O23/6839-BASupSrvc_exe.html\n            - 'chromoting'\n            - 'GoToAssist' # https://www.goto.com/it-management/resolve\n            - 'GoToMyPC' # https://get.gotomypc.com/\n            - 'jumpcloud'\n            - 'LMIGuardianSvc' # https://www.logmein.com/\n            - 'LogMeIn' # https://www.logmein.com/\n            - 'monblanking'\n            - 'Parsec'\n            - 'RManService' # https://www.systemlookup.com/O23/7855-rutserv_exe.html\n            - 'RPCPerformanceService' # https://www.remotepc.com/\n            - 'RPCService' # https://www.remotepc.com/\n            - 'SplashtopRemoteService' # https://www.splashtop.com/\n            - 'SSUService'\n            - 'TeamViewer'\n            - 'TightVNC' # https://www.tightvnc.com/\n            - 'vncserver'\n            - 'Zoho'\n    condition: selection\nfalsepositives:\n    - The rule doesn't look for anything suspicious so false positives are expected. If you use one of the tools mentioned, comment it out\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.11137222461456497,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule uses System/EventID 7045 while EXPECTED uses Security/EventID 4697, both valid but different audit sources; identical RAT service name detection list provides good coverage, but EXPECTED rule includes valuable comments/references for each RAT and better audit requirements documentation; detection logic is functionally equivalent but operates on different event sources",
        "criteria_scores": {
          "detection_effectiveness": 0.8,
          "false_positive_control": 0.65
        },
        "improvement_synopsis": "Switch to Security/4697 events which provide better attribution data, add source documentation for each RAT service, specify required audit policies, and enhance false positive guidance with specific legitimate business scenarios and tuning recommendations"
      }
    },
    "overall_score": 0.7028430561536412,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects wceaux.dll access while WCE pass-the-hash remote command execution on source host",
    "generated_rule": "title: WCE wceaux.dll Access Detection\nid: 2f3b4c8d-9f6e-4d3a-8b2e-1a2f3b4c8d9f\nstatus: stable\ndescription: Detects access to wceaux.dll indicating potential WCE pass-the-hash remote command execution on the source host.\nreferences:\n- https://www.jpcert.or.jp/english/pub/sr/ir_research.html\n- https://jpcertcc.github.io/ToolAnalysisResultSheet\nauthor: Thomas Patzke\ndate: 2023-10-05\ntags:\n- attack.credential-access\n- attack.t1003\n- attack.s0005\nlogsource:\n  product: windows\n  service: security\ndetection:\n  selection:\n    EventID:\n    - 4656\n    - 4658\n    - 4660\n    - 4663\n    ObjectName|endswith: \\wceaux.dll\n  condition: selection\nfalsepositives:\n- Legitimate software accessing wceaux.dll for non-malicious purposes\nlevel: critical",
    "expected_rule": "title: WCE wceaux.dll Access\nid: 1de68c67-af5c-4097-9c85-fe5578e09e67\nstatus: test\ndescription: Detects wceaux.dll access while WCE pass-the-hash remote command execution on source host\nreferences:\n    - https://www.jpcert.or.jp/english/pub/sr/ir_research.html\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet\nauthor: Thomas Patzke\ndate: 2017-06-14\nmodified: 2025-01-30\ntags:\n    - attack.credential-access\n    - attack.t1003\n    - attack.s0005\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4663\n        ObjectName|endswith: '\\wceaux.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.07194139194139193,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.92,
        "reasoning": "The GENERATED rule shows strong detection capabilities with additional EventID 4658/4660 coverage and maintains equivalent core detection logic for wceaux.dll access, while providing more specific false positive documentation that aids in rule tuning and investigation",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.85
        },
        "improvement_synopsis": "Consider adding specific process name or user context filters to further reduce false positives while maintaining the enhanced EventID coverage"
      }
    },
    "overall_score": 0.743985347985348,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects files that have extensions commonly seen while SDelete is used to wipe files.",
    "generated_rule": "title: Detect Files with Extensions Used by SDelete\nid: 8f3b9c2e-4d3b-4a2b-9f3e-1c2d3e4f5b6a\nstatus: stable\ndescription: Detects files that have extensions commonly seen while SDelete is used to wipe files.\nreferences:\n- https://learn.microsoft.com/en-gb/sysinternals/downloads/sdelete\nauthor: Your Name\ndate: 2023-10-15\ntags:\n- attack.defense-evasion\n- attack.t1070.004\n- attack.t1485\nlogsource:\n  product: windows\n  service: security\ndetection:\n  selection:\n    EventID:\n    - 4656\n    - 4663\n    - 4658\n    ObjectName|endswith:\n    - .AAA\n    - .ZZZ\n  condition: selection\nfalsepositives:\n- Legitimate usage of SDelete\n- Files with these extensions used for legitimate purposes\nlevel: medium\nfields:\n- EventID\n- ObjectName\n- SubjectUserName\n- SubjectDomainName\n- SubjectLogonId\nsource_file: ./sigma_all_rules/rules/windows/security/detect_files_with_sdelete_extensions.yml",
    "expected_rule": "title: Potential Secure Deletion with SDelete\nid: 39a80702-d7ca-4a83-b776-525b1f86a36d\nstatus: test\ndescription: Detects files that have extensions commonly seen while SDelete is used to wipe files.\nreferences:\n    - https://jpcertcc.github.io/ToolAnalysisResultSheet/details/sdelete.htm\n    - https://www.jpcert.or.jp/english/pub/sr/ir_research.html\n    - https://learn.microsoft.com/en-gb/sysinternals/downloads/sdelete\nauthor: Thomas Patzke\ndate: 2017-06-14\nmodified: 2024-12-13\ntags:\n    - attack.impact\n    - attack.defense-evasion\n    - attack.t1070.004\n    - attack.t1027.005\n    - attack.t1485\n    - attack.t1553.002\n    - attack.s0195\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4663\n            - 4658\n        ObjectName|endswith:\n            - '.AAA'\n            - '.ZZZ'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of SDelete\n    - Files that are interacted with that have these extensions legitimately\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.0,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.93,
        "reasoning": "The GENERATED rule demonstrates nearly identical detection capabilities to the EXPECTED rule with matching core detection logic (EventIDs, ObjectName patterns, and conditions), identical false positive handling, and equivalent field monitoring for SDelete activity; the only notable differences are in metadata elements (tags, references) which don't impact detection effectiveness",
        "criteria_scores": {
          "detection_effectiveness": 0.95,
          "false_positive_control": 0.9
        },
        "improvement_synopsis": "Consider adding the additional MITRE ATT&CK tags (t1027.005, t1553.002, s0195) and expanding references to include JPCERT analysis for better context and coverage documentation, though these additions would not materially improve detection capability"
      }
    },
    "overall_score": 0.729,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects a suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.",
    "generated_rule": "title: BITS Transfer Job With Uncommon Or Suspicious Remote TLD\nid: 7e3b9f2a-4c3b-4f8b-9a2d-1f2e5b6c8d9f\nstatus: stable\ndescription: Detects a suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md\nauthor: Your Name\ndate: 2023-10-21\ntags:\n- attack.defense-evasion\n- attack.persistence\n- attack.t1197\nlogsource:\n  product: windows\n  service: bits-client\ndetection:\n  selection:\n    EventID: 16403\n  filter_main_generic:\n    RemoteName|contains:\n    - .azureedge.net/\n    - .com/\n    - .sfx.ms/\n    - download.mozilla.org/\n  condition: selection and not 1 of filter_main_generic\nfalsepositives:\n- This rule doesn't exclude other known TLDs such as \".org\" or \".net\". It's recommended to apply additional filters for software and scripts that leverage the BITS service\nlevel: medium",
    "expected_rule": "title: BITS Transfer Job With Uncommon Or Suspicious Remote TLD\nid: 6d44fb93-e7d2-475c-9d3d-54c9c1e33427\nstatus: test\ndescription: Detects a suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md\n    - https://twitter.com/malmoeb/status/1535142803075960832\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-06-10\nmodified: 2024-12-25\ntags:\n    - attack.defense-evasion\n    - attack.persistence\n    - attack.t1197\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n    filter_main_generic:\n        RemoteName|contains:\n            - '.azureedge.net/'\n            - '.com/'\n            - '.sfx.ms/'\n            - 'download.mozilla.org/' # https://download.mozilla.org/?product=firefox-101.0.1-partial-101.0&amp;os=win64&amp;lang=en-US\n            - 'cdn.onenote.net/'\n            - 'cdn.office.net/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - This rule doesn't exclude other known TLDs such as \".org\" or \".net\". It's recommended to apply additional filters for software and scripts that leverage the BITS service\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.058416106987156824,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.87,
        "reasoning": "The GENERATED rule maintains nearly identical core detection logic with EventID 16403 and similar filter conditions for legitimate BITS transfers, but lacks two legitimate paths (cdn.onenote.net and cdn.office.net) in filter_main_generic that could lead to slightly increased false positives. The detection effectiveness is very strong as it preserves the essential BITS abuse detection logic, while the condition statement is functionally equivalent using 'not 1 of filter_main_generic' vs 'not 1 of filter_main_*' (though the latter is more future-proof for rule expansion).",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.8
        },
        "improvement_synopsis": "Add cdn.onenote.net and cdn.office.net to filter_main_generic exclusions, consider using filter_main_* pattern in condition for better extensibility, and evaluate adding more legitimate business CDNs based on environment."
      }
    },
    "overall_score": 0.7256040267467891,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects potentially highly relevant antivirus events in the application log based on known virus signature names and malware keywords.\n",
    "generated_rule": "title: Detection of Relevant Antivirus Events in Application Log\nid: 12345678-1234-5678-1234-567812345678\nstatus: test\ndescription: Detects potentially highly relevant antivirus events in the application log based on known virus signature names and malware keywords.\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\nauthor: Your Name\ndate: 2024-11-03\ntags:\n- attack.resource-development\n- attack.t1588\nlogsource:\n  product: windows\n  service: application\ndetection:\n  selection:\n    EventID: 1\n    Message|contains:\n    - Adfind\n    - 'ASP/BackDoor '\n    - Backdoor.Cobalt\n    - Cobalt\n    - Mimikatz\n    - Meterpreter\n    - Ransom\n    - Webshell\n  filter_optional_generic:\n  - anti_ransomware_service.exe\n  - Anti-Ransomware\n  - Crack\n  - cyber-protect-service.exe\n  - encryptor\n  - Keygen\n  filter_optional_information:\n    Level: 4\n  filter_optional_restartmanager:\n    Provider_Name: Microsoft-Windows-RestartManager\n  condition: selection and not 1 of filter_optional_*\nfalsepositives:\n- Some software piracy tools (key generators, cracks) are classified as hack tools\nlevel: high",
    "expected_rule": "title: Relevant Anti-Virus Signature Keywords In Application Log\nid: 78bc5783-81d9-4d73-ac97-59f6db4f72a8\nstatus: test\ndescription: |\n    Detects potentially highly relevant antivirus events in the application log based on known virus signature names and malware keywords.\nreferences:\n    - https://www.virustotal.com/gui/file/13828b390d5f58b002e808c2c4f02fdd920e236cc8015480fa33b6c1a9300e31\n    - https://www.virustotal.com/gui/file/15b57c1b68cd6ce3c161042e0f3be9f32d78151fe95461eedc59a79fc222c7ed\n    - https://www.virustotal.com/gui/file/5092b2672b4cb87a8dd1c2e6047b487b95995ad8ed5e9fc217f46b8bfb1b8c01\n    - https://www.nextron-systems.com/?s=antivirus\nauthor: Florian Roth (Nextron Systems), Arnim Rupp\ndate: 2017-02-19\nmodified: 2024-12-25\ntags:\n    - attack.resource-development\n    - attack.t1588\nlogsource:\n    product: windows\n    service: application\ndetection:\n    keywords:\n        - 'Adfind'\n        - 'ASP/BackDoor '\n        - 'ATK/'\n        - 'Backdoor.ASP'\n        - 'Backdoor.Cobalt'\n        - 'Backdoor.JSP'\n        - 'Backdoor.PHP'\n        - 'Blackworm'\n        - 'Brutel'\n        - 'BruteR'\n        - 'Chopper'\n        - 'Cobalt'\n        - 'COBEACON'\n        - 'Cometer'\n        - 'CRYPTES'\n        - 'Cryptor'\n        - 'Destructor'\n        - 'DumpCreds'\n        - 'Exploit.Script.CVE'\n        - 'FastReverseProxy'\n        - 'Filecoder'\n        - 'GrandCrab '\n        - 'HackTool'\n        - 'HKTL'\n        - 'HTool-'\n        - '/HTool'\n        - '.HTool'\n        - 'IISExchgSpawnCMD'\n        - 'Impacket'\n        - 'JSP/BackDoor '\n        - 'Keylogger'\n        - 'Koadic'\n        - 'Krypt'\n        - 'Lazagne'\n        - 'Metasploit'\n        - 'Meterpreter'\n        - 'MeteTool'\n        - 'mikatz'\n        - 'Mimikatz'\n        - 'Mpreter'\n        - 'MsfShell'\n        - 'Nighthawk'\n        - 'Packed.Generic.347'\n        - 'PentestPowerShell'\n        - 'Phobos'\n        - 'PHP/BackDoor '\n        - 'Potato'\n        - 'PowerSploit'\n        - 'PowerSSH'\n        - 'PshlSpy'\n        - 'PSWTool'\n        - 'PWCrack'\n        - 'PWDump'\n        - 'Ransom'\n        - 'Rozena'\n        - 'Ryzerlo'\n        - 'Sbelt'\n        - 'Seatbelt'\n        - 'SecurityTool '\n        - 'SharpDump'\n        - 'Shellcode'\n        - 'Sliver'\n        - 'Splinter'\n        - 'Swrort'\n        - 'Tescrypt'\n        - 'TeslaCrypt'\n        - 'TurtleLoader'\n        - 'Valyria'\n        - 'Webshell'\n        # - 'FRP.'\n        # - 'Locker'\n        # - 'PWS.'\n        # - 'PWSX'\n        # - 'Razy'\n        # - 'Ryuk'\n    filter_optional_generic:\n        - 'anti_ransomware_service.exe'\n        - 'Anti-Ransomware'\n        - 'Crack'\n        - 'cyber-protect-service.exe'\n        - 'encryptor'\n        - 'Keygen'\n    filter_optional_information:\n        Level: 4  # Information level\n    filter_optional_restartmanager:\n        Provider_Name: 'Microsoft-Windows-RestartManager'\n    condition: keywords and not 1 of filter_optional_*\nfalsepositives:\n    - Some software piracy tools (key generators, cracks) are classified as hack tools\nlevel: high\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.39296823181227225,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.45,
        "reasoning": "The GENERATED rule has significant detection gaps compared to EXPECTED, with only 8 detection keywords vs 60+ in original, missing critical malware families (e.g., Blackworm, Brutel, Chopper, etc.) and variants (JSP/PHP backdoors, exploit CVEs); detection logic uses Message|contains instead of more efficient keyword matching; maintains same filter logic but severely reduced detection scope would miss many relevant security events",
        "criteria_scores": {
          "detection_effectiveness": 0.3,
          "false_positive_control": 0.8
        },
        "improvement_synopsis": "Expand detection keywords to include full range of malware families, variants and tools; add missing signature patterns like ATK/, HTool variants, and specific malware families; consider adopting the more efficient keywords-based detection approach instead of Message|contains"
      }
    },
    "overall_score": 0.683242057953068,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
    "generated_rule": "title: Uncommon AppX Package Locations\nid: 9f8b7c2d-4e3a-4b8f-9a2d-1f2e3d4c5b6a\nstatus: stable\ndescription: Detects an appx package added to the pipeline of the \"to be processed\" packages which is located in uncommon locations.\nreferences:\n- Internal Research\n- https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\n- https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-10-05\ntags:\n- attack.defense-evasion\nlogsource:\n  product: windows\n  service: appxdeployment-server\ndetection:\n  selection:\n    EventID: 854\n  filter_main_generic:\n    Path|contains:\n    - C:\\Program Files\\WindowsApps\\\n    - C:\\Program Files (x86)\\\n    - C:\\Windows\\SystemApps\\\n    - C:\\Windows\\PrintDialog\\\n    - C:\\Windows\\ImmersiveControlPanel\\\n    - x-windowsupdate://\n    - file:///C:/Program%20Files\n  condition: selection and not 1 of filter_main_generic\nfalsepositives:\n- Unknown\nlevel: medium",
    "expected_rule": "title: Uncommon AppX Package Locations\nid: c977cb50-3dff-4a9f-b873-9290f56132f1\nstatus: test\ndescription: Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations\nreferences:\n    - Internal Research\n    - https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/\n    - https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting\n    - https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-11\nmodified: 2024-12-25\ntags:\n    - attack.defense-evasion\nlogsource:\n    product: windows\n    service: appxdeployment-server\ndetection:\n    selection:\n        EventID: 854\n    filter_main_generic:\n        Path|contains:\n            # Paths can be written using forward slash if the \"file://\" protocol is used\n            - 'C:\\Program Files\\WindowsApps\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\PrintDialog\\'\n            - 'C:\\Windows\\ImmersiveControlPanel\\'\n            - 'x-windowsupdate://'\n            - 'file:///C:/Program%20Files' # Also covers 'file:///C:/Program%20Files%20(x86)/'\n    filter_main_specific:\n        Path|contains:\n            - 'https://statics.teams.cdn.live.net/'\n            - 'https://statics.teams.cdn.office.net/'\n            - 'microsoft.com' # Example: https://go.microsoft.com/fwlink/?linkid=2160968\n            - 'https://installer.teams.static.microsoft/'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "metrics": {
      "valid_yaml": 1.0,
      "has_required_fields": 1.0,
      "detection_logic_similarity": 0.08344798197393988,
      "metadata_completeness": 1.0,
      "llm_judgment": {
        "score": 0.75,
        "reasoning": "The GENERATED rule maintains core detection logic for AppX package locations but lacks the additional filter_main_specific section present in the EXPECTED rule which filters legitimate Microsoft Teams and other Microsoft domains, potentially increasing false positives. Both rules share identical base detection logic (EventID: 854) and primary filter paths, but the EXPECTED rule's additional filtering demonstrates more mature false positive handling.",
        "criteria_scores": {
          "detection_effectiveness": 0.9,
          "false_positive_control": 0.4
        },
        "improvement_synopsis": "Add filter_main_specific section to handle legitimate Microsoft Teams and Microsoft domain URLs, maintain consistent path formatting with quotes, and consider adding the additional reference for BazarLoader attacks for better context."
      }
    },
    "overall_score": 0.6958619954934849,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  },
  {
    "query": "Detects the creation of a named file stream with the imphash of a well-known hack tool",
    "error": "Failed to get judgment: 500 Server Error: Internal Server Error for url: https://my-microservice-680275457059.us-central1.run.app/api/v1/judge",
    "metrics": null,
    "overall_score": 0.0,
    "experiment": "gpt4",
    "model_config": {
      "model_name": "gpt-4o",
      "service_url": "https://my-microservice-680275457059.us-central1.run.app"
    }
  }
]