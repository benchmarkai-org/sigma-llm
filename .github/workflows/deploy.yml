name: Deploy to Cloud Run  # Name of your workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the 'main' branch

jobs:
  deploy:
    name: Deploy to Cloud Run  # Name of the job
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual machine

    steps:
      - name: Checkout code  # Step 1: Get your code
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK  # Step 2: Authenticate with GCP
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  # Use the secret you stored
          service_account_key: ${{ secrets.GCP_SA_KEY }} # Use the secret you stored
          export_default_credentials: true

      - name: Configure Docker for authentication  # Step 3: Prepare Docker
        run: gcloud auth configure-docker

      - name: Build Docker image  # Step 4: Build the image
        run: |
          # Building the Docker image using the Dockerfile in the api folder.
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-microservice:latest -f api/Dockerfile .

      - name: Push Docker image to Container Registry  # Step 5: Store the image
        run: |
          # Pushing the built image to Google Container Registry.
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-microservice:latest

      - name: Deploy to Cloud Run  # Step 6: Deploy to Cloud Run
        run: |
          # Deploying to Cloud Run using the pushed image.
          gcloud run deploy my-microservice \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-microservice:latest \
            --region us-central1 \
            --allow-unauthenticated \
            --set-secrets SERVICE_API_KEY=SERVICE_API_KEY:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest,ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest,PINECONE_API_KEY=PINECONE_API_KEY:latest,WANDB_API_KEY=WANDB_API_KEY:latest \
            --set-env-vars FLASK_ENV=development \
            --platform managed

      - name: Clean up dangling Docker images  # Step 7: Optional cleanup
        run: docker image prune -f
