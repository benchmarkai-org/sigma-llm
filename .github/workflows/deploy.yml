name: Deploy to Cloud Run  # Name of your workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the 'main' branch

jobs:
  deploy:
    name: Deploy to Cloud Run 
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual machine

    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'
          create_credentials_file: true
          export_environment_variables: true
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Google Cloud SDK  # Step 2: Authenticate with GCP
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  # Use the secret you stored
          install_components: 'beta'

      - name: Configure Docker
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          docker build -t us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-microservice/my-microservice:${{ github.sha }} -f api/Dockerfile .
          docker push us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-microservice/my-microservice:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: my-microservice
          region: us-central1
          image: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-microservice/my-microservice:${{ github.sha }}
          env_vars: |
            FLASK_ENV=production
          secrets: |
            SERVICE_API_KEY=SERVICE_API_KEY:latest
            OPENAI_API_KEY=OPENAI_API_KEY:latest
            GOOGLE_API_KEY=GOOGLE_API_KEY:latest
            ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest
            PINECONE_API_KEY=PINECONE_API_KEY:latest
            WANDB_API_KEY=WANDB_API_KEY:latest

      - name: Clean up
        if: always()
        run: docker image prune -f
